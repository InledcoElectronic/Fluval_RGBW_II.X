

Microchip Technology PIC PRO Macro Assembler V1.41 build -162212810 
                                                                                               Sat Sep 16 15:12:03 2017

Microchip Technology Omniscient Code Generator v1.41 (PRO mode) build 201701250102
     1                           	processor	16F18345
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    15                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text19,local,class=CODE,merge=1,delta=2
    25                           	psect	text25,local,class=CODE,merge=1,delta=2
    26                           	psect	swtext1,local,class=CONST,delta=2
    27                           	psect	swtext2,local,class=CONST,delta=2
    28                           	psect	text48,local,class=CODE,merge=1,delta=2
    29                           	psect	intentry,global,class=CODE,delta=2
    30                           	psect	text55,local,class=CODE,merge=1,delta=2
    31                           	psect	text56,local,class=CODE,merge=1,delta=2
    32                           	psect	text60,local,class=CODE,merge=1,delta=2
    33                           	psect	swtext3,local,class=CONST,delta=2
    34                           	psect	text69,local,class=CODE,merge=1,delta=2
    35                           	psect	swtext4,local,class=CONST,delta=2
    36                           	psect	swtext5,local,class=CONST,delta=2
    37                           	psect	swtext6,local,class=CONST,delta=2
    38                           	psect	swtext7,local,class=CONST,delta=2
    39                           	psect	text75,local,class=CODE,merge=1,delta=2
    40                           	psect	pa_nodes0,global,class=CODE,delta=2
    41                           	dabs	1,0x7E,2
    42  0000                     
    43                           ; Version 1.41
    44                           ; Generated 25/01/2017 GMT
    45                           ; 
    46                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC16F18345 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77  0000                     	;# 
    78  0001                     	;# 
    79  0002                     	;# 
    80  0003                     	;# 
    81  0004                     	;# 
    82  0005                     	;# 
    83  0006                     	;# 
    84  0007                     	;# 
    85  0008                     	;# 
    86  0009                     	;# 
    87  000A                     	;# 
    88  000B                     	;# 
    89  000C                     	;# 
    90  000D                     	;# 
    91  000E                     	;# 
    92  0010                     	;# 
    93  0011                     	;# 
    94  0012                     	;# 
    95  0013                     	;# 
    96  0014                     	;# 
    97  0015                     	;# 
    98  0015                     	;# 
    99  0016                     	;# 
   100  0016                     	;# 
   101  0017                     	;# 
   102  0018                     	;# 
   103  0019                     	;# 
   104  0019                     	;# 
   105  001A                     	;# 
   106  001B                     	;# 
   107  001C                     	;# 
   108  001D                     	;# 
   109  001E                     	;# 
   110  001F                     	;# 
   111  008C                     	;# 
   112  008D                     	;# 
   113  008E                     	;# 
   114  0090                     	;# 
   115  0091                     	;# 
   116  0092                     	;# 
   117  0093                     	;# 
   118  0094                     	;# 
   119  0097                     	;# 
   120  009B                     	;# 
   121  009B                     	;# 
   122  009C                     	;# 
   123  009D                     	;# 
   124  009E                     	;# 
   125  009F                     	;# 
   126  010C                     	;# 
   127  010D                     	;# 
   128  010E                     	;# 
   129  0111                     	;# 
   130  0112                     	;# 
   131  0113                     	;# 
   132  0114                     	;# 
   133  0115                     	;# 
   134  0116                     	;# 
   135  0117                     	;# 
   136  0118                     	;# 
   137  0119                     	;# 
   138  018C                     	;# 
   139  018D                     	;# 
   140  018E                     	;# 
   141  0197                     	;# 
   142  0199                     	;# 
   143  0199                     	;# 
   144  0199                     	;# 
   145  019A                     	;# 
   146  019A                     	;# 
   147  019A                     	;# 
   148  019B                     	;# 
   149  019B                     	;# 
   150  019B                     	;# 
   151  019B                     	;# 
   152  019B                     	;# 
   153  019C                     	;# 
   154  019C                     	;# 
   155  019C                     	;# 
   156  019D                     	;# 
   157  019D                     	;# 
   158  019D                     	;# 
   159  019E                     	;# 
   160  019E                     	;# 
   161  019E                     	;# 
   162  019F                     	;# 
   163  019F                     	;# 
   164  019F                     	;# 
   165  019F                     	;# 
   166  019F                     	;# 
   167  020C                     	;# 
   168  020D                     	;# 
   169  020E                     	;# 
   170  0211                     	;# 
   171  0211                     	;# 
   172  0212                     	;# 
   173  0212                     	;# 
   174  0213                     	;# 
   175  0213                     	;# 
   176  0214                     	;# 
   177  0214                     	;# 
   178  0215                     	;# 
   179  0215                     	;# 
   180  0215                     	;# 
   181  0215                     	;# 
   182  0216                     	;# 
   183  0216                     	;# 
   184  0217                     	;# 
   185  0217                     	;# 
   186  0219                     	;# 
   187  021A                     	;# 
   188  021B                     	;# 
   189  021C                     	;# 
   190  021D                     	;# 
   191  021D                     	;# 
   192  021E                     	;# 
   193  021F                     	;# 
   194  028C                     	;# 
   195  028D                     	;# 
   196  028E                     	;# 
   197  0291                     	;# 
   198  0291                     	;# 
   199  0292                     	;# 
   200  0293                     	;# 
   201  0294                     	;# 
   202  0295                     	;# 
   203  0295                     	;# 
   204  0296                     	;# 
   205  0297                     	;# 
   206  0298                     	;# 
   207  029F                     	;# 
   208  030C                     	;# 
   209  030D                     	;# 
   210  030E                     	;# 
   211  0311                     	;# 
   212  0311                     	;# 
   213  0312                     	;# 
   214  0313                     	;# 
   215  0314                     	;# 
   216  0315                     	;# 
   217  0315                     	;# 
   218  0316                     	;# 
   219  0317                     	;# 
   220  0318                     	;# 
   221  038C                     	;# 
   222  038D                     	;# 
   223  038E                     	;# 
   224  0391                     	;# 
   225  0392                     	;# 
   226  0393                     	;# 
   227  0394                     	;# 
   228  0395                     	;# 
   229  0396                     	;# 
   230  0397                     	;# 
   231  0398                     	;# 
   232  0399                     	;# 
   233  039A                     	;# 
   234  039C                     	;# 
   235  039D                     	;# 
   236  039E                     	;# 
   237  039F                     	;# 
   238  0411                     	;# 
   239  0411                     	;# 
   240  0412                     	;# 
   241  0413                     	;# 
   242  0414                     	;# 
   243  0415                     	;# 
   244  0416                     	;# 
   245  0417                     	;# 
   246  0418                     	;# 
   247  0418                     	;# 
   248  0419                     	;# 
   249  041A                     	;# 
   250  041B                     	;# 
   251  041C                     	;# 
   252  041D                     	;# 
   253  041E                     	;# 
   254  041F                     	;# 
   255  0498                     	;# 
   256  0498                     	;# 
   257  0499                     	;# 
   258  049A                     	;# 
   259  049B                     	;# 
   260  049B                     	;# 
   261  049C                     	;# 
   262  049D                     	;# 
   263  049E                     	;# 
   264  049F                     	;# 
   265  0617                     	;# 
   266  0618                     	;# 
   267  0619                     	;# 
   268  0619                     	;# 
   269  061A                     	;# 
   270  061B                     	;# 
   271  061C                     	;# 
   272  061C                     	;# 
   273  061F                     	;# 
   274  0691                     	;# 
   275  0692                     	;# 
   276  0693                     	;# 
   277  0694                     	;# 
   278  0695                     	;# 
   279  0696                     	;# 
   280  0697                     	;# 
   281  0698                     	;# 
   282  0699                     	;# 
   283  0711                     	;# 
   284  0712                     	;# 
   285  0713                     	;# 
   286  0714                     	;# 
   287  0715                     	;# 
   288  0716                     	;# 
   289  0717                     	;# 
   290  0718                     	;# 
   291  0719                     	;# 
   292  0891                     	;# 
   293  0891                     	;# 
   294  0891                     	;# 
   295  0891                     	;# 
   296  0891                     	;# 
   297  0891                     	;# 
   298  0892                     	;# 
   299  0892                     	;# 
   300  0892                     	;# 
   301  0893                     	;# 
   302  0893                     	;# 
   303  0893                     	;# 
   304  0893                     	;# 
   305  0893                     	;# 
   306  0893                     	;# 
   307  0894                     	;# 
   308  0894                     	;# 
   309  0894                     	;# 
   310  0895                     	;# 
   311  0895                     	;# 
   312  0895                     	;# 
   313  0896                     	;# 
   314  0896                     	;# 
   315  0896                     	;# 
   316  089B                     	;# 
   317  0911                     	;# 
   318  0912                     	;# 
   319  0913                     	;# 
   320  0914                     	;# 
   321  0915                     	;# 
   322  0916                     	;# 
   323  0918                     	;# 
   324  0919                     	;# 
   325  091A                     	;# 
   326  091B                     	;# 
   327  091C                     	;# 
   328  091D                     	;# 
   329  091E                     	;# 
   330  091F                     	;# 
   331  0E0F                     	;# 
   332  0E10                     	;# 
   333  0E11                     	;# 
   334  0E12                     	;# 
   335  0E13                     	;# 
   336  0E14                     	;# 
   337  0E15                     	;# 
   338  0E16                     	;# 
   339  0E17                     	;# 
   340  0E18                     	;# 
   341  0E19                     	;# 
   342  0E1A                     	;# 
   343  0E1B                     	;# 
   344  0E1C                     	;# 
   345  0E1D                     	;# 
   346  0E1E                     	;# 
   347  0E1F                     	;# 
   348  0E20                     	;# 
   349  0E21                     	;# 
   350  0E22                     	;# 
   351  0E24                     	;# 
   352  0E25                     	;# 
   353  0E28                     	;# 
   354  0E29                     	;# 
   355  0E2A                     	;# 
   356  0E2B                     	;# 
   357  0E2C                     	;# 
   358  0E2D                     	;# 
   359  0E2E                     	;# 
   360  0E2F                     	;# 
   361  0E90                     	;# 
   362  0E91                     	;# 
   363  0E92                     	;# 
   364  0E94                     	;# 
   365  0E95                     	;# 
   366  0E9C                     	;# 
   367  0E9D                     	;# 
   368  0E9E                     	;# 
   369  0E9F                     	;# 
   370  0EA0                     	;# 
   371  0EA1                     	;# 
   372  0EA2                     	;# 
   373  0EA3                     	;# 
   374  0EA4                     	;# 
   375  0EA5                     	;# 
   376  0EA6                     	;# 
   377  0EA7                     	;# 
   378  0F0F                     	;# 
   379  0F10                     	;# 
   380  0F11                     	;# 
   381  0F12                     	;# 
   382  0F13                     	;# 
   383  0F14                     	;# 
   384  0F15                     	;# 
   385  0F16                     	;# 
   386  0F17                     	;# 
   387  0F18                     	;# 
   388  0F19                     	;# 
   389  0F1A                     	;# 
   390  0F1B                     	;# 
   391  0F1C                     	;# 
   392  0F1D                     	;# 
   393  0F1E                     	;# 
   394  0F1F                     	;# 
   395  0F20                     	;# 
   396  0F21                     	;# 
   397  0F22                     	;# 
   398  0F23                     	;# 
   399  0F24                     	;# 
   400  0F25                     	;# 
   401  0F26                     	;# 
   402  0F27                     	;# 
   403  0F28                     	;# 
   404  0F29                     	;# 
   405  0F2A                     	;# 
   406  0F2B                     	;# 
   407  0F2C                     	;# 
   408  0F2D                     	;# 
   409  0F2E                     	;# 
   410  0F2F                     	;# 
   411  0F30                     	;# 
   412  0F31                     	;# 
   413  0F32                     	;# 
   414  0F33                     	;# 
   415  0F34                     	;# 
   416  0F35                     	;# 
   417  0F36                     	;# 
   418  0F37                     	;# 
   419  0FE4                     	;# 
   420  0FE5                     	;# 
   421  0FE6                     	;# 
   422  0FE7                     	;# 
   423  0FE8                     	;# 
   424  0FE9                     	;# 
   425  0FEA                     	;# 
   426  0FEB                     	;# 
   427  0FED                     	;# 
   428  0FEE                     	;# 
   429  0FEF                     	;# 
   430  0000                     	;# 
   431  0001                     	;# 
   432  0002                     	;# 
   433  0003                     	;# 
   434  0004                     	;# 
   435  0005                     	;# 
   436  0006                     	;# 
   437  0007                     	;# 
   438  0008                     	;# 
   439  0009                     	;# 
   440  000A                     	;# 
   441  000B                     	;# 
   442  000C                     	;# 
   443  000D                     	;# 
   444  000E                     	;# 
   445  0010                     	;# 
   446  0011                     	;# 
   447  0012                     	;# 
   448  0013                     	;# 
   449  0014                     	;# 
   450  0015                     	;# 
   451  0015                     	;# 
   452  0016                     	;# 
   453  0016                     	;# 
   454  0017                     	;# 
   455  0018                     	;# 
   456  0019                     	;# 
   457  0019                     	;# 
   458  001A                     	;# 
   459  001B                     	;# 
   460  001C                     	;# 
   461  001D                     	;# 
   462  001E                     	;# 
   463  001F                     	;# 
   464  008C                     	;# 
   465  008D                     	;# 
   466  008E                     	;# 
   467  0090                     	;# 
   468  0091                     	;# 
   469  0092                     	;# 
   470  0093                     	;# 
   471  0094                     	;# 
   472  0097                     	;# 
   473  009B                     	;# 
   474  009B                     	;# 
   475  009C                     	;# 
   476  009D                     	;# 
   477  009E                     	;# 
   478  009F                     	;# 
   479  010C                     	;# 
   480  010D                     	;# 
   481  010E                     	;# 
   482  0111                     	;# 
   483  0112                     	;# 
   484  0113                     	;# 
   485  0114                     	;# 
   486  0115                     	;# 
   487  0116                     	;# 
   488  0117                     	;# 
   489  0118                     	;# 
   490  0119                     	;# 
   491  018C                     	;# 
   492  018D                     	;# 
   493  018E                     	;# 
   494  0197                     	;# 
   495  0199                     	;# 
   496  0199                     	;# 
   497  0199                     	;# 
   498  019A                     	;# 
   499  019A                     	;# 
   500  019A                     	;# 
   501  019B                     	;# 
   502  019B                     	;# 
   503  019B                     	;# 
   504  019B                     	;# 
   505  019B                     	;# 
   506  019C                     	;# 
   507  019C                     	;# 
   508  019C                     	;# 
   509  019D                     	;# 
   510  019D                     	;# 
   511  019D                     	;# 
   512  019E                     	;# 
   513  019E                     	;# 
   514  019E                     	;# 
   515  019F                     	;# 
   516  019F                     	;# 
   517  019F                     	;# 
   518  019F                     	;# 
   519  019F                     	;# 
   520  020C                     	;# 
   521  020D                     	;# 
   522  020E                     	;# 
   523  0211                     	;# 
   524  0211                     	;# 
   525  0212                     	;# 
   526  0212                     	;# 
   527  0213                     	;# 
   528  0213                     	;# 
   529  0214                     	;# 
   530  0214                     	;# 
   531  0215                     	;# 
   532  0215                     	;# 
   533  0215                     	;# 
   534  0215                     	;# 
   535  0216                     	;# 
   536  0216                     	;# 
   537  0217                     	;# 
   538  0217                     	;# 
   539  0219                     	;# 
   540  021A                     	;# 
   541  021B                     	;# 
   542  021C                     	;# 
   543  021D                     	;# 
   544  021D                     	;# 
   545  021E                     	;# 
   546  021F                     	;# 
   547  028C                     	;# 
   548  028D                     	;# 
   549  028E                     	;# 
   550  0291                     	;# 
   551  0291                     	;# 
   552  0292                     	;# 
   553  0293                     	;# 
   554  0294                     	;# 
   555  0295                     	;# 
   556  0295                     	;# 
   557  0296                     	;# 
   558  0297                     	;# 
   559  0298                     	;# 
   560  029F                     	;# 
   561  030C                     	;# 
   562  030D                     	;# 
   563  030E                     	;# 
   564  0311                     	;# 
   565  0311                     	;# 
   566  0312                     	;# 
   567  0313                     	;# 
   568  0314                     	;# 
   569  0315                     	;# 
   570  0315                     	;# 
   571  0316                     	;# 
   572  0317                     	;# 
   573  0318                     	;# 
   574  038C                     	;# 
   575  038D                     	;# 
   576  038E                     	;# 
   577  0391                     	;# 
   578  0392                     	;# 
   579  0393                     	;# 
   580  0394                     	;# 
   581  0395                     	;# 
   582  0396                     	;# 
   583  0397                     	;# 
   584  0398                     	;# 
   585  0399                     	;# 
   586  039A                     	;# 
   587  039C                     	;# 
   588  039D                     	;# 
   589  039E                     	;# 
   590  039F                     	;# 
   591  0411                     	;# 
   592  0411                     	;# 
   593  0412                     	;# 
   594  0413                     	;# 
   595  0414                     	;# 
   596  0415                     	;# 
   597  0416                     	;# 
   598  0417                     	;# 
   599  0418                     	;# 
   600  0418                     	;# 
   601  0419                     	;# 
   602  041A                     	;# 
   603  041B                     	;# 
   604  041C                     	;# 
   605  041D                     	;# 
   606  041E                     	;# 
   607  041F                     	;# 
   608  0498                     	;# 
   609  0498                     	;# 
   610  0499                     	;# 
   611  049A                     	;# 
   612  049B                     	;# 
   613  049B                     	;# 
   614  049C                     	;# 
   615  049D                     	;# 
   616  049E                     	;# 
   617  049F                     	;# 
   618  0617                     	;# 
   619  0618                     	;# 
   620  0619                     	;# 
   621  0619                     	;# 
   622  061A                     	;# 
   623  061B                     	;# 
   624  061C                     	;# 
   625  061C                     	;# 
   626  061F                     	;# 
   627  0691                     	;# 
   628  0692                     	;# 
   629  0693                     	;# 
   630  0694                     	;# 
   631  0695                     	;# 
   632  0696                     	;# 
   633  0697                     	;# 
   634  0698                     	;# 
   635  0699                     	;# 
   636  0711                     	;# 
   637  0712                     	;# 
   638  0713                     	;# 
   639  0714                     	;# 
   640  0715                     	;# 
   641  0716                     	;# 
   642  0717                     	;# 
   643  0718                     	;# 
   644  0719                     	;# 
   645  0891                     	;# 
   646  0891                     	;# 
   647  0891                     	;# 
   648  0891                     	;# 
   649  0891                     	;# 
   650  0891                     	;# 
   651  0892                     	;# 
   652  0892                     	;# 
   653  0892                     	;# 
   654  0893                     	;# 
   655  0893                     	;# 
   656  0893                     	;# 
   657  0893                     	;# 
   658  0893                     	;# 
   659  0893                     	;# 
   660  0894                     	;# 
   661  0894                     	;# 
   662  0894                     	;# 
   663  0895                     	;# 
   664  0895                     	;# 
   665  0895                     	;# 
   666  0896                     	;# 
   667  0896                     	;# 
   668  0896                     	;# 
   669  089B                     	;# 
   670  0911                     	;# 
   671  0912                     	;# 
   672  0913                     	;# 
   673  0914                     	;# 
   674  0915                     	;# 
   675  0916                     	;# 
   676  0918                     	;# 
   677  0919                     	;# 
   678  091A                     	;# 
   679  091B                     	;# 
   680  091C                     	;# 
   681  091D                     	;# 
   682  091E                     	;# 
   683  091F                     	;# 
   684  0E0F                     	;# 
   685  0E10                     	;# 
   686  0E11                     	;# 
   687  0E12                     	;# 
   688  0E13                     	;# 
   689  0E14                     	;# 
   690  0E15                     	;# 
   691  0E16                     	;# 
   692  0E17                     	;# 
   693  0E18                     	;# 
   694  0E19                     	;# 
   695  0E1A                     	;# 
   696  0E1B                     	;# 
   697  0E1C                     	;# 
   698  0E1D                     	;# 
   699  0E1E                     	;# 
   700  0E1F                     	;# 
   701  0E20                     	;# 
   702  0E21                     	;# 
   703  0E22                     	;# 
   704  0E24                     	;# 
   705  0E25                     	;# 
   706  0E28                     	;# 
   707  0E29                     	;# 
   708  0E2A                     	;# 
   709  0E2B                     	;# 
   710  0E2C                     	;# 
   711  0E2D                     	;# 
   712  0E2E                     	;# 
   713  0E2F                     	;# 
   714  0E90                     	;# 
   715  0E91                     	;# 
   716  0E92                     	;# 
   717  0E94                     	;# 
   718  0E95                     	;# 
   719  0E9C                     	;# 
   720  0E9D                     	;# 
   721  0E9E                     	;# 
   722  0E9F                     	;# 
   723  0EA0                     	;# 
   724  0EA1                     	;# 
   725  0EA2                     	;# 
   726  0EA3                     	;# 
   727  0EA4                     	;# 
   728  0EA5                     	;# 
   729  0EA6                     	;# 
   730  0EA7                     	;# 
   731  0F0F                     	;# 
   732  0F10                     	;# 
   733  0F11                     	;# 
   734  0F12                     	;# 
   735  0F13                     	;# 
   736  0F14                     	;# 
   737  0F15                     	;# 
   738  0F16                     	;# 
   739  0F17                     	;# 
   740  0F18                     	;# 
   741  0F19                     	;# 
   742  0F1A                     	;# 
   743  0F1B                     	;# 
   744  0F1C                     	;# 
   745  0F1D                     	;# 
   746  0F1E                     	;# 
   747  0F1F                     	;# 
   748  0F20                     	;# 
   749  0F21                     	;# 
   750  0F22                     	;# 
   751  0F23                     	;# 
   752  0F24                     	;# 
   753  0F25                     	;# 
   754  0F26                     	;# 
   755  0F27                     	;# 
   756  0F28                     	;# 
   757  0F29                     	;# 
   758  0F2A                     	;# 
   759  0F2B                     	;# 
   760  0F2C                     	;# 
   761  0F2D                     	;# 
   762  0F2E                     	;# 
   763  0F2F                     	;# 
   764  0F30                     	;# 
   765  0F31                     	;# 
   766  0F32                     	;# 
   767  0F33                     	;# 
   768  0F34                     	;# 
   769  0F35                     	;# 
   770  0F36                     	;# 
   771  0F37                     	;# 
   772  0FE4                     	;# 
   773  0FE5                     	;# 
   774  0FE6                     	;# 
   775  0FE7                     	;# 
   776  0FE8                     	;# 
   777  0FE9                     	;# 
   778  0FEA                     	;# 
   779  0FEB                     	;# 
   780  0FED                     	;# 
   781  0FEE                     	;# 
   782  0FEF                     	;# 
   783  0000                     	;# 
   784  0001                     	;# 
   785  0002                     	;# 
   786  0003                     	;# 
   787  0004                     	;# 
   788  0005                     	;# 
   789  0006                     	;# 
   790  0007                     	;# 
   791  0008                     	;# 
   792  0009                     	;# 
   793  000A                     	;# 
   794  000B                     	;# 
   795  000C                     	;# 
   796  000D                     	;# 
   797  000E                     	;# 
   798  0010                     	;# 
   799  0011                     	;# 
   800  0012                     	;# 
   801  0013                     	;# 
   802  0014                     	;# 
   803  0015                     	;# 
   804  0015                     	;# 
   805  0016                     	;# 
   806  0016                     	;# 
   807  0017                     	;# 
   808  0018                     	;# 
   809  0019                     	;# 
   810  0019                     	;# 
   811  001A                     	;# 
   812  001B                     	;# 
   813  001C                     	;# 
   814  001D                     	;# 
   815  001E                     	;# 
   816  001F                     	;# 
   817  008C                     	;# 
   818  008D                     	;# 
   819  008E                     	;# 
   820  0090                     	;# 
   821  0091                     	;# 
   822  0092                     	;# 
   823  0093                     	;# 
   824  0094                     	;# 
   825  0097                     	;# 
   826  009B                     	;# 
   827  009B                     	;# 
   828  009C                     	;# 
   829  009D                     	;# 
   830  009E                     	;# 
   831  009F                     	;# 
   832  010C                     	;# 
   833  010D                     	;# 
   834  010E                     	;# 
   835  0111                     	;# 
   836  0112                     	;# 
   837  0113                     	;# 
   838  0114                     	;# 
   839  0115                     	;# 
   840  0116                     	;# 
   841  0117                     	;# 
   842  0118                     	;# 
   843  0119                     	;# 
   844  018C                     	;# 
   845  018D                     	;# 
   846  018E                     	;# 
   847  0197                     	;# 
   848  0199                     	;# 
   849  0199                     	;# 
   850  0199                     	;# 
   851  019A                     	;# 
   852  019A                     	;# 
   853  019A                     	;# 
   854  019B                     	;# 
   855  019B                     	;# 
   856  019B                     	;# 
   857  019B                     	;# 
   858  019B                     	;# 
   859  019C                     	;# 
   860  019C                     	;# 
   861  019C                     	;# 
   862  019D                     	;# 
   863  019D                     	;# 
   864  019D                     	;# 
   865  019E                     	;# 
   866  019E                     	;# 
   867  019E                     	;# 
   868  019F                     	;# 
   869  019F                     	;# 
   870  019F                     	;# 
   871  019F                     	;# 
   872  019F                     	;# 
   873  020C                     	;# 
   874  020D                     	;# 
   875  020E                     	;# 
   876  0211                     	;# 
   877  0211                     	;# 
   878  0212                     	;# 
   879  0212                     	;# 
   880  0213                     	;# 
   881  0213                     	;# 
   882  0214                     	;# 
   883  0214                     	;# 
   884  0215                     	;# 
   885  0215                     	;# 
   886  0215                     	;# 
   887  0215                     	;# 
   888  0216                     	;# 
   889  0216                     	;# 
   890  0217                     	;# 
   891  0217                     	;# 
   892  0219                     	;# 
   893  021A                     	;# 
   894  021B                     	;# 
   895  021C                     	;# 
   896  021D                     	;# 
   897  021D                     	;# 
   898  021E                     	;# 
   899  021F                     	;# 
   900  028C                     	;# 
   901  028D                     	;# 
   902  028E                     	;# 
   903  0291                     	;# 
   904  0291                     	;# 
   905  0292                     	;# 
   906  0293                     	;# 
   907  0294                     	;# 
   908  0295                     	;# 
   909  0295                     	;# 
   910  0296                     	;# 
   911  0297                     	;# 
   912  0298                     	;# 
   913  029F                     	;# 
   914  030C                     	;# 
   915  030D                     	;# 
   916  030E                     	;# 
   917  0311                     	;# 
   918  0311                     	;# 
   919  0312                     	;# 
   920  0313                     	;# 
   921  0314                     	;# 
   922  0315                     	;# 
   923  0315                     	;# 
   924  0316                     	;# 
   925  0317                     	;# 
   926  0318                     	;# 
   927  038C                     	;# 
   928  038D                     	;# 
   929  038E                     	;# 
   930  0391                     	;# 
   931  0392                     	;# 
   932  0393                     	;# 
   933  0394                     	;# 
   934  0395                     	;# 
   935  0396                     	;# 
   936  0397                     	;# 
   937  0398                     	;# 
   938  0399                     	;# 
   939  039A                     	;# 
   940  039C                     	;# 
   941  039D                     	;# 
   942  039E                     	;# 
   943  039F                     	;# 
   944  0411                     	;# 
   945  0411                     	;# 
   946  0412                     	;# 
   947  0413                     	;# 
   948  0414                     	;# 
   949  0415                     	;# 
   950  0416                     	;# 
   951  0417                     	;# 
   952  0418                     	;# 
   953  0418                     	;# 
   954  0419                     	;# 
   955  041A                     	;# 
   956  041B                     	;# 
   957  041C                     	;# 
   958  041D                     	;# 
   959  041E                     	;# 
   960  041F                     	;# 
   961  0498                     	;# 
   962  0498                     	;# 
   963  0499                     	;# 
   964  049A                     	;# 
   965  049B                     	;# 
   966  049B                     	;# 
   967  049C                     	;# 
   968  049D                     	;# 
   969  049E                     	;# 
   970  049F                     	;# 
   971  0617                     	;# 
   972  0618                     	;# 
   973  0619                     	;# 
   974  0619                     	;# 
   975  061A                     	;# 
   976  061B                     	;# 
   977  061C                     	;# 
   978  061C                     	;# 
   979  061F                     	;# 
   980  0691                     	;# 
   981  0692                     	;# 
   982  0693                     	;# 
   983  0694                     	;# 
   984  0695                     	;# 
   985  0696                     	;# 
   986  0697                     	;# 
   987  0698                     	;# 
   988  0699                     	;# 
   989  0711                     	;# 
   990  0712                     	;# 
   991  0713                     	;# 
   992  0714                     	;# 
   993  0715                     	;# 
   994  0716                     	;# 
   995  0717                     	;# 
   996  0718                     	;# 
   997  0719                     	;# 
   998  0891                     	;# 
   999  0891                     	;# 
  1000  0891                     	;# 
  1001  0891                     	;# 
  1002  0891                     	;# 
  1003  0891                     	;# 
  1004  0892                     	;# 
  1005  0892                     	;# 
  1006  0892                     	;# 
  1007  0893                     	;# 
  1008  0893                     	;# 
  1009  0893                     	;# 
  1010  0893                     	;# 
  1011  0893                     	;# 
  1012  0893                     	;# 
  1013  0894                     	;# 
  1014  0894                     	;# 
  1015  0894                     	;# 
  1016  0895                     	;# 
  1017  0895                     	;# 
  1018  0895                     	;# 
  1019  0896                     	;# 
  1020  0896                     	;# 
  1021  0896                     	;# 
  1022  089B                     	;# 
  1023  0911                     	;# 
  1024  0912                     	;# 
  1025  0913                     	;# 
  1026  0914                     	;# 
  1027  0915                     	;# 
  1028  0916                     	;# 
  1029  0918                     	;# 
  1030  0919                     	;# 
  1031  091A                     	;# 
  1032  091B                     	;# 
  1033  091C                     	;# 
  1034  091D                     	;# 
  1035  091E                     	;# 
  1036  091F                     	;# 
  1037  0E0F                     	;# 
  1038  0E10                     	;# 
  1039  0E11                     	;# 
  1040  0E12                     	;# 
  1041  0E13                     	;# 
  1042  0E14                     	;# 
  1043  0E15                     	;# 
  1044  0E16                     	;# 
  1045  0E17                     	;# 
  1046  0E18                     	;# 
  1047  0E19                     	;# 
  1048  0E1A                     	;# 
  1049  0E1B                     	;# 
  1050  0E1C                     	;# 
  1051  0E1D                     	;# 
  1052  0E1E                     	;# 
  1053  0E1F                     	;# 
  1054  0E20                     	;# 
  1055  0E21                     	;# 
  1056  0E22                     	;# 
  1057  0E24                     	;# 
  1058  0E25                     	;# 
  1059  0E28                     	;# 
  1060  0E29                     	;# 
  1061  0E2A                     	;# 
  1062  0E2B                     	;# 
  1063  0E2C                     	;# 
  1064  0E2D                     	;# 
  1065  0E2E                     	;# 
  1066  0E2F                     	;# 
  1067  0E90                     	;# 
  1068  0E91                     	;# 
  1069  0E92                     	;# 
  1070  0E94                     	;# 
  1071  0E95                     	;# 
  1072  0E9C                     	;# 
  1073  0E9D                     	;# 
  1074  0E9E                     	;# 
  1075  0E9F                     	;# 
  1076  0EA0                     	;# 
  1077  0EA1                     	;# 
  1078  0EA2                     	;# 
  1079  0EA3                     	;# 
  1080  0EA4                     	;# 
  1081  0EA5                     	;# 
  1082  0EA6                     	;# 
  1083  0EA7                     	;# 
  1084  0F0F                     	;# 
  1085  0F10                     	;# 
  1086  0F11                     	;# 
  1087  0F12                     	;# 
  1088  0F13                     	;# 
  1089  0F14                     	;# 
  1090  0F15                     	;# 
  1091  0F16                     	;# 
  1092  0F17                     	;# 
  1093  0F18                     	;# 
  1094  0F19                     	;# 
  1095  0F1A                     	;# 
  1096  0F1B                     	;# 
  1097  0F1C                     	;# 
  1098  0F1D                     	;# 
  1099  0F1E                     	;# 
  1100  0F1F                     	;# 
  1101  0F20                     	;# 
  1102  0F21                     	;# 
  1103  0F22                     	;# 
  1104  0F23                     	;# 
  1105  0F24                     	;# 
  1106  0F25                     	;# 
  1107  0F26                     	;# 
  1108  0F27                     	;# 
  1109  0F28                     	;# 
  1110  0F29                     	;# 
  1111  0F2A                     	;# 
  1112  0F2B                     	;# 
  1113  0F2C                     	;# 
  1114  0F2D                     	;# 
  1115  0F2E                     	;# 
  1116  0F2F                     	;# 
  1117  0F30                     	;# 
  1118  0F31                     	;# 
  1119  0F32                     	;# 
  1120  0F33                     	;# 
  1121  0F34                     	;# 
  1122  0F35                     	;# 
  1123  0F36                     	;# 
  1124  0F37                     	;# 
  1125  0FE4                     	;# 
  1126  0FE5                     	;# 
  1127  0FE6                     	;# 
  1128  0FE7                     	;# 
  1129  0FE8                     	;# 
  1130  0FE9                     	;# 
  1131  0FEA                     	;# 
  1132  0FEB                     	;# 
  1133  0FED                     	;# 
  1134  0FEE                     	;# 
  1135  0FEF                     	;# 
  1136  0000                     	;# 
  1137  0001                     	;# 
  1138  0002                     	;# 
  1139  0003                     	;# 
  1140  0004                     	;# 
  1141  0005                     	;# 
  1142  0006                     	;# 
  1143  0007                     	;# 
  1144  0008                     	;# 
  1145  0009                     	;# 
  1146  000A                     	;# 
  1147  000B                     	;# 
  1148  000C                     	;# 
  1149  000D                     	;# 
  1150  000E                     	;# 
  1151  0010                     	;# 
  1152  0011                     	;# 
  1153  0012                     	;# 
  1154  0013                     	;# 
  1155  0014                     	;# 
  1156  0015                     	;# 
  1157  0015                     	;# 
  1158  0016                     	;# 
  1159  0016                     	;# 
  1160  0017                     	;# 
  1161  0018                     	;# 
  1162  0019                     	;# 
  1163  0019                     	;# 
  1164  001A                     	;# 
  1165  001B                     	;# 
  1166  001C                     	;# 
  1167  001D                     	;# 
  1168  001E                     	;# 
  1169  001F                     	;# 
  1170  008C                     	;# 
  1171  008D                     	;# 
  1172  008E                     	;# 
  1173  0090                     	;# 
  1174  0091                     	;# 
  1175  0092                     	;# 
  1176  0093                     	;# 
  1177  0094                     	;# 
  1178  0097                     	;# 
  1179  009B                     	;# 
  1180  009B                     	;# 
  1181  009C                     	;# 
  1182  009D                     	;# 
  1183  009E                     	;# 
  1184  009F                     	;# 
  1185  010C                     	;# 
  1186  010D                     	;# 
  1187  010E                     	;# 
  1188  0111                     	;# 
  1189  0112                     	;# 
  1190  0113                     	;# 
  1191  0114                     	;# 
  1192  0115                     	;# 
  1193  0116                     	;# 
  1194  0117                     	;# 
  1195  0118                     	;# 
  1196  0119                     	;# 
  1197  018C                     	;# 
  1198  018D                     	;# 
  1199  018E                     	;# 
  1200  0197                     	;# 
  1201  0199                     	;# 
  1202  0199                     	;# 
  1203  0199                     	;# 
  1204  019A                     	;# 
  1205  019A                     	;# 
  1206  019A                     	;# 
  1207  019B                     	;# 
  1208  019B                     	;# 
  1209  019B                     	;# 
  1210  019B                     	;# 
  1211  019B                     	;# 
  1212  019C                     	;# 
  1213  019C                     	;# 
  1214  019C                     	;# 
  1215  019D                     	;# 
  1216  019D                     	;# 
  1217  019D                     	;# 
  1218  019E                     	;# 
  1219  019E                     	;# 
  1220  019E                     	;# 
  1221  019F                     	;# 
  1222  019F                     	;# 
  1223  019F                     	;# 
  1224  019F                     	;# 
  1225  019F                     	;# 
  1226  020C                     	;# 
  1227  020D                     	;# 
  1228  020E                     	;# 
  1229  0211                     	;# 
  1230  0211                     	;# 
  1231  0212                     	;# 
  1232  0212                     	;# 
  1233  0213                     	;# 
  1234  0213                     	;# 
  1235  0214                     	;# 
  1236  0214                     	;# 
  1237  0215                     	;# 
  1238  0215                     	;# 
  1239  0215                     	;# 
  1240  0215                     	;# 
  1241  0216                     	;# 
  1242  0216                     	;# 
  1243  0217                     	;# 
  1244  0217                     	;# 
  1245  0219                     	;# 
  1246  021A                     	;# 
  1247  021B                     	;# 
  1248  021C                     	;# 
  1249  021D                     	;# 
  1250  021D                     	;# 
  1251  021E                     	;# 
  1252  021F                     	;# 
  1253  028C                     	;# 
  1254  028D                     	;# 
  1255  028E                     	;# 
  1256  0291                     	;# 
  1257  0291                     	;# 
  1258  0292                     	;# 
  1259  0293                     	;# 
  1260  0294                     	;# 
  1261  0295                     	;# 
  1262  0295                     	;# 
  1263  0296                     	;# 
  1264  0297                     	;# 
  1265  0298                     	;# 
  1266  029F                     	;# 
  1267  030C                     	;# 
  1268  030D                     	;# 
  1269  030E                     	;# 
  1270  0311                     	;# 
  1271  0311                     	;# 
  1272  0312                     	;# 
  1273  0313                     	;# 
  1274  0314                     	;# 
  1275  0315                     	;# 
  1276  0315                     	;# 
  1277  0316                     	;# 
  1278  0317                     	;# 
  1279  0318                     	;# 
  1280  038C                     	;# 
  1281  038D                     	;# 
  1282  038E                     	;# 
  1283  0391                     	;# 
  1284  0392                     	;# 
  1285  0393                     	;# 
  1286  0394                     	;# 
  1287  0395                     	;# 
  1288  0396                     	;# 
  1289  0397                     	;# 
  1290  0398                     	;# 
  1291  0399                     	;# 
  1292  039A                     	;# 
  1293  039C                     	;# 
  1294  039D                     	;# 
  1295  039E                     	;# 
  1296  039F                     	;# 
  1297  0411                     	;# 
  1298  0411                     	;# 
  1299  0412                     	;# 
  1300  0413                     	;# 
  1301  0414                     	;# 
  1302  0415                     	;# 
  1303  0416                     	;# 
  1304  0417                     	;# 
  1305  0418                     	;# 
  1306  0418                     	;# 
  1307  0419                     	;# 
  1308  041A                     	;# 
  1309  041B                     	;# 
  1310  041C                     	;# 
  1311  041D                     	;# 
  1312  041E                     	;# 
  1313  041F                     	;# 
  1314  0498                     	;# 
  1315  0498                     	;# 
  1316  0499                     	;# 
  1317  049A                     	;# 
  1318  049B                     	;# 
  1319  049B                     	;# 
  1320  049C                     	;# 
  1321  049D                     	;# 
  1322  049E                     	;# 
  1323  049F                     	;# 
  1324  0617                     	;# 
  1325  0618                     	;# 
  1326  0619                     	;# 
  1327  0619                     	;# 
  1328  061A                     	;# 
  1329  061B                     	;# 
  1330  061C                     	;# 
  1331  061C                     	;# 
  1332  061F                     	;# 
  1333  0691                     	;# 
  1334  0692                     	;# 
  1335  0693                     	;# 
  1336  0694                     	;# 
  1337  0695                     	;# 
  1338  0696                     	;# 
  1339  0697                     	;# 
  1340  0698                     	;# 
  1341  0699                     	;# 
  1342  0711                     	;# 
  1343  0712                     	;# 
  1344  0713                     	;# 
  1345  0714                     	;# 
  1346  0715                     	;# 
  1347  0716                     	;# 
  1348  0717                     	;# 
  1349  0718                     	;# 
  1350  0719                     	;# 
  1351  0891                     	;# 
  1352  0891                     	;# 
  1353  0891                     	;# 
  1354  0891                     	;# 
  1355  0891                     	;# 
  1356  0891                     	;# 
  1357  0892                     	;# 
  1358  0892                     	;# 
  1359  0892                     	;# 
  1360  0893                     	;# 
  1361  0893                     	;# 
  1362  0893                     	;# 
  1363  0893                     	;# 
  1364  0893                     	;# 
  1365  0893                     	;# 
  1366  0894                     	;# 
  1367  0894                     	;# 
  1368  0894                     	;# 
  1369  0895                     	;# 
  1370  0895                     	;# 
  1371  0895                     	;# 
  1372  0896                     	;# 
  1373  0896                     	;# 
  1374  0896                     	;# 
  1375  089B                     	;# 
  1376  0911                     	;# 
  1377  0912                     	;# 
  1378  0913                     	;# 
  1379  0914                     	;# 
  1380  0915                     	;# 
  1381  0916                     	;# 
  1382  0918                     	;# 
  1383  0919                     	;# 
  1384  091A                     	;# 
  1385  091B                     	;# 
  1386  091C                     	;# 
  1387  091D                     	;# 
  1388  091E                     	;# 
  1389  091F                     	;# 
  1390  0E0F                     	;# 
  1391  0E10                     	;# 
  1392  0E11                     	;# 
  1393  0E12                     	;# 
  1394  0E13                     	;# 
  1395  0E14                     	;# 
  1396  0E15                     	;# 
  1397  0E16                     	;# 
  1398  0E17                     	;# 
  1399  0E18                     	;# 
  1400  0E19                     	;# 
  1401  0E1A                     	;# 
  1402  0E1B                     	;# 
  1403  0E1C                     	;# 
  1404  0E1D                     	;# 
  1405  0E1E                     	;# 
  1406  0E1F                     	;# 
  1407  0E20                     	;# 
  1408  0E21                     	;# 
  1409  0E22                     	;# 
  1410  0E24                     	;# 
  1411  0E25                     	;# 
  1412  0E28                     	;# 
  1413  0E29                     	;# 
  1414  0E2A                     	;# 
  1415  0E2B                     	;# 
  1416  0E2C                     	;# 
  1417  0E2D                     	;# 
  1418  0E2E                     	;# 
  1419  0E2F                     	;# 
  1420  0E90                     	;# 
  1421  0E91                     	;# 
  1422  0E92                     	;# 
  1423  0E94                     	;# 
  1424  0E95                     	;# 
  1425  0E9C                     	;# 
  1426  0E9D                     	;# 
  1427  0E9E                     	;# 
  1428  0E9F                     	;# 
  1429  0EA0                     	;# 
  1430  0EA1                     	;# 
  1431  0EA2                     	;# 
  1432  0EA3                     	;# 
  1433  0EA4                     	;# 
  1434  0EA5                     	;# 
  1435  0EA6                     	;# 
  1436  0EA7                     	;# 
  1437  0F0F                     	;# 
  1438  0F10                     	;# 
  1439  0F11                     	;# 
  1440  0F12                     	;# 
  1441  0F13                     	;# 
  1442  0F14                     	;# 
  1443  0F15                     	;# 
  1444  0F16                     	;# 
  1445  0F17                     	;# 
  1446  0F18                     	;# 
  1447  0F19                     	;# 
  1448  0F1A                     	;# 
  1449  0F1B                     	;# 
  1450  0F1C                     	;# 
  1451  0F1D                     	;# 
  1452  0F1E                     	;# 
  1453  0F1F                     	;# 
  1454  0F20                     	;# 
  1455  0F21                     	;# 
  1456  0F22                     	;# 
  1457  0F23                     	;# 
  1458  0F24                     	;# 
  1459  0F25                     	;# 
  1460  0F26                     	;# 
  1461  0F27                     	;# 
  1462  0F28                     	;# 
  1463  0F29                     	;# 
  1464  0F2A                     	;# 
  1465  0F2B                     	;# 
  1466  0F2C                     	;# 
  1467  0F2D                     	;# 
  1468  0F2E                     	;# 
  1469  0F2F                     	;# 
  1470  0F30                     	;# 
  1471  0F31                     	;# 
  1472  0F32                     	;# 
  1473  0F33                     	;# 
  1474  0F34                     	;# 
  1475  0F35                     	;# 
  1476  0F36                     	;# 
  1477  0F37                     	;# 
  1478  0FE4                     	;# 
  1479  0FE5                     	;# 
  1480  0FE6                     	;# 
  1481  0FE7                     	;# 
  1482  0FE8                     	;# 
  1483  0FE9                     	;# 
  1484  0FEA                     	;# 
  1485  0FEB                     	;# 
  1486  0FED                     	;# 
  1487  0FEE                     	;# 
  1488  0FEF                     	;# 
  1489  0000                     	;# 
  1490  0001                     	;# 
  1491  0002                     	;# 
  1492  0003                     	;# 
  1493  0004                     	;# 
  1494  0005                     	;# 
  1495  0006                     	;# 
  1496  0007                     	;# 
  1497  0008                     	;# 
  1498  0009                     	;# 
  1499  000A                     	;# 
  1500  000B                     	;# 
  1501  000C                     	;# 
  1502  000D                     	;# 
  1503  000E                     	;# 
  1504  0010                     	;# 
  1505  0011                     	;# 
  1506  0012                     	;# 
  1507  0013                     	;# 
  1508  0014                     	;# 
  1509  0015                     	;# 
  1510  0015                     	;# 
  1511  0016                     	;# 
  1512  0016                     	;# 
  1513  0017                     	;# 
  1514  0018                     	;# 
  1515  0019                     	;# 
  1516  0019                     	;# 
  1517  001A                     	;# 
  1518  001B                     	;# 
  1519  001C                     	;# 
  1520  001D                     	;# 
  1521  001E                     	;# 
  1522  001F                     	;# 
  1523  008C                     	;# 
  1524  008D                     	;# 
  1525  008E                     	;# 
  1526  0090                     	;# 
  1527  0091                     	;# 
  1528  0092                     	;# 
  1529  0093                     	;# 
  1530  0094                     	;# 
  1531  0097                     	;# 
  1532  009B                     	;# 
  1533  009B                     	;# 
  1534  009C                     	;# 
  1535  009D                     	;# 
  1536  009E                     	;# 
  1537  009F                     	;# 
  1538  010C                     	;# 
  1539  010D                     	;# 
  1540  010E                     	;# 
  1541  0111                     	;# 
  1542  0112                     	;# 
  1543  0113                     	;# 
  1544  0114                     	;# 
  1545  0115                     	;# 
  1546  0116                     	;# 
  1547  0117                     	;# 
  1548  0118                     	;# 
  1549  0119                     	;# 
  1550  018C                     	;# 
  1551  018D                     	;# 
  1552  018E                     	;# 
  1553  0197                     	;# 
  1554  0199                     	;# 
  1555  0199                     	;# 
  1556  0199                     	;# 
  1557  019A                     	;# 
  1558  019A                     	;# 
  1559  019A                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019C                     	;# 
  1566  019C                     	;# 
  1567  019C                     	;# 
  1568  019D                     	;# 
  1569  019D                     	;# 
  1570  019D                     	;# 
  1571  019E                     	;# 
  1572  019E                     	;# 
  1573  019E                     	;# 
  1574  019F                     	;# 
  1575  019F                     	;# 
  1576  019F                     	;# 
  1577  019F                     	;# 
  1578  019F                     	;# 
  1579  020C                     	;# 
  1580  020D                     	;# 
  1581  020E                     	;# 
  1582  0211                     	;# 
  1583  0211                     	;# 
  1584  0212                     	;# 
  1585  0212                     	;# 
  1586  0213                     	;# 
  1587  0213                     	;# 
  1588  0214                     	;# 
  1589  0214                     	;# 
  1590  0215                     	;# 
  1591  0215                     	;# 
  1592  0215                     	;# 
  1593  0215                     	;# 
  1594  0216                     	;# 
  1595  0216                     	;# 
  1596  0217                     	;# 
  1597  0217                     	;# 
  1598  0219                     	;# 
  1599  021A                     	;# 
  1600  021B                     	;# 
  1601  021C                     	;# 
  1602  021D                     	;# 
  1603  021D                     	;# 
  1604  021E                     	;# 
  1605  021F                     	;# 
  1606  028C                     	;# 
  1607  028D                     	;# 
  1608  028E                     	;# 
  1609  0291                     	;# 
  1610  0291                     	;# 
  1611  0292                     	;# 
  1612  0293                     	;# 
  1613  0294                     	;# 
  1614  0295                     	;# 
  1615  0295                     	;# 
  1616  0296                     	;# 
  1617  0297                     	;# 
  1618  0298                     	;# 
  1619  029F                     	;# 
  1620  030C                     	;# 
  1621  030D                     	;# 
  1622  030E                     	;# 
  1623  0311                     	;# 
  1624  0311                     	;# 
  1625  0312                     	;# 
  1626  0313                     	;# 
  1627  0314                     	;# 
  1628  0315                     	;# 
  1629  0315                     	;# 
  1630  0316                     	;# 
  1631  0317                     	;# 
  1632  0318                     	;# 
  1633  038C                     	;# 
  1634  038D                     	;# 
  1635  038E                     	;# 
  1636  0391                     	;# 
  1637  0392                     	;# 
  1638  0393                     	;# 
  1639  0394                     	;# 
  1640  0395                     	;# 
  1641  0396                     	;# 
  1642  0397                     	;# 
  1643  0398                     	;# 
  1644  0399                     	;# 
  1645  039A                     	;# 
  1646  039C                     	;# 
  1647  039D                     	;# 
  1648  039E                     	;# 
  1649  039F                     	;# 
  1650  0411                     	;# 
  1651  0411                     	;# 
  1652  0412                     	;# 
  1653  0413                     	;# 
  1654  0414                     	;# 
  1655  0415                     	;# 
  1656  0416                     	;# 
  1657  0417                     	;# 
  1658  0418                     	;# 
  1659  0418                     	;# 
  1660  0419                     	;# 
  1661  041A                     	;# 
  1662  041B                     	;# 
  1663  041C                     	;# 
  1664  041D                     	;# 
  1665  041E                     	;# 
  1666  041F                     	;# 
  1667  0498                     	;# 
  1668  0498                     	;# 
  1669  0499                     	;# 
  1670  049A                     	;# 
  1671  049B                     	;# 
  1672  049B                     	;# 
  1673  049C                     	;# 
  1674  049D                     	;# 
  1675  049E                     	;# 
  1676  049F                     	;# 
  1677  0617                     	;# 
  1678  0618                     	;# 
  1679  0619                     	;# 
  1680  0619                     	;# 
  1681  061A                     	;# 
  1682  061B                     	;# 
  1683  061C                     	;# 
  1684  061C                     	;# 
  1685  061F                     	;# 
  1686  0691                     	;# 
  1687  0692                     	;# 
  1688  0693                     	;# 
  1689  0694                     	;# 
  1690  0695                     	;# 
  1691  0696                     	;# 
  1692  0697                     	;# 
  1693  0698                     	;# 
  1694  0699                     	;# 
  1695  0711                     	;# 
  1696  0712                     	;# 
  1697  0713                     	;# 
  1698  0714                     	;# 
  1699  0715                     	;# 
  1700  0716                     	;# 
  1701  0717                     	;# 
  1702  0718                     	;# 
  1703  0719                     	;# 
  1704  0891                     	;# 
  1705  0891                     	;# 
  1706  0891                     	;# 
  1707  0891                     	;# 
  1708  0891                     	;# 
  1709  0891                     	;# 
  1710  0892                     	;# 
  1711  0892                     	;# 
  1712  0892                     	;# 
  1713  0893                     	;# 
  1714  0893                     	;# 
  1715  0893                     	;# 
  1716  0893                     	;# 
  1717  0893                     	;# 
  1718  0893                     	;# 
  1719  0894                     	;# 
  1720  0894                     	;# 
  1721  0894                     	;# 
  1722  0895                     	;# 
  1723  0895                     	;# 
  1724  0895                     	;# 
  1725  0896                     	;# 
  1726  0896                     	;# 
  1727  0896                     	;# 
  1728  089B                     	;# 
  1729  0911                     	;# 
  1730  0912                     	;# 
  1731  0913                     	;# 
  1732  0914                     	;# 
  1733  0915                     	;# 
  1734  0916                     	;# 
  1735  0918                     	;# 
  1736  0919                     	;# 
  1737  091A                     	;# 
  1738  091B                     	;# 
  1739  091C                     	;# 
  1740  091D                     	;# 
  1741  091E                     	;# 
  1742  091F                     	;# 
  1743  0E0F                     	;# 
  1744  0E10                     	;# 
  1745  0E11                     	;# 
  1746  0E12                     	;# 
  1747  0E13                     	;# 
  1748  0E14                     	;# 
  1749  0E15                     	;# 
  1750  0E16                     	;# 
  1751  0E17                     	;# 
  1752  0E18                     	;# 
  1753  0E19                     	;# 
  1754  0E1A                     	;# 
  1755  0E1B                     	;# 
  1756  0E1C                     	;# 
  1757  0E1D                     	;# 
  1758  0E1E                     	;# 
  1759  0E1F                     	;# 
  1760  0E20                     	;# 
  1761  0E21                     	;# 
  1762  0E22                     	;# 
  1763  0E24                     	;# 
  1764  0E25                     	;# 
  1765  0E28                     	;# 
  1766  0E29                     	;# 
  1767  0E2A                     	;# 
  1768  0E2B                     	;# 
  1769  0E2C                     	;# 
  1770  0E2D                     	;# 
  1771  0E2E                     	;# 
  1772  0E2F                     	;# 
  1773  0E90                     	;# 
  1774  0E91                     	;# 
  1775  0E92                     	;# 
  1776  0E94                     	;# 
  1777  0E95                     	;# 
  1778  0E9C                     	;# 
  1779  0E9D                     	;# 
  1780  0E9E                     	;# 
  1781  0E9F                     	;# 
  1782  0EA0                     	;# 
  1783  0EA1                     	;# 
  1784  0EA2                     	;# 
  1785  0EA3                     	;# 
  1786  0EA4                     	;# 
  1787  0EA5                     	;# 
  1788  0EA6                     	;# 
  1789  0EA7                     	;# 
  1790  0F0F                     	;# 
  1791  0F10                     	;# 
  1792  0F11                     	;# 
  1793  0F12                     	;# 
  1794  0F13                     	;# 
  1795  0F14                     	;# 
  1796  0F15                     	;# 
  1797  0F16                     	;# 
  1798  0F17                     	;# 
  1799  0F18                     	;# 
  1800  0F19                     	;# 
  1801  0F1A                     	;# 
  1802  0F1B                     	;# 
  1803  0F1C                     	;# 
  1804  0F1D                     	;# 
  1805  0F1E                     	;# 
  1806  0F1F                     	;# 
  1807  0F20                     	;# 
  1808  0F21                     	;# 
  1809  0F22                     	;# 
  1810  0F23                     	;# 
  1811  0F24                     	;# 
  1812  0F25                     	;# 
  1813  0F26                     	;# 
  1814  0F27                     	;# 
  1815  0F28                     	;# 
  1816  0F29                     	;# 
  1817  0F2A                     	;# 
  1818  0F2B                     	;# 
  1819  0F2C                     	;# 
  1820  0F2D                     	;# 
  1821  0F2E                     	;# 
  1822  0F2F                     	;# 
  1823  0F30                     	;# 
  1824  0F31                     	;# 
  1825  0F32                     	;# 
  1826  0F33                     	;# 
  1827  0F34                     	;# 
  1828  0F35                     	;# 
  1829  0F36                     	;# 
  1830  0F37                     	;# 
  1831  0FE4                     	;# 
  1832  0FE5                     	;# 
  1833  0FE6                     	;# 
  1834  0FE7                     	;# 
  1835  0FE8                     	;# 
  1836  0FE9                     	;# 
  1837  0FEA                     	;# 
  1838  0FEB                     	;# 
  1839  0FED                     	;# 
  1840  0FEE                     	;# 
  1841  0FEF                     	;# 
  1842  0000                     	;# 
  1843  0001                     	;# 
  1844  0002                     	;# 
  1845  0003                     	;# 
  1846  0004                     	;# 
  1847  0005                     	;# 
  1848  0006                     	;# 
  1849  0007                     	;# 
  1850  0008                     	;# 
  1851  0009                     	;# 
  1852  000A                     	;# 
  1853  000B                     	;# 
  1854  000C                     	;# 
  1855  000D                     	;# 
  1856  000E                     	;# 
  1857  0010                     	;# 
  1858  0011                     	;# 
  1859  0012                     	;# 
  1860  0013                     	;# 
  1861  0014                     	;# 
  1862  0015                     	;# 
  1863  0015                     	;# 
  1864  0016                     	;# 
  1865  0016                     	;# 
  1866  0017                     	;# 
  1867  0018                     	;# 
  1868  0019                     	;# 
  1869  0019                     	;# 
  1870  001A                     	;# 
  1871  001B                     	;# 
  1872  001C                     	;# 
  1873  001D                     	;# 
  1874  001E                     	;# 
  1875  001F                     	;# 
  1876  008C                     	;# 
  1877  008D                     	;# 
  1878  008E                     	;# 
  1879  0090                     	;# 
  1880  0091                     	;# 
  1881  0092                     	;# 
  1882  0093                     	;# 
  1883  0094                     	;# 
  1884  0097                     	;# 
  1885  009B                     	;# 
  1886  009B                     	;# 
  1887  009C                     	;# 
  1888  009D                     	;# 
  1889  009E                     	;# 
  1890  009F                     	;# 
  1891  010C                     	;# 
  1892  010D                     	;# 
  1893  010E                     	;# 
  1894  0111                     	;# 
  1895  0112                     	;# 
  1896  0113                     	;# 
  1897  0114                     	;# 
  1898  0115                     	;# 
  1899  0116                     	;# 
  1900  0117                     	;# 
  1901  0118                     	;# 
  1902  0119                     	;# 
  1903  018C                     	;# 
  1904  018D                     	;# 
  1905  018E                     	;# 
  1906  0197                     	;# 
  1907  0199                     	;# 
  1908  0199                     	;# 
  1909  0199                     	;# 
  1910  019A                     	;# 
  1911  019A                     	;# 
  1912  019A                     	;# 
  1913  019B                     	;# 
  1914  019B                     	;# 
  1915  019B                     	;# 
  1916  019B                     	;# 
  1917  019B                     	;# 
  1918  019C                     	;# 
  1919  019C                     	;# 
  1920  019C                     	;# 
  1921  019D                     	;# 
  1922  019D                     	;# 
  1923  019D                     	;# 
  1924  019E                     	;# 
  1925  019E                     	;# 
  1926  019E                     	;# 
  1927  019F                     	;# 
  1928  019F                     	;# 
  1929  019F                     	;# 
  1930  019F                     	;# 
  1931  019F                     	;# 
  1932  020C                     	;# 
  1933  020D                     	;# 
  1934  020E                     	;# 
  1935  0211                     	;# 
  1936  0211                     	;# 
  1937  0212                     	;# 
  1938  0212                     	;# 
  1939  0213                     	;# 
  1940  0213                     	;# 
  1941  0214                     	;# 
  1942  0214                     	;# 
  1943  0215                     	;# 
  1944  0215                     	;# 
  1945  0215                     	;# 
  1946  0215                     	;# 
  1947  0216                     	;# 
  1948  0216                     	;# 
  1949  0217                     	;# 
  1950  0217                     	;# 
  1951  0219                     	;# 
  1952  021A                     	;# 
  1953  021B                     	;# 
  1954  021C                     	;# 
  1955  021D                     	;# 
  1956  021D                     	;# 
  1957  021E                     	;# 
  1958  021F                     	;# 
  1959  028C                     	;# 
  1960  028D                     	;# 
  1961  028E                     	;# 
  1962  0291                     	;# 
  1963  0291                     	;# 
  1964  0292                     	;# 
  1965  0293                     	;# 
  1966  0294                     	;# 
  1967  0295                     	;# 
  1968  0295                     	;# 
  1969  0296                     	;# 
  1970  0297                     	;# 
  1971  0298                     	;# 
  1972  029F                     	;# 
  1973  030C                     	;# 
  1974  030D                     	;# 
  1975  030E                     	;# 
  1976  0311                     	;# 
  1977  0311                     	;# 
  1978  0312                     	;# 
  1979  0313                     	;# 
  1980  0314                     	;# 
  1981  0315                     	;# 
  1982  0315                     	;# 
  1983  0316                     	;# 
  1984  0317                     	;# 
  1985  0318                     	;# 
  1986  038C                     	;# 
  1987  038D                     	;# 
  1988  038E                     	;# 
  1989  0391                     	;# 
  1990  0392                     	;# 
  1991  0393                     	;# 
  1992  0394                     	;# 
  1993  0395                     	;# 
  1994  0396                     	;# 
  1995  0397                     	;# 
  1996  0398                     	;# 
  1997  0399                     	;# 
  1998  039A                     	;# 
  1999  039C                     	;# 
  2000  039D                     	;# 
  2001  039E                     	;# 
  2002  039F                     	;# 
  2003  0411                     	;# 
  2004  0411                     	;# 
  2005  0412                     	;# 
  2006  0413                     	;# 
  2007  0414                     	;# 
  2008  0415                     	;# 
  2009  0416                     	;# 
  2010  0417                     	;# 
  2011  0418                     	;# 
  2012  0418                     	;# 
  2013  0419                     	;# 
  2014  041A                     	;# 
  2015  041B                     	;# 
  2016  041C                     	;# 
  2017  041D                     	;# 
  2018  041E                     	;# 
  2019  041F                     	;# 
  2020  0498                     	;# 
  2021  0498                     	;# 
  2022  0499                     	;# 
  2023  049A                     	;# 
  2024  049B                     	;# 
  2025  049B                     	;# 
  2026  049C                     	;# 
  2027  049D                     	;# 
  2028  049E                     	;# 
  2029  049F                     	;# 
  2030  0617                     	;# 
  2031  0618                     	;# 
  2032  0619                     	;# 
  2033  0619                     	;# 
  2034  061A                     	;# 
  2035  061B                     	;# 
  2036  061C                     	;# 
  2037  061C                     	;# 
  2038  061F                     	;# 
  2039  0691                     	;# 
  2040  0692                     	;# 
  2041  0693                     	;# 
  2042  0694                     	;# 
  2043  0695                     	;# 
  2044  0696                     	;# 
  2045  0697                     	;# 
  2046  0698                     	;# 
  2047  0699                     	;# 
  2048  0711                     	;# 
  2049  0712                     	;# 
  2050  0713                     	;# 
  2051  0714                     	;# 
  2052  0715                     	;# 
  2053  0716                     	;# 
  2054  0717                     	;# 
  2055  0718                     	;# 
  2056  0719                     	;# 
  2057  0891                     	;# 
  2058  0891                     	;# 
  2059  0891                     	;# 
  2060  0891                     	;# 
  2061  0891                     	;# 
  2062  0891                     	;# 
  2063  0892                     	;# 
  2064  0892                     	;# 
  2065  0892                     	;# 
  2066  0893                     	;# 
  2067  0893                     	;# 
  2068  0893                     	;# 
  2069  0893                     	;# 
  2070  0893                     	;# 
  2071  0893                     	;# 
  2072  0894                     	;# 
  2073  0894                     	;# 
  2074  0894                     	;# 
  2075  0895                     	;# 
  2076  0895                     	;# 
  2077  0895                     	;# 
  2078  0896                     	;# 
  2079  0896                     	;# 
  2080  0896                     	;# 
  2081  089B                     	;# 
  2082  0911                     	;# 
  2083  0912                     	;# 
  2084  0913                     	;# 
  2085  0914                     	;# 
  2086  0915                     	;# 
  2087  0916                     	;# 
  2088  0918                     	;# 
  2089  0919                     	;# 
  2090  091A                     	;# 
  2091  091B                     	;# 
  2092  091C                     	;# 
  2093  091D                     	;# 
  2094  091E                     	;# 
  2095  091F                     	;# 
  2096  0E0F                     	;# 
  2097  0E10                     	;# 
  2098  0E11                     	;# 
  2099  0E12                     	;# 
  2100  0E13                     	;# 
  2101  0E14                     	;# 
  2102  0E15                     	;# 
  2103  0E16                     	;# 
  2104  0E17                     	;# 
  2105  0E18                     	;# 
  2106  0E19                     	;# 
  2107  0E1A                     	;# 
  2108  0E1B                     	;# 
  2109  0E1C                     	;# 
  2110  0E1D                     	;# 
  2111  0E1E                     	;# 
  2112  0E1F                     	;# 
  2113  0E20                     	;# 
  2114  0E21                     	;# 
  2115  0E22                     	;# 
  2116  0E24                     	;# 
  2117  0E25                     	;# 
  2118  0E28                     	;# 
  2119  0E29                     	;# 
  2120  0E2A                     	;# 
  2121  0E2B                     	;# 
  2122  0E2C                     	;# 
  2123  0E2D                     	;# 
  2124  0E2E                     	;# 
  2125  0E2F                     	;# 
  2126  0E90                     	;# 
  2127  0E91                     	;# 
  2128  0E92                     	;# 
  2129  0E94                     	;# 
  2130  0E95                     	;# 
  2131  0E9C                     	;# 
  2132  0E9D                     	;# 
  2133  0E9E                     	;# 
  2134  0E9F                     	;# 
  2135  0EA0                     	;# 
  2136  0EA1                     	;# 
  2137  0EA2                     	;# 
  2138  0EA3                     	;# 
  2139  0EA4                     	;# 
  2140  0EA5                     	;# 
  2141  0EA6                     	;# 
  2142  0EA7                     	;# 
  2143  0F0F                     	;# 
  2144  0F10                     	;# 
  2145  0F11                     	;# 
  2146  0F12                     	;# 
  2147  0F13                     	;# 
  2148  0F14                     	;# 
  2149  0F15                     	;# 
  2150  0F16                     	;# 
  2151  0F17                     	;# 
  2152  0F18                     	;# 
  2153  0F19                     	;# 
  2154  0F1A                     	;# 
  2155  0F1B                     	;# 
  2156  0F1C                     	;# 
  2157  0F1D                     	;# 
  2158  0F1E                     	;# 
  2159  0F1F                     	;# 
  2160  0F20                     	;# 
  2161  0F21                     	;# 
  2162  0F22                     	;# 
  2163  0F23                     	;# 
  2164  0F24                     	;# 
  2165  0F25                     	;# 
  2166  0F26                     	;# 
  2167  0F27                     	;# 
  2168  0F28                     	;# 
  2169  0F29                     	;# 
  2170  0F2A                     	;# 
  2171  0F2B                     	;# 
  2172  0F2C                     	;# 
  2173  0F2D                     	;# 
  2174  0F2E                     	;# 
  2175  0F2F                     	;# 
  2176  0F30                     	;# 
  2177  0F31                     	;# 
  2178  0F32                     	;# 
  2179  0F33                     	;# 
  2180  0F34                     	;# 
  2181  0F35                     	;# 
  2182  0F36                     	;# 
  2183  0F37                     	;# 
  2184  0FE4                     	;# 
  2185  0FE5                     	;# 
  2186  0FE6                     	;# 
  2187  0FE7                     	;# 
  2188  0FE8                     	;# 
  2189  0FE9                     	;# 
  2190  0FEA                     	;# 
  2191  0FEB                     	;# 
  2192  0FED                     	;# 
  2193  0FEE                     	;# 
  2194  0FEF                     	;# 
  2195  0000                     	;# 
  2196  0001                     	;# 
  2197  0002                     	;# 
  2198  0003                     	;# 
  2199  0004                     	;# 
  2200  0005                     	;# 
  2201  0006                     	;# 
  2202  0007                     	;# 
  2203  0008                     	;# 
  2204  0009                     	;# 
  2205  000A                     	;# 
  2206  000B                     	;# 
  2207  000C                     	;# 
  2208  000D                     	;# 
  2209  000E                     	;# 
  2210  0010                     	;# 
  2211  0011                     	;# 
  2212  0012                     	;# 
  2213  0013                     	;# 
  2214  0014                     	;# 
  2215  0015                     	;# 
  2216  0015                     	;# 
  2217  0016                     	;# 
  2218  0016                     	;# 
  2219  0017                     	;# 
  2220  0018                     	;# 
  2221  0019                     	;# 
  2222  0019                     	;# 
  2223  001A                     	;# 
  2224  001B                     	;# 
  2225  001C                     	;# 
  2226  001D                     	;# 
  2227  001E                     	;# 
  2228  001F                     	;# 
  2229  008C                     	;# 
  2230  008D                     	;# 
  2231  008E                     	;# 
  2232  0090                     	;# 
  2233  0091                     	;# 
  2234  0092                     	;# 
  2235  0093                     	;# 
  2236  0094                     	;# 
  2237  0097                     	;# 
  2238  009B                     	;# 
  2239  009B                     	;# 
  2240  009C                     	;# 
  2241  009D                     	;# 
  2242  009E                     	;# 
  2243  009F                     	;# 
  2244  010C                     	;# 
  2245  010D                     	;# 
  2246  010E                     	;# 
  2247  0111                     	;# 
  2248  0112                     	;# 
  2249  0113                     	;# 
  2250  0114                     	;# 
  2251  0115                     	;# 
  2252  0116                     	;# 
  2253  0117                     	;# 
  2254  0118                     	;# 
  2255  0119                     	;# 
  2256  018C                     	;# 
  2257  018D                     	;# 
  2258  018E                     	;# 
  2259  0197                     	;# 
  2260  0199                     	;# 
  2261  0199                     	;# 
  2262  0199                     	;# 
  2263  019A                     	;# 
  2264  019A                     	;# 
  2265  019A                     	;# 
  2266  019B                     	;# 
  2267  019B                     	;# 
  2268  019B                     	;# 
  2269  019B                     	;# 
  2270  019B                     	;# 
  2271  019C                     	;# 
  2272  019C                     	;# 
  2273  019C                     	;# 
  2274  019D                     	;# 
  2275  019D                     	;# 
  2276  019D                     	;# 
  2277  019E                     	;# 
  2278  019E                     	;# 
  2279  019E                     	;# 
  2280  019F                     	;# 
  2281  019F                     	;# 
  2282  019F                     	;# 
  2283  019F                     	;# 
  2284  019F                     	;# 
  2285  020C                     	;# 
  2286  020D                     	;# 
  2287  020E                     	;# 
  2288  0211                     	;# 
  2289  0211                     	;# 
  2290  0212                     	;# 
  2291  0212                     	;# 
  2292  0213                     	;# 
  2293  0213                     	;# 
  2294  0214                     	;# 
  2295  0214                     	;# 
  2296  0215                     	;# 
  2297  0215                     	;# 
  2298  0215                     	;# 
  2299  0215                     	;# 
  2300  0216                     	;# 
  2301  0216                     	;# 
  2302  0217                     	;# 
  2303  0217                     	;# 
  2304  0219                     	;# 
  2305  021A                     	;# 
  2306  021B                     	;# 
  2307  021C                     	;# 
  2308  021D                     	;# 
  2309  021D                     	;# 
  2310  021E                     	;# 
  2311  021F                     	;# 
  2312  028C                     	;# 
  2313  028D                     	;# 
  2314  028E                     	;# 
  2315  0291                     	;# 
  2316  0291                     	;# 
  2317  0292                     	;# 
  2318  0293                     	;# 
  2319  0294                     	;# 
  2320  0295                     	;# 
  2321  0295                     	;# 
  2322  0296                     	;# 
  2323  0297                     	;# 
  2324  0298                     	;# 
  2325  029F                     	;# 
  2326  030C                     	;# 
  2327  030D                     	;# 
  2328  030E                     	;# 
  2329  0311                     	;# 
  2330  0311                     	;# 
  2331  0312                     	;# 
  2332  0313                     	;# 
  2333  0314                     	;# 
  2334  0315                     	;# 
  2335  0315                     	;# 
  2336  0316                     	;# 
  2337  0317                     	;# 
  2338  0318                     	;# 
  2339  038C                     	;# 
  2340  038D                     	;# 
  2341  038E                     	;# 
  2342  0391                     	;# 
  2343  0392                     	;# 
  2344  0393                     	;# 
  2345  0394                     	;# 
  2346  0395                     	;# 
  2347  0396                     	;# 
  2348  0397                     	;# 
  2349  0398                     	;# 
  2350  0399                     	;# 
  2351  039A                     	;# 
  2352  039C                     	;# 
  2353  039D                     	;# 
  2354  039E                     	;# 
  2355  039F                     	;# 
  2356  0411                     	;# 
  2357  0411                     	;# 
  2358  0412                     	;# 
  2359  0413                     	;# 
  2360  0414                     	;# 
  2361  0415                     	;# 
  2362  0416                     	;# 
  2363  0417                     	;# 
  2364  0418                     	;# 
  2365  0418                     	;# 
  2366  0419                     	;# 
  2367  041A                     	;# 
  2368  041B                     	;# 
  2369  041C                     	;# 
  2370  041D                     	;# 
  2371  041E                     	;# 
  2372  041F                     	;# 
  2373  0498                     	;# 
  2374  0498                     	;# 
  2375  0499                     	;# 
  2376  049A                     	;# 
  2377  049B                     	;# 
  2378  049B                     	;# 
  2379  049C                     	;# 
  2380  049D                     	;# 
  2381  049E                     	;# 
  2382  049F                     	;# 
  2383  0617                     	;# 
  2384  0618                     	;# 
  2385  0619                     	;# 
  2386  0619                     	;# 
  2387  061A                     	;# 
  2388  061B                     	;# 
  2389  061C                     	;# 
  2390  061C                     	;# 
  2391  061F                     	;# 
  2392  0691                     	;# 
  2393  0692                     	;# 
  2394  0693                     	;# 
  2395  0694                     	;# 
  2396  0695                     	;# 
  2397  0696                     	;# 
  2398  0697                     	;# 
  2399  0698                     	;# 
  2400  0699                     	;# 
  2401  0711                     	;# 
  2402  0712                     	;# 
  2403  0713                     	;# 
  2404  0714                     	;# 
  2405  0715                     	;# 
  2406  0716                     	;# 
  2407  0717                     	;# 
  2408  0718                     	;# 
  2409  0719                     	;# 
  2410  0891                     	;# 
  2411  0891                     	;# 
  2412  0891                     	;# 
  2413  0891                     	;# 
  2414  0891                     	;# 
  2415  0891                     	;# 
  2416  0892                     	;# 
  2417  0892                     	;# 
  2418  0892                     	;# 
  2419  0893                     	;# 
  2420  0893                     	;# 
  2421  0893                     	;# 
  2422  0893                     	;# 
  2423  0893                     	;# 
  2424  0893                     	;# 
  2425  0894                     	;# 
  2426  0894                     	;# 
  2427  0894                     	;# 
  2428  0895                     	;# 
  2429  0895                     	;# 
  2430  0895                     	;# 
  2431  0896                     	;# 
  2432  0896                     	;# 
  2433  0896                     	;# 
  2434  089B                     	;# 
  2435  0911                     	;# 
  2436  0912                     	;# 
  2437  0913                     	;# 
  2438  0914                     	;# 
  2439  0915                     	;# 
  2440  0916                     	;# 
  2441  0918                     	;# 
  2442  0919                     	;# 
  2443  091A                     	;# 
  2444  091B                     	;# 
  2445  091C                     	;# 
  2446  091D                     	;# 
  2447  091E                     	;# 
  2448  091F                     	;# 
  2449  0E0F                     	;# 
  2450  0E10                     	;# 
  2451  0E11                     	;# 
  2452  0E12                     	;# 
  2453  0E13                     	;# 
  2454  0E14                     	;# 
  2455  0E15                     	;# 
  2456  0E16                     	;# 
  2457  0E17                     	;# 
  2458  0E18                     	;# 
  2459  0E19                     	;# 
  2460  0E1A                     	;# 
  2461  0E1B                     	;# 
  2462  0E1C                     	;# 
  2463  0E1D                     	;# 
  2464  0E1E                     	;# 
  2465  0E1F                     	;# 
  2466  0E20                     	;# 
  2467  0E21                     	;# 
  2468  0E22                     	;# 
  2469  0E24                     	;# 
  2470  0E25                     	;# 
  2471  0E28                     	;# 
  2472  0E29                     	;# 
  2473  0E2A                     	;# 
  2474  0E2B                     	;# 
  2475  0E2C                     	;# 
  2476  0E2D                     	;# 
  2477  0E2E                     	;# 
  2478  0E2F                     	;# 
  2479  0E90                     	;# 
  2480  0E91                     	;# 
  2481  0E92                     	;# 
  2482  0E94                     	;# 
  2483  0E95                     	;# 
  2484  0E9C                     	;# 
  2485  0E9D                     	;# 
  2486  0E9E                     	;# 
  2487  0E9F                     	;# 
  2488  0EA0                     	;# 
  2489  0EA1                     	;# 
  2490  0EA2                     	;# 
  2491  0EA3                     	;# 
  2492  0EA4                     	;# 
  2493  0EA5                     	;# 
  2494  0EA6                     	;# 
  2495  0EA7                     	;# 
  2496  0F0F                     	;# 
  2497  0F10                     	;# 
  2498  0F11                     	;# 
  2499  0F12                     	;# 
  2500  0F13                     	;# 
  2501  0F14                     	;# 
  2502  0F15                     	;# 
  2503  0F16                     	;# 
  2504  0F17                     	;# 
  2505  0F18                     	;# 
  2506  0F19                     	;# 
  2507  0F1A                     	;# 
  2508  0F1B                     	;# 
  2509  0F1C                     	;# 
  2510  0F1D                     	;# 
  2511  0F1E                     	;# 
  2512  0F1F                     	;# 
  2513  0F20                     	;# 
  2514  0F21                     	;# 
  2515  0F22                     	;# 
  2516  0F23                     	;# 
  2517  0F24                     	;# 
  2518  0F25                     	;# 
  2519  0F26                     	;# 
  2520  0F27                     	;# 
  2521  0F28                     	;# 
  2522  0F29                     	;# 
  2523  0F2A                     	;# 
  2524  0F2B                     	;# 
  2525  0F2C                     	;# 
  2526  0F2D                     	;# 
  2527  0F2E                     	;# 
  2528  0F2F                     	;# 
  2529  0F30                     	;# 
  2530  0F31                     	;# 
  2531  0F32                     	;# 
  2532  0F33                     	;# 
  2533  0F34                     	;# 
  2534  0F35                     	;# 
  2535  0F36                     	;# 
  2536  0F37                     	;# 
  2537  0FE4                     	;# 
  2538  0FE5                     	;# 
  2539  0FE6                     	;# 
  2540  0FE7                     	;# 
  2541  0FE8                     	;# 
  2542  0FE9                     	;# 
  2543  0FEA                     	;# 
  2544  0FEB                     	;# 
  2545  0FED                     	;# 
  2546  0FEE                     	;# 
  2547  0FEF                     	;# 
  2548  0000                     	;# 
  2549  0001                     	;# 
  2550  0002                     	;# 
  2551  0003                     	;# 
  2552  0004                     	;# 
  2553  0005                     	;# 
  2554  0006                     	;# 
  2555  0007                     	;# 
  2556  0008                     	;# 
  2557  0009                     	;# 
  2558  000A                     	;# 
  2559  000B                     	;# 
  2560  000C                     	;# 
  2561  000D                     	;# 
  2562  000E                     	;# 
  2563  0010                     	;# 
  2564  0011                     	;# 
  2565  0012                     	;# 
  2566  0013                     	;# 
  2567  0014                     	;# 
  2568  0015                     	;# 
  2569  0015                     	;# 
  2570  0016                     	;# 
  2571  0016                     	;# 
  2572  0017                     	;# 
  2573  0018                     	;# 
  2574  0019                     	;# 
  2575  0019                     	;# 
  2576  001A                     	;# 
  2577  001B                     	;# 
  2578  001C                     	;# 
  2579  001D                     	;# 
  2580  001E                     	;# 
  2581  001F                     	;# 
  2582  008C                     	;# 
  2583  008D                     	;# 
  2584  008E                     	;# 
  2585  0090                     	;# 
  2586  0091                     	;# 
  2587  0092                     	;# 
  2588  0093                     	;# 
  2589  0094                     	;# 
  2590  0097                     	;# 
  2591  009B                     	;# 
  2592  009B                     	;# 
  2593  009C                     	;# 
  2594  009D                     	;# 
  2595  009E                     	;# 
  2596  009F                     	;# 
  2597  010C                     	;# 
  2598  010D                     	;# 
  2599  010E                     	;# 
  2600  0111                     	;# 
  2601  0112                     	;# 
  2602  0113                     	;# 
  2603  0114                     	;# 
  2604  0115                     	;# 
  2605  0116                     	;# 
  2606  0117                     	;# 
  2607  0118                     	;# 
  2608  0119                     	;# 
  2609  018C                     	;# 
  2610  018D                     	;# 
  2611  018E                     	;# 
  2612  0197                     	;# 
  2613  0199                     	;# 
  2614  0199                     	;# 
  2615  0199                     	;# 
  2616  019A                     	;# 
  2617  019A                     	;# 
  2618  019A                     	;# 
  2619  019B                     	;# 
  2620  019B                     	;# 
  2621  019B                     	;# 
  2622  019B                     	;# 
  2623  019B                     	;# 
  2624  019C                     	;# 
  2625  019C                     	;# 
  2626  019C                     	;# 
  2627  019D                     	;# 
  2628  019D                     	;# 
  2629  019D                     	;# 
  2630  019E                     	;# 
  2631  019E                     	;# 
  2632  019E                     	;# 
  2633  019F                     	;# 
  2634  019F                     	;# 
  2635  019F                     	;# 
  2636  019F                     	;# 
  2637  019F                     	;# 
  2638  020C                     	;# 
  2639  020D                     	;# 
  2640  020E                     	;# 
  2641  0211                     	;# 
  2642  0211                     	;# 
  2643  0212                     	;# 
  2644  0212                     	;# 
  2645  0213                     	;# 
  2646  0213                     	;# 
  2647  0214                     	;# 
  2648  0214                     	;# 
  2649  0215                     	;# 
  2650  0215                     	;# 
  2651  0215                     	;# 
  2652  0215                     	;# 
  2653  0216                     	;# 
  2654  0216                     	;# 
  2655  0217                     	;# 
  2656  0217                     	;# 
  2657  0219                     	;# 
  2658  021A                     	;# 
  2659  021B                     	;# 
  2660  021C                     	;# 
  2661  021D                     	;# 
  2662  021D                     	;# 
  2663  021E                     	;# 
  2664  021F                     	;# 
  2665  028C                     	;# 
  2666  028D                     	;# 
  2667  028E                     	;# 
  2668  0291                     	;# 
  2669  0291                     	;# 
  2670  0292                     	;# 
  2671  0293                     	;# 
  2672  0294                     	;# 
  2673  0295                     	;# 
  2674  0295                     	;# 
  2675  0296                     	;# 
  2676  0297                     	;# 
  2677  0298                     	;# 
  2678  029F                     	;# 
  2679  030C                     	;# 
  2680  030D                     	;# 
  2681  030E                     	;# 
  2682  0311                     	;# 
  2683  0311                     	;# 
  2684  0312                     	;# 
  2685  0313                     	;# 
  2686  0314                     	;# 
  2687  0315                     	;# 
  2688  0315                     	;# 
  2689  0316                     	;# 
  2690  0317                     	;# 
  2691  0318                     	;# 
  2692  038C                     	;# 
  2693  038D                     	;# 
  2694  038E                     	;# 
  2695  0391                     	;# 
  2696  0392                     	;# 
  2697  0393                     	;# 
  2698  0394                     	;# 
  2699  0395                     	;# 
  2700  0396                     	;# 
  2701  0397                     	;# 
  2702  0398                     	;# 
  2703  0399                     	;# 
  2704  039A                     	;# 
  2705  039C                     	;# 
  2706  039D                     	;# 
  2707  039E                     	;# 
  2708  039F                     	;# 
  2709  0411                     	;# 
  2710  0411                     	;# 
  2711  0412                     	;# 
  2712  0413                     	;# 
  2713  0414                     	;# 
  2714  0415                     	;# 
  2715  0416                     	;# 
  2716  0417                     	;# 
  2717  0418                     	;# 
  2718  0418                     	;# 
  2719  0419                     	;# 
  2720  041A                     	;# 
  2721  041B                     	;# 
  2722  041C                     	;# 
  2723  041D                     	;# 
  2724  041E                     	;# 
  2725  041F                     	;# 
  2726  0498                     	;# 
  2727  0498                     	;# 
  2728  0499                     	;# 
  2729  049A                     	;# 
  2730  049B                     	;# 
  2731  049B                     	;# 
  2732  049C                     	;# 
  2733  049D                     	;# 
  2734  049E                     	;# 
  2735  049F                     	;# 
  2736  0617                     	;# 
  2737  0618                     	;# 
  2738  0619                     	;# 
  2739  0619                     	;# 
  2740  061A                     	;# 
  2741  061B                     	;# 
  2742  061C                     	;# 
  2743  061C                     	;# 
  2744  061F                     	;# 
  2745  0691                     	;# 
  2746  0692                     	;# 
  2747  0693                     	;# 
  2748  0694                     	;# 
  2749  0695                     	;# 
  2750  0696                     	;# 
  2751  0697                     	;# 
  2752  0698                     	;# 
  2753  0699                     	;# 
  2754  0711                     	;# 
  2755  0712                     	;# 
  2756  0713                     	;# 
  2757  0714                     	;# 
  2758  0715                     	;# 
  2759  0716                     	;# 
  2760  0717                     	;# 
  2761  0718                     	;# 
  2762  0719                     	;# 
  2763  0891                     	;# 
  2764  0891                     	;# 
  2765  0891                     	;# 
  2766  0891                     	;# 
  2767  0891                     	;# 
  2768  0891                     	;# 
  2769  0892                     	;# 
  2770  0892                     	;# 
  2771  0892                     	;# 
  2772  0893                     	;# 
  2773  0893                     	;# 
  2774  0893                     	;# 
  2775  0893                     	;# 
  2776  0893                     	;# 
  2777  0893                     	;# 
  2778  0894                     	;# 
  2779  0894                     	;# 
  2780  0894                     	;# 
  2781  0895                     	;# 
  2782  0895                     	;# 
  2783  0895                     	;# 
  2784  0896                     	;# 
  2785  0896                     	;# 
  2786  0896                     	;# 
  2787  089B                     	;# 
  2788  0911                     	;# 
  2789  0912                     	;# 
  2790  0913                     	;# 
  2791  0914                     	;# 
  2792  0915                     	;# 
  2793  0916                     	;# 
  2794  0918                     	;# 
  2795  0919                     	;# 
  2796  091A                     	;# 
  2797  091B                     	;# 
  2798  091C                     	;# 
  2799  091D                     	;# 
  2800  091E                     	;# 
  2801  091F                     	;# 
  2802  0E0F                     	;# 
  2803  0E10                     	;# 
  2804  0E11                     	;# 
  2805  0E12                     	;# 
  2806  0E13                     	;# 
  2807  0E14                     	;# 
  2808  0E15                     	;# 
  2809  0E16                     	;# 
  2810  0E17                     	;# 
  2811  0E18                     	;# 
  2812  0E19                     	;# 
  2813  0E1A                     	;# 
  2814  0E1B                     	;# 
  2815  0E1C                     	;# 
  2816  0E1D                     	;# 
  2817  0E1E                     	;# 
  2818  0E1F                     	;# 
  2819  0E20                     	;# 
  2820  0E21                     	;# 
  2821  0E22                     	;# 
  2822  0E24                     	;# 
  2823  0E25                     	;# 
  2824  0E28                     	;# 
  2825  0E29                     	;# 
  2826  0E2A                     	;# 
  2827  0E2B                     	;# 
  2828  0E2C                     	;# 
  2829  0E2D                     	;# 
  2830  0E2E                     	;# 
  2831  0E2F                     	;# 
  2832  0E90                     	;# 
  2833  0E91                     	;# 
  2834  0E92                     	;# 
  2835  0E94                     	;# 
  2836  0E95                     	;# 
  2837  0E9C                     	;# 
  2838  0E9D                     	;# 
  2839  0E9E                     	;# 
  2840  0E9F                     	;# 
  2841  0EA0                     	;# 
  2842  0EA1                     	;# 
  2843  0EA2                     	;# 
  2844  0EA3                     	;# 
  2845  0EA4                     	;# 
  2846  0EA5                     	;# 
  2847  0EA6                     	;# 
  2848  0EA7                     	;# 
  2849  0F0F                     	;# 
  2850  0F10                     	;# 
  2851  0F11                     	;# 
  2852  0F12                     	;# 
  2853  0F13                     	;# 
  2854  0F14                     	;# 
  2855  0F15                     	;# 
  2856  0F16                     	;# 
  2857  0F17                     	;# 
  2858  0F18                     	;# 
  2859  0F19                     	;# 
  2860  0F1A                     	;# 
  2861  0F1B                     	;# 
  2862  0F1C                     	;# 
  2863  0F1D                     	;# 
  2864  0F1E                     	;# 
  2865  0F1F                     	;# 
  2866  0F20                     	;# 
  2867  0F21                     	;# 
  2868  0F22                     	;# 
  2869  0F23                     	;# 
  2870  0F24                     	;# 
  2871  0F25                     	;# 
  2872  0F26                     	;# 
  2873  0F27                     	;# 
  2874  0F28                     	;# 
  2875  0F29                     	;# 
  2876  0F2A                     	;# 
  2877  0F2B                     	;# 
  2878  0F2C                     	;# 
  2879  0F2D                     	;# 
  2880  0F2E                     	;# 
  2881  0F2F                     	;# 
  2882  0F30                     	;# 
  2883  0F31                     	;# 
  2884  0F32                     	;# 
  2885  0F33                     	;# 
  2886  0F34                     	;# 
  2887  0F35                     	;# 
  2888  0F36                     	;# 
  2889  0F37                     	;# 
  2890  0FE4                     	;# 
  2891  0FE5                     	;# 
  2892  0FE6                     	;# 
  2893  0FE7                     	;# 
  2894  0FE8                     	;# 
  2895  0FE9                     	;# 
  2896  0FEA                     	;# 
  2897  0FEB                     	;# 
  2898  0FED                     	;# 
  2899  0FEE                     	;# 
  2900  0FEF                     	;# 
  2901  0000                     	;# 
  2902  0001                     	;# 
  2903  0002                     	;# 
  2904  0003                     	;# 
  2905  0004                     	;# 
  2906  0005                     	;# 
  2907  0006                     	;# 
  2908  0007                     	;# 
  2909  0008                     	;# 
  2910  0009                     	;# 
  2911  000A                     	;# 
  2912  000B                     	;# 
  2913  000C                     	;# 
  2914  000D                     	;# 
  2915  000E                     	;# 
  2916  0010                     	;# 
  2917  0011                     	;# 
  2918  0012                     	;# 
  2919  0013                     	;# 
  2920  0014                     	;# 
  2921  0015                     	;# 
  2922  0015                     	;# 
  2923  0016                     	;# 
  2924  0016                     	;# 
  2925  0017                     	;# 
  2926  0018                     	;# 
  2927  0019                     	;# 
  2928  0019                     	;# 
  2929  001A                     	;# 
  2930  001B                     	;# 
  2931  001C                     	;# 
  2932  001D                     	;# 
  2933  001E                     	;# 
  2934  001F                     	;# 
  2935  008C                     	;# 
  2936  008D                     	;# 
  2937  008E                     	;# 
  2938  0090                     	;# 
  2939  0091                     	;# 
  2940  0092                     	;# 
  2941  0093                     	;# 
  2942  0094                     	;# 
  2943  0097                     	;# 
  2944  009B                     	;# 
  2945  009B                     	;# 
  2946  009C                     	;# 
  2947  009D                     	;# 
  2948  009E                     	;# 
  2949  009F                     	;# 
  2950  010C                     	;# 
  2951  010D                     	;# 
  2952  010E                     	;# 
  2953  0111                     	;# 
  2954  0112                     	;# 
  2955  0113                     	;# 
  2956  0114                     	;# 
  2957  0115                     	;# 
  2958  0116                     	;# 
  2959  0117                     	;# 
  2960  0118                     	;# 
  2961  0119                     	;# 
  2962  018C                     	;# 
  2963  018D                     	;# 
  2964  018E                     	;# 
  2965  0197                     	;# 
  2966  0199                     	;# 
  2967  0199                     	;# 
  2968  0199                     	;# 
  2969  019A                     	;# 
  2970  019A                     	;# 
  2971  019A                     	;# 
  2972  019B                     	;# 
  2973  019B                     	;# 
  2974  019B                     	;# 
  2975  019B                     	;# 
  2976  019B                     	;# 
  2977  019C                     	;# 
  2978  019C                     	;# 
  2979  019C                     	;# 
  2980  019D                     	;# 
  2981  019D                     	;# 
  2982  019D                     	;# 
  2983  019E                     	;# 
  2984  019E                     	;# 
  2985  019E                     	;# 
  2986  019F                     	;# 
  2987  019F                     	;# 
  2988  019F                     	;# 
  2989  019F                     	;# 
  2990  019F                     	;# 
  2991  020C                     	;# 
  2992  020D                     	;# 
  2993  020E                     	;# 
  2994  0211                     	;# 
  2995  0211                     	;# 
  2996  0212                     	;# 
  2997  0212                     	;# 
  2998  0213                     	;# 
  2999  0213                     	;# 
  3000  0214                     	;# 
  3001  0214                     	;# 
  3002  0215                     	;# 
  3003  0215                     	;# 
  3004  0215                     	;# 
  3005  0215                     	;# 
  3006  0216                     	;# 
  3007  0216                     	;# 
  3008  0217                     	;# 
  3009  0217                     	;# 
  3010  0219                     	;# 
  3011  021A                     	;# 
  3012  021B                     	;# 
  3013  021C                     	;# 
  3014  021D                     	;# 
  3015  021D                     	;# 
  3016  021E                     	;# 
  3017  021F                     	;# 
  3018  028C                     	;# 
  3019  028D                     	;# 
  3020  028E                     	;# 
  3021  0291                     	;# 
  3022  0291                     	;# 
  3023  0292                     	;# 
  3024  0293                     	;# 
  3025  0294                     	;# 
  3026  0295                     	;# 
  3027  0295                     	;# 
  3028  0296                     	;# 
  3029  0297                     	;# 
  3030  0298                     	;# 
  3031  029F                     	;# 
  3032  030C                     	;# 
  3033  030D                     	;# 
  3034  030E                     	;# 
  3035  0311                     	;# 
  3036  0311                     	;# 
  3037  0312                     	;# 
  3038  0313                     	;# 
  3039  0314                     	;# 
  3040  0315                     	;# 
  3041  0315                     	;# 
  3042  0316                     	;# 
  3043  0317                     	;# 
  3044  0318                     	;# 
  3045  038C                     	;# 
  3046  038D                     	;# 
  3047  038E                     	;# 
  3048  0391                     	;# 
  3049  0392                     	;# 
  3050  0393                     	;# 
  3051  0394                     	;# 
  3052  0395                     	;# 
  3053  0396                     	;# 
  3054  0397                     	;# 
  3055  0398                     	;# 
  3056  0399                     	;# 
  3057  039A                     	;# 
  3058  039C                     	;# 
  3059  039D                     	;# 
  3060  039E                     	;# 
  3061  039F                     	;# 
  3062  0411                     	;# 
  3063  0411                     	;# 
  3064  0412                     	;# 
  3065  0413                     	;# 
  3066  0414                     	;# 
  3067  0415                     	;# 
  3068  0416                     	;# 
  3069  0417                     	;# 
  3070  0418                     	;# 
  3071  0418                     	;# 
  3072  0419                     	;# 
  3073  041A                     	;# 
  3074  041B                     	;# 
  3075  041C                     	;# 
  3076  041D                     	;# 
  3077  041E                     	;# 
  3078  041F                     	;# 
  3079  0498                     	;# 
  3080  0498                     	;# 
  3081  0499                     	;# 
  3082  049A                     	;# 
  3083  049B                     	;# 
  3084  049B                     	;# 
  3085  049C                     	;# 
  3086  049D                     	;# 
  3087  049E                     	;# 
  3088  049F                     	;# 
  3089  0617                     	;# 
  3090  0618                     	;# 
  3091  0619                     	;# 
  3092  0619                     	;# 
  3093  061A                     	;# 
  3094  061B                     	;# 
  3095  061C                     	;# 
  3096  061C                     	;# 
  3097  061F                     	;# 
  3098  0691                     	;# 
  3099  0692                     	;# 
  3100  0693                     	;# 
  3101  0694                     	;# 
  3102  0695                     	;# 
  3103  0696                     	;# 
  3104  0697                     	;# 
  3105  0698                     	;# 
  3106  0699                     	;# 
  3107  0711                     	;# 
  3108  0712                     	;# 
  3109  0713                     	;# 
  3110  0714                     	;# 
  3111  0715                     	;# 
  3112  0716                     	;# 
  3113  0717                     	;# 
  3114  0718                     	;# 
  3115  0719                     	;# 
  3116  0891                     	;# 
  3117  0891                     	;# 
  3118  0891                     	;# 
  3119  0891                     	;# 
  3120  0891                     	;# 
  3121  0891                     	;# 
  3122  0892                     	;# 
  3123  0892                     	;# 
  3124  0892                     	;# 
  3125  0893                     	;# 
  3126  0893                     	;# 
  3127  0893                     	;# 
  3128  0893                     	;# 
  3129  0893                     	;# 
  3130  0893                     	;# 
  3131  0894                     	;# 
  3132  0894                     	;# 
  3133  0894                     	;# 
  3134  0895                     	;# 
  3135  0895                     	;# 
  3136  0895                     	;# 
  3137  0896                     	;# 
  3138  0896                     	;# 
  3139  0896                     	;# 
  3140  089B                     	;# 
  3141  0911                     	;# 
  3142  0912                     	;# 
  3143  0913                     	;# 
  3144  0914                     	;# 
  3145  0915                     	;# 
  3146  0916                     	;# 
  3147  0918                     	;# 
  3148  0919                     	;# 
  3149  091A                     	;# 
  3150  091B                     	;# 
  3151  091C                     	;# 
  3152  091D                     	;# 
  3153  091E                     	;# 
  3154  091F                     	;# 
  3155  0E0F                     	;# 
  3156  0E10                     	;# 
  3157  0E11                     	;# 
  3158  0E12                     	;# 
  3159  0E13                     	;# 
  3160  0E14                     	;# 
  3161  0E15                     	;# 
  3162  0E16                     	;# 
  3163  0E17                     	;# 
  3164  0E18                     	;# 
  3165  0E19                     	;# 
  3166  0E1A                     	;# 
  3167  0E1B                     	;# 
  3168  0E1C                     	;# 
  3169  0E1D                     	;# 
  3170  0E1E                     	;# 
  3171  0E1F                     	;# 
  3172  0E20                     	;# 
  3173  0E21                     	;# 
  3174  0E22                     	;# 
  3175  0E24                     	;# 
  3176  0E25                     	;# 
  3177  0E28                     	;# 
  3178  0E29                     	;# 
  3179  0E2A                     	;# 
  3180  0E2B                     	;# 
  3181  0E2C                     	;# 
  3182  0E2D                     	;# 
  3183  0E2E                     	;# 
  3184  0E2F                     	;# 
  3185  0E90                     	;# 
  3186  0E91                     	;# 
  3187  0E92                     	;# 
  3188  0E94                     	;# 
  3189  0E95                     	;# 
  3190  0E9C                     	;# 
  3191  0E9D                     	;# 
  3192  0E9E                     	;# 
  3193  0E9F                     	;# 
  3194  0EA0                     	;# 
  3195  0EA1                     	;# 
  3196  0EA2                     	;# 
  3197  0EA3                     	;# 
  3198  0EA4                     	;# 
  3199  0EA5                     	;# 
  3200  0EA6                     	;# 
  3201  0EA7                     	;# 
  3202  0F0F                     	;# 
  3203  0F10                     	;# 
  3204  0F11                     	;# 
  3205  0F12                     	;# 
  3206  0F13                     	;# 
  3207  0F14                     	;# 
  3208  0F15                     	;# 
  3209  0F16                     	;# 
  3210  0F17                     	;# 
  3211  0F18                     	;# 
  3212  0F19                     	;# 
  3213  0F1A                     	;# 
  3214  0F1B                     	;# 
  3215  0F1C                     	;# 
  3216  0F1D                     	;# 
  3217  0F1E                     	;# 
  3218  0F1F                     	;# 
  3219  0F20                     	;# 
  3220  0F21                     	;# 
  3221  0F22                     	;# 
  3222  0F23                     	;# 
  3223  0F24                     	;# 
  3224  0F25                     	;# 
  3225  0F26                     	;# 
  3226  0F27                     	;# 
  3227  0F28                     	;# 
  3228  0F29                     	;# 
  3229  0F2A                     	;# 
  3230  0F2B                     	;# 
  3231  0F2C                     	;# 
  3232  0F2D                     	;# 
  3233  0F2E                     	;# 
  3234  0F2F                     	;# 
  3235  0F30                     	;# 
  3236  0F31                     	;# 
  3237  0F32                     	;# 
  3238  0F33                     	;# 
  3239  0F34                     	;# 
  3240  0F35                     	;# 
  3241  0F36                     	;# 
  3242  0F37                     	;# 
  3243  0FE4                     	;# 
  3244  0FE5                     	;# 
  3245  0FE6                     	;# 
  3246  0FE7                     	;# 
  3247  0FE8                     	;# 
  3248  0FE9                     	;# 
  3249  0FEA                     	;# 
  3250  0FEB                     	;# 
  3251  0FED                     	;# 
  3252  0FEE                     	;# 
  3253  0FEF                     	;# 
  3254  0000                     	;# 
  3255  0001                     	;# 
  3256  0002                     	;# 
  3257  0003                     	;# 
  3258  0004                     	;# 
  3259  0005                     	;# 
  3260  0006                     	;# 
  3261  0007                     	;# 
  3262  0008                     	;# 
  3263  0009                     	;# 
  3264  000A                     	;# 
  3265  000B                     	;# 
  3266  000C                     	;# 
  3267  000D                     	;# 
  3268  000E                     	;# 
  3269  0010                     	;# 
  3270  0011                     	;# 
  3271  0012                     	;# 
  3272  0013                     	;# 
  3273  0014                     	;# 
  3274  0015                     	;# 
  3275  0015                     	;# 
  3276  0016                     	;# 
  3277  0016                     	;# 
  3278  0017                     	;# 
  3279  0018                     	;# 
  3280  0019                     	;# 
  3281  0019                     	;# 
  3282  001A                     	;# 
  3283  001B                     	;# 
  3284  001C                     	;# 
  3285  001D                     	;# 
  3286  001E                     	;# 
  3287  001F                     	;# 
  3288  008C                     	;# 
  3289  008D                     	;# 
  3290  008E                     	;# 
  3291  0090                     	;# 
  3292  0091                     	;# 
  3293  0092                     	;# 
  3294  0093                     	;# 
  3295  0094                     	;# 
  3296  0097                     	;# 
  3297  009B                     	;# 
  3298  009B                     	;# 
  3299  009C                     	;# 
  3300  009D                     	;# 
  3301  009E                     	;# 
  3302  009F                     	;# 
  3303  010C                     	;# 
  3304  010D                     	;# 
  3305  010E                     	;# 
  3306  0111                     	;# 
  3307  0112                     	;# 
  3308  0113                     	;# 
  3309  0114                     	;# 
  3310  0115                     	;# 
  3311  0116                     	;# 
  3312  0117                     	;# 
  3313  0118                     	;# 
  3314  0119                     	;# 
  3315  018C                     	;# 
  3316  018D                     	;# 
  3317  018E                     	;# 
  3318  0197                     	;# 
  3319  0199                     	;# 
  3320  0199                     	;# 
  3321  0199                     	;# 
  3322  019A                     	;# 
  3323  019A                     	;# 
  3324  019A                     	;# 
  3325  019B                     	;# 
  3326  019B                     	;# 
  3327  019B                     	;# 
  3328  019B                     	;# 
  3329  019B                     	;# 
  3330  019C                     	;# 
  3331  019C                     	;# 
  3332  019C                     	;# 
  3333  019D                     	;# 
  3334  019D                     	;# 
  3335  019D                     	;# 
  3336  019E                     	;# 
  3337  019E                     	;# 
  3338  019E                     	;# 
  3339  019F                     	;# 
  3340  019F                     	;# 
  3341  019F                     	;# 
  3342  019F                     	;# 
  3343  019F                     	;# 
  3344  020C                     	;# 
  3345  020D                     	;# 
  3346  020E                     	;# 
  3347  0211                     	;# 
  3348  0211                     	;# 
  3349  0212                     	;# 
  3350  0212                     	;# 
  3351  0213                     	;# 
  3352  0213                     	;# 
  3353  0214                     	;# 
  3354  0214                     	;# 
  3355  0215                     	;# 
  3356  0215                     	;# 
  3357  0215                     	;# 
  3358  0215                     	;# 
  3359  0216                     	;# 
  3360  0216                     	;# 
  3361  0217                     	;# 
  3362  0217                     	;# 
  3363  0219                     	;# 
  3364  021A                     	;# 
  3365  021B                     	;# 
  3366  021C                     	;# 
  3367  021D                     	;# 
  3368  021D                     	;# 
  3369  021E                     	;# 
  3370  021F                     	;# 
  3371  028C                     	;# 
  3372  028D                     	;# 
  3373  028E                     	;# 
  3374  0291                     	;# 
  3375  0291                     	;# 
  3376  0292                     	;# 
  3377  0293                     	;# 
  3378  0294                     	;# 
  3379  0295                     	;# 
  3380  0295                     	;# 
  3381  0296                     	;# 
  3382  0297                     	;# 
  3383  0298                     	;# 
  3384  029F                     	;# 
  3385  030C                     	;# 
  3386  030D                     	;# 
  3387  030E                     	;# 
  3388  0311                     	;# 
  3389  0311                     	;# 
  3390  0312                     	;# 
  3391  0313                     	;# 
  3392  0314                     	;# 
  3393  0315                     	;# 
  3394  0315                     	;# 
  3395  0316                     	;# 
  3396  0317                     	;# 
  3397  0318                     	;# 
  3398  038C                     	;# 
  3399  038D                     	;# 
  3400  038E                     	;# 
  3401  0391                     	;# 
  3402  0392                     	;# 
  3403  0393                     	;# 
  3404  0394                     	;# 
  3405  0395                     	;# 
  3406  0396                     	;# 
  3407  0397                     	;# 
  3408  0398                     	;# 
  3409  0399                     	;# 
  3410  039A                     	;# 
  3411  039C                     	;# 
  3412  039D                     	;# 
  3413  039E                     	;# 
  3414  039F                     	;# 
  3415  0411                     	;# 
  3416  0411                     	;# 
  3417  0412                     	;# 
  3418  0413                     	;# 
  3419  0414                     	;# 
  3420  0415                     	;# 
  3421  0416                     	;# 
  3422  0417                     	;# 
  3423  0418                     	;# 
  3424  0418                     	;# 
  3425  0419                     	;# 
  3426  041A                     	;# 
  3427  041B                     	;# 
  3428  041C                     	;# 
  3429  041D                     	;# 
  3430  041E                     	;# 
  3431  041F                     	;# 
  3432  0498                     	;# 
  3433  0498                     	;# 
  3434  0499                     	;# 
  3435  049A                     	;# 
  3436  049B                     	;# 
  3437  049B                     	;# 
  3438  049C                     	;# 
  3439  049D                     	;# 
  3440  049E                     	;# 
  3441  049F                     	;# 
  3442  0617                     	;# 
  3443  0618                     	;# 
  3444  0619                     	;# 
  3445  0619                     	;# 
  3446  061A                     	;# 
  3447  061B                     	;# 
  3448  061C                     	;# 
  3449  061C                     	;# 
  3450  061F                     	;# 
  3451  0691                     	;# 
  3452  0692                     	;# 
  3453  0693                     	;# 
  3454  0694                     	;# 
  3455  0695                     	;# 
  3456  0696                     	;# 
  3457  0697                     	;# 
  3458  0698                     	;# 
  3459  0699                     	;# 
  3460  0711                     	;# 
  3461  0712                     	;# 
  3462  0713                     	;# 
  3463  0714                     	;# 
  3464  0715                     	;# 
  3465  0716                     	;# 
  3466  0717                     	;# 
  3467  0718                     	;# 
  3468  0719                     	;# 
  3469  0891                     	;# 
  3470  0891                     	;# 
  3471  0891                     	;# 
  3472  0891                     	;# 
  3473  0891                     	;# 
  3474  0891                     	;# 
  3475  0892                     	;# 
  3476  0892                     	;# 
  3477  0892                     	;# 
  3478  0893                     	;# 
  3479  0893                     	;# 
  3480  0893                     	;# 
  3481  0893                     	;# 
  3482  0893                     	;# 
  3483  0893                     	;# 
  3484  0894                     	;# 
  3485  0894                     	;# 
  3486  0894                     	;# 
  3487  0895                     	;# 
  3488  0895                     	;# 
  3489  0895                     	;# 
  3490  0896                     	;# 
  3491  0896                     	;# 
  3492  0896                     	;# 
  3493  089B                     	;# 
  3494  0911                     	;# 
  3495  0912                     	;# 
  3496  0913                     	;# 
  3497  0914                     	;# 
  3498  0915                     	;# 
  3499  0916                     	;# 
  3500  0918                     	;# 
  3501  0919                     	;# 
  3502  091A                     	;# 
  3503  091B                     	;# 
  3504  091C                     	;# 
  3505  091D                     	;# 
  3506  091E                     	;# 
  3507  091F                     	;# 
  3508  0E0F                     	;# 
  3509  0E10                     	;# 
  3510  0E11                     	;# 
  3511  0E12                     	;# 
  3512  0E13                     	;# 
  3513  0E14                     	;# 
  3514  0E15                     	;# 
  3515  0E16                     	;# 
  3516  0E17                     	;# 
  3517  0E18                     	;# 
  3518  0E19                     	;# 
  3519  0E1A                     	;# 
  3520  0E1B                     	;# 
  3521  0E1C                     	;# 
  3522  0E1D                     	;# 
  3523  0E1E                     	;# 
  3524  0E1F                     	;# 
  3525  0E20                     	;# 
  3526  0E21                     	;# 
  3527  0E22                     	;# 
  3528  0E24                     	;# 
  3529  0E25                     	;# 
  3530  0E28                     	;# 
  3531  0E29                     	;# 
  3532  0E2A                     	;# 
  3533  0E2B                     	;# 
  3534  0E2C                     	;# 
  3535  0E2D                     	;# 
  3536  0E2E                     	;# 
  3537  0E2F                     	;# 
  3538  0E90                     	;# 
  3539  0E91                     	;# 
  3540  0E92                     	;# 
  3541  0E94                     	;# 
  3542  0E95                     	;# 
  3543  0E9C                     	;# 
  3544  0E9D                     	;# 
  3545  0E9E                     	;# 
  3546  0E9F                     	;# 
  3547  0EA0                     	;# 
  3548  0EA1                     	;# 
  3549  0EA2                     	;# 
  3550  0EA3                     	;# 
  3551  0EA4                     	;# 
  3552  0EA5                     	;# 
  3553  0EA6                     	;# 
  3554  0EA7                     	;# 
  3555  0F0F                     	;# 
  3556  0F10                     	;# 
  3557  0F11                     	;# 
  3558  0F12                     	;# 
  3559  0F13                     	;# 
  3560  0F14                     	;# 
  3561  0F15                     	;# 
  3562  0F16                     	;# 
  3563  0F17                     	;# 
  3564  0F18                     	;# 
  3565  0F19                     	;# 
  3566  0F1A                     	;# 
  3567  0F1B                     	;# 
  3568  0F1C                     	;# 
  3569  0F1D                     	;# 
  3570  0F1E                     	;# 
  3571  0F1F                     	;# 
  3572  0F20                     	;# 
  3573  0F21                     	;# 
  3574  0F22                     	;# 
  3575  0F23                     	;# 
  3576  0F24                     	;# 
  3577  0F25                     	;# 
  3578  0F26                     	;# 
  3579  0F27                     	;# 
  3580  0F28                     	;# 
  3581  0F29                     	;# 
  3582  0F2A                     	;# 
  3583  0F2B                     	;# 
  3584  0F2C                     	;# 
  3585  0F2D                     	;# 
  3586  0F2E                     	;# 
  3587  0F2F                     	;# 
  3588  0F30                     	;# 
  3589  0F31                     	;# 
  3590  0F32                     	;# 
  3591  0F33                     	;# 
  3592  0F34                     	;# 
  3593  0F35                     	;# 
  3594  0F36                     	;# 
  3595  0F37                     	;# 
  3596  0FE4                     	;# 
  3597  0FE5                     	;# 
  3598  0FE6                     	;# 
  3599  0FE7                     	;# 
  3600  0FE8                     	;# 
  3601  0FE9                     	;# 
  3602  0FEA                     	;# 
  3603  0FEB                     	;# 
  3604  0FED                     	;# 
  3605  0FEE                     	;# 
  3606  0FEF                     	;# 
  3607                           
  3608                           	psect	idataBANK1
  3609  1C8D                     __pidataBANK1:	
  3610                           
  3611                           ;initializer for BLE_SendCMD@F7932
  3612  1C8D  3441               	retlw	65
  3613  1C8E  3454               	retlw	84
  3614  1C8F  342B               	retlw	43
  3615  1C90  344F               	retlw	79
  3616  1C91  344B               	retlw	75
  3617  1C92  340D               	retlw	13
  3618  1C93  340A               	retlw	10
  3619                           
  3620                           	psect	idataBANK2
  3621  0820                     __pidataBANK2:	
  3622                           
  3623                           ;initializer for checkDevID@F7939
  3624  0820  3433               	retlw	51
  3625  0821  3430               	retlw	48
  3626  0822  3433               	retlw	51
  3627  0823  3431               	retlw	49
  3628  0824  3433               	retlw	51
  3629  0825  3434               	retlw	52
  3630  0826  3433               	retlw	51
  3631  0827  3439               	retlw	57
  3632  0828  3433               	retlw	51
  3633  0829  3430               	retlw	48
  3634  082A  3433               	retlw	51
  3635  082B  3431               	retlw	49
  3636  082C  3433               	retlw	51
  3637  082D  3430               	retlw	48
  3638  082E  3433               	retlw	51
  3639  082F  3432               	retlw	50
  3640  0830  3400               	retlw	0
  3641                           
  3642                           ;initializer for _MONTH_DAY
  3643  0831  341F               	retlw	31
  3644  0832  341C               	retlw	28
  3645  0833  341F               	retlw	31
  3646  0834  341E               	retlw	30
  3647  0835  341F               	retlw	31
  3648  0836  341E               	retlw	30
  3649  0837  341F               	retlw	31
  3650  0838  341F               	retlw	31
  3651  0839  341E               	retlw	30
  3652  083A  341F               	retlw	31
  3653  083B  341E               	retlw	30
  3654  083C  341F               	retlw	31
  3655  001F                     _T2CONbits	set	31
  3656  001D                     _TMR2	set	29
  3657  001E                     _PR2	set	30
  3658  001F                     _T2CON	set	31
  3659  0017                     _T0CON0bits	set	23
  3660  0015                     _TMR0L	set	21
  3661  0016                     _TMR0H	set	22
  3662  0018                     _T0CON1	set	24
  3663  0017                     _T0CON0	set	23
  3664  0010                     _PIR0bits	set	16
  3665  0011                     _PIR1bits	set	17
  3666  000B                     _INTCONbits	set	11
  3667  005F                     _GIE	set	95
  3668  008C                     _TXIF	set	140
  3669  0062                     _RA2	set	98
  3670  008E                     _TRISC	set	142
  3671  008D                     _TRISB	set	141
  3672  008C                     _TRISA	set	140
  3673  0090                     _PIE0bits	set	144
  3674  0091                     _PIE1bits	set	145
  3675  010E                     _LATC	set	270
  3676  010D                     _LATB	set	269
  3677  010C                     _LATA	set	268
  3678  086D                     _LATB5	set	2157
  3679  0871                     _LATC1	set	2161
  3680  018C                     _ANSELA	set	396
  3681  018D                     _ANSELB	set	397
  3682  018E                     _ANSELC	set	398
  3683  019A                     _TXREG	set	410
  3684  0199                     _RCREG	set	409
  3685  019D                     _RC1STAbits	set	413
  3686  019C                     _SP1BRGH	set	412
  3687  019B                     _SP1BRGL	set	411
  3688  019E                     _TX1STA	set	414
  3689  019D                     _RC1STA	set	413
  3690  019F                     _BAUD1CON	set	415
  3691  0CF1                     _TRMT	set	3313
  3692  020E                     _WPUC	set	526
  3693  020C                     _WPUA	set	524
  3694  020D                     _WPUB	set	525
  3695  028E                     _ODCONC	set	654
  3696  028D                     _ODCONB	set	653
  3697  028C                     _ODCONA	set	652
  3698  0297                     _CCP2CONbits	set	663
  3699  0295                     _CCPR2L	set	661
  3700  0296                     _CCPR2H	set	662
  3701  0297                     _CCP2CON	set	663
  3702  0293                     _CCP1CONbits	set	659
  3703  029F                     _CCPTMRSbits	set	671
  3704  0291                     _CCPR1L	set	657
  3705  0292                     _CCPR1H	set	658
  3706  0293                     _CCP1CON	set	659
  3707  0317                     _CCP4CONbits	set	791
  3708  0315                     _CCPR4L	set	789
  3709  0316                     _CCPR4H	set	790
  3710  0317                     _CCP4CON	set	791
  3711  0313                     _CCP3CONbits	set	787
  3712  0311                     _CCPR3L	set	785
  3713  0312                     _CCPR3H	set	786
  3714  0313                     _CCP3CON	set	787
  3715  0891                     _NVMADR	set	2193
  3716  0893                     _NVMDATL	set	2195
  3717  0891                     _NVMADRL	set	2193
  3718  0892                     _NVMADRH	set	2194
  3719  0895                     _NVMCON1bits	set	2197
  3720  0896                     _NVMCON2	set	2198
  3721  0895                     _NVMCON1	set	2197
  3722  091E                     _OSCTUNE	set	2334
  3723  091F                     _OSCFRQ	set	2335
  3724  091D                     _OSCEN	set	2333
  3725  091B                     _OSCCON3	set	2331
  3726  0919                     _OSCCON1	set	2329
  3727  0E24                     _RXPPSbits	set	3620
  3728  0E0F                     _PPSLOCKbits	set	3599
  3729  0E0F                     _PPSLOCK	set	3599
  3730  0EA5                     _RC5PPSbits	set	3749
  3731  0EA6                     _RC6PPSbits	set	3750
  3732  0EA3                     _RC3PPSbits	set	3747
  3733  0EA4                     _RC4PPSbits	set	3748
  3734  0E9C                     _RB4PPSbits	set	3740
  3735                           
  3736                           	psect	stringtext
  3737  1800                     __pstringtext:	
  3738  1800                     STR_2:	
  3739  1800  3441               	retlw	65	;'A'
  3740  1801  3454               	retlw	84	;'T'
  3741  1802  342B               	retlw	43	;'+'
  3742  1803  3441               	retlw	65	;'A'
  3743  1804  3444               	retlw	68	;'D'
  3744  1805  3456               	retlw	86	;'V'
  3745  1806  345F               	retlw	95	;'_'
  3746  1807  344D               	retlw	77	;'M'
  3747  1808  3446               	retlw	70	;'F'
  3748  1809  3452               	retlw	82	;'R'
  3749  180A  345F               	retlw	95	;'_'
  3750  180B  3453               	retlw	83	;'S'
  3751  180C  3450               	retlw	80	;'P'
  3752  180D  3443               	retlw	67	;'C'
  3753  180E  343D               	retlw	61	;'='
  3754  180F  3433               	retlw	51	;'3'
  3755  1810  3430               	retlw	48	;'0'
  3756  1811  3433               	retlw	51	;'3'
  3757  1812  3431               	retlw	49	;'1'
  3758  1813  3433               	retlw	51	;'3'
  3759  1814  3434               	retlw	52	;'4'
  3760  1815  3433               	retlw	51	;'3'
  3761  1816  3439               	retlw	57	;'9'
  3762  1817  3433               	retlw	51	;'3'
  3763  1818  3430               	retlw	48	;'0'
  3764  1819  3433               	retlw	51	;'3'
  3765  181A  3431               	retlw	49	;'1'
  3766  181B  3433               	retlw	51	;'3'
  3767  181C  3430               	retlw	48	;'0'
  3768  181D  3433               	retlw	51	;'3'
  3769  181E  3432               	retlw	50	;'2'
  3770  181F  340D               	retlw	13
  3771  1820  340A               	retlw	10
  3772  1821  3400               	retlw	0
  3773  1822                     STR_1:	
  3774  1822  3441               	retlw	65	;'A'
  3775  1823  3454               	retlw	84	;'T'
  3776  1824  342B               	retlw	43	;'+'
  3777  1825  3441               	retlw	65	;'A'
  3778  1826  3444               	retlw	68	;'D'
  3779  1827  3456               	retlw	86	;'V'
  3780  1828  345F               	retlw	95	;'_'
  3781  1829  344D               	retlw	77	;'M'
  3782  182A  3446               	retlw	70	;'F'
  3783  182B  3452               	retlw	82	;'R'
  3784  182C  345F               	retlw	95	;'_'
  3785  182D  3453               	retlw	83	;'S'
  3786  182E  3450               	retlw	80	;'P'
  3787  182F  3443               	retlw	67	;'C'
  3788  1830  343D               	retlw	61	;'='
  3789  1831  343F               	retlw	63	;'?'
  3790  1832  340D               	retlw	13
  3791  1833  340A               	retlw	10
  3792  1834  3400               	retlw	0
  3793  1835                     STR_4:	
  3794  1835  3441               	retlw	65	;'A'
  3795  1836  3454               	retlw	84	;'T'
  3796  1837  342B               	retlw	43	;'+'
  3797  1838  344D               	retlw	77	;'M'
  3798  1839  344F               	retlw	79	;'O'
  3799  183A  3444               	retlw	68	;'D'
  3800  183B  3445               	retlw	69	;'E'
  3801  183C  343D               	retlw	61	;'='
  3802  183D  3444               	retlw	68	;'D'
  3803  183E  3441               	retlw	65	;'A'
  3804  183F  3454               	retlw	84	;'T'
  3805  1840  3441               	retlw	65	;'A'
  3806  1841  340D               	retlw	13
  3807  1842  340A               	retlw	10
  3808  1843  3400               	retlw	0
  3809  1844                     STR_3:	
  3810  1844  3441               	retlw	65	;'A'
  3811  1845  3454               	retlw	84	;'T'
  3812  1846  342B               	retlw	43	;'+'
  3813  1847  3453               	retlw	83	;'S'
  3814  1848  3445               	retlw	69	;'E'
  3815  1849  3454               	retlw	84	;'T'
  3816  184A  343D               	retlw	61	;'='
  3817  184B  3431               	retlw	49	;'1'
  3818  184C  340D               	retlw	13
  3819  184D  340A               	retlw	10
  3820  184E  3400               	retlw	0
  3821                           
  3822                           	psect	cinit
  3823  0C0D                     start_initialization:	
  3824                           ; #config settings
  3825                           
  3826  0C0D                     __initialization:	
  3827                           
  3828                           ; Initialize objects allocated to BANK1
  3829  0C0D  308D               	movlw	low __pidataBANK1
  3830  0C0E  0084               	movwf	4
  3831  0C0F  309C               	movlw	(high __pidataBANK1)| (0+128)
  3832  0C10  0085               	movwf	5
  3833  0C11  30E1               	movlw	low __pdataBANK1
  3834  0C12  0086               	movwf	6
  3835  0C13  3000               	movlw	high __pdataBANK1
  3836  0C14  0087               	movwf	7
  3837  0C15  3007               	movlw	7
  3838  0C16  319C  2487  318C   	fcall	init_ram
  3839                           
  3840                           ; Initialize objects allocated to BANK2
  3841  0C19  3020               	movlw	low __pidataBANK2
  3842  0C1A  0084               	movwf	4
  3843  0C1B  3088               	movlw	(high __pidataBANK2)| (0+128)
  3844  0C1C  0085               	movwf	5
  3845  0C1D  3052               	movlw	low __pdataBANK2
  3846  0C1E  0086               	movwf	6
  3847  0C1F  3001               	movlw	high __pdataBANK2
  3848  0C20  0087               	movwf	7
  3849  0C21  301D               	movlw	29
  3850  0C22  319C  2487  318C   	fcall	init_ram
  3851                           
  3852                           ; Clear objects allocated to BANK0
  3853  0C25  3040               	movlw	low __pbssBANK0
  3854  0C26  0084               	movwf	4
  3855  0C27  3000               	movlw	high __pbssBANK0
  3856  0C28  0085               	movwf	5
  3857  0C29  301E               	movlw	30
  3858  0C2A  319C  2481  318C   	fcall	clear_ram0
  3859                           
  3860                           ; Clear objects allocated to BANK1
  3861  0C2D  0021               	movlb	1	; select bank1
  3862  0C2E  30A0               	movlw	low __pbssBANK3
  3863  0C2F  01E8               	clrf	__pbssBANK1& (0+127)
  3864                           
  3865                           ; Clear objects allocated to BANK3
  3866  0C30  0084               	movwf	4
  3867  0C31  3001               	movlw	high __pbssBANK3
  3868  0C32  0085               	movwf	5
  3869  0C33  3022               	movlw	34
  3870  0C34  319C  2481  318C   	fcall	clear_ram0
  3871                           
  3872                           ; Clear objects allocated to BANK4
  3873  0C37  3020               	movlw	low __pbssBANK4
  3874  0C38  0084               	movwf	4
  3875  0C39  3002               	movlw	high __pbssBANK4
  3876  0C3A  0085               	movwf	5
  3877  0C3B  3031               	movlw	49
  3878  0C3C  319C  2481  318C   	fcall	clear_ram0
  3879                           
  3880                           ; Clear objects allocated to BANK5
  3881  0C3F  30A0               	movlw	low __pbssBANK5
  3882  0C40  0084               	movwf	4
  3883  0C41  3002               	movlw	high __pbssBANK5
  3884  0C42  0085               	movwf	5
  3885  0C43  3030               	movlw	48
  3886  0C44  319C  2481  318C   	fcall	clear_ram0
  3887                           
  3888                           ; Clear objects allocated to BANK6
  3889  0C47  3020               	movlw	low __pbssBANK6
  3890  0C48  0084               	movwf	4
  3891  0C49  3003               	movlw	high __pbssBANK6
  3892  0C4A  0085               	movwf	5
  3893  0C4B  3030               	movlw	48
  3894  0C4C  319C  2481  318C   	fcall	clear_ram0
  3895  0C4F                     end_of_initialization:	
  3896                           ;End of C runtime variable initialization code
  3897                           
  3898  0C4F                     __end_of__initialization:	
  3899  0C4F  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  3900  0C50  0020               	movlb	0
  3901  0C51  2C52               	ljmp	_main	;jump to C main() function
  3902  0C52                     __pmaintext:	
  3903 ;;
  3904 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3905 ;;
  3906 ;; *************** function _main *****************
  3907 ;; Defined at:
  3908 ;;		line 19 in file "src/main.c"
  3909 ;; Parameters:    Size  Location     Type
  3910 ;;		None
  3911 ;; Auto vars:     Size  Location     Type
  3912 ;;		None
  3913 ;; Return value:  Size  Location     Type
  3914 ;;                  1    wreg      void 
  3915 ;; Registers used:
  3916 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3917 ;; Tracked objects:
  3918 ;;		On entry : B1F/0
  3919 ;;		On exit  : 1F/0
  3920 ;;		Unchanged: 0/0
  3921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3924 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3925 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  3926 ;;Total ram usage:        1 bytes
  3927 ;; Hardware stack levels required when called:    9
  3928 ;; This function calls:
  3929 ;;		_DecodeDATA
  3930 ;;		_SYSTEM_Initialize
  3931 ;;		_TMR0_StartTimer
  3932 ;;		_TMR2_StartTimer
  3933 ;;		_autoRun
  3934 ;;		_findDeviceFlash
  3935 ;;		_initBLE
  3936 ;;		_initLed
  3937 ;;		_initRTC
  3938 ;;		_preview
  3939 ;;		_saveLedPara
  3940 ;; This function is called by:
  3941 ;;		Startup code after reset
  3942 ;; This function uses a non-reentrant model
  3943 ;;
  3944                           
  3945                           
  3946                           ;psect for function _main
  3947  0C52                     _main:	
  3948                           
  3949                           ;main.c: 21: SYSTEM_Initialize();
  3950                           
  3951                           ;incstack = 0
  3952                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3953  0C52  319D  258F  318C   	fcall	_SYSTEM_Initialize
  3954                           
  3955                           ;main.c: 23: initBLE();
  3956  0C55  319E  26E1  318C   	fcall	_initBLE
  3957                           
  3958                           ;main.c: 25: (INTCONbits.GIE = 1);
  3959  0C58  178B               	bsf	11,7	;volatile
  3960                           
  3961                           ;main.c: 26: (INTCONbits.PEIE = 1);
  3962  0C59  170B               	bsf	11,6	;volatile
  3963                           
  3964                           ;main.c: 28: initLed();
  3965  0C5A  3188  203D  318C   	fcall	_initLed
  3966                           
  3967                           ;main.c: 30: initRTC();
  3968  0C5D  27EF  318C         	fcall	_initRTC
  3969                           
  3970                           ;main.c: 31: TMR0_StartTimer();
  3971  0C5F  2779  318C         	fcall	_TMR0_StartTimer
  3972                           
  3973                           ;main.c: 33: TMR2_StartTimer();
  3974  0C61  277B  318C         	fcall	_TMR2_StartTimer
  3975  0C63                     l39:	
  3976                           ;main.c: 35: while(1)
  3977                           
  3978  0C63  0064               	clrwdt	;# 
  3979                           
  3980                           ;main.c: 39: if((RA2 == 0) && LATC1)
  3981  0C64  0020               	movlb	0	; select bank0
  3982  0C65  190C               	btfsc	12,2	;volatile
  3983  0C66  2C77               	goto	l8405
  3984  0C67  0022               	movlb	2	; select bank2
  3985  0C68  1C8E               	btfss	14,1	;volatile
  3986  0C69  2C77               	goto	l8405
  3987                           
  3988                           ;main.c: 40: {
  3989                           ;main.c: 41: nRcvIdx = 0;
  3990  0C6A  0021               	movlb	1	; select bank1
  3991  0C6B  01E8               	clrf	_nRcvIdx^(0+128)	;volatile
  3992                           
  3993                           ;main.c: 42: _delay((unsigned long)((800)*(16000000/4000000.0)));
  3994  0C6C  3005               	movlw	5
  3995  0C6D  0021               	movlb	1	; select bank1
  3996  0C6E  00E0               	movwf	??_main^(0+128)
  3997  0C6F  3026               	movlw	38
  3998  0C70                     u7817:	
  3999  0C70  0B89               	decfsz	9,f
  4000  0C71  2C70               	goto	u7817
  4001  0C72  0BE0               	decfsz	??_main^(0+128),f
  4002  0C73  2C70               	goto	u7817
  4003  0C74  0000               	nop
  4004                           
  4005                           ;main.c: 43: LATC1 = 0;
  4006  0C75  0022               	movlb	2	; select bank2
  4007  0C76  108E               	bcf	14,1	;volatile
  4008  0C77                     l8405:	
  4009                           
  4010                           ;main.c: 44: }
  4011                           ;main.c: 45: if(RA2 && (LATC1 == 0))
  4012  0C77  0020               	movlb	0	; select bank0
  4013  0C78  1D0C               	btfss	12,2	;volatile
  4014  0C79  2C87               	goto	l8417
  4015  0C7A  0022               	movlb	2	; select bank2
  4016  0C7B  188E               	btfsc	14,1	;volatile
  4017  0C7C  2C87               	goto	l8417
  4018                           
  4019                           ;main.c: 46: {
  4020                           ;main.c: 47: _delay((unsigned long)((100)*(16000000/4000000.0)));
  4021  0C7D  3085               	movlw	133
  4022  0C7E                     u7827:	
  4023  0C7E  0B89               	decfsz	9,f
  4024  0C7F  2C7E               	goto	u7827
  4025  0C80  0000               	nop
  4026                           
  4027                           ;main.c: 48: LATC1 = 1;
  4028  0C81  0022               	movlb	2	; select bank2
  4029  0C82  148E               	bsf	14,1	;volatile
  4030                           
  4031                           ;main.c: 49: DecodeDATA();
  4032  0C83  24A3  318C         	fcall	_DecodeDATA
  4033                           
  4034                           ;main.c: 50: nRcvIdx = 0;
  4035  0C85  0021               	movlb	1	; select bank1
  4036  0C86  01E8               	clrf	_nRcvIdx^(0+128)	;volatile
  4037  0C87                     l8417:	
  4038                           
  4039                           ;main.c: 51: }
  4040                           ;main.c: 53: if (gLedRunPara.fSec)
  4041  0C87  0020               	movlb	0	; select bank0
  4042  0C88  1CC9               	btfss	_gLedRunPara,1	;volatile
  4043  0C89  2C63               	goto	l39
  4044                           
  4045                           ;main.c: 54: {
  4046                           ;main.c: 55: gLedRunPara.fSec = 0;
  4047  0C8A  10C9               	bcf	_gLedRunPara,1	;volatile
  4048                           
  4049                           ;main.c: 57: if (gLedRunPara.find)
  4050  0C8B  1C49               	btfss	_gLedRunPara,0	;volatile
  4051  0C8C  2C90               	goto	l43
  4052                           
  4053                           ;main.c: 58: {
  4054                           ;main.c: 59: findDeviceFlash();
  4055  0C8D  277D  318C         	fcall	_findDeviceFlash
  4056                           
  4057                           ;main.c: 60: }
  4058  0C8F  2C9C               	goto	l8429
  4059  0C90                     l43:	
  4060                           
  4061                           ;main.c: 61: else if (gLedPara.fAuto)
  4062  0C90  0024               	movlb	4	; select bank4
  4063  0C91  1C20               	btfss	_gLedPara^(0+512),0	;volatile
  4064  0C92  2C9C               	goto	l8429
  4065                           
  4066                           ;main.c: 62: {
  4067                           ;main.c: 64: if (gLedRunPara.fPrev)
  4068  0C93  0020               	movlb	0	; select bank0
  4069  0C94  1DC9               	btfss	_gLedRunPara,3	;volatile
  4070  0C95  2C99               	goto	l8427
  4071                           
  4072                           ;main.c: 65: {
  4073                           ;main.c: 66: preview();
  4074  0C96  27F9  318C         	fcall	_preview
  4075                           
  4076                           ;main.c: 67: }
  4077  0C98  2C9C               	goto	l8429
  4078  0C99                     l8427:	
  4079                           
  4080                           ;main.c: 68: else
  4081                           ;main.c: 69: {
  4082                           ;main.c: 70: autoRun();
  4083  0C99  3194  246E  318C   	fcall	_autoRun
  4084  0C9C                     l8429:	
  4085                           
  4086                           ;main.c: 71: }
  4087                           ;main.c: 72: }
  4088                           ;main.c: 74: if (gLedRunPara.fSave)
  4089  0C9C  0020               	movlb	0	; select bank0
  4090  0C9D  1D49               	btfss	_gLedRunPara,2	;volatile
  4091  0C9E  2C63               	goto	l39
  4092                           
  4093                           ;main.c: 75: {
  4094                           ;main.c: 76: saveLedPara();
  4095  0C9F  319C  24AB  318C   	fcall	_saveLedPara
  4096  0CA2  2C63               	goto	l39
  4097  0CA3                     __end_of_main:	
  4098  0CA3                     __ptext35:	
  4099 ;; *************** function _DecodeDATA *****************
  4100 ;; Defined at:
  4101 ;;		line 166 in file "src/ble.c"
  4102 ;; Parameters:    Size  Location     Type
  4103 ;;		None
  4104 ;; Auto vars:     Size  Location     Type
  4105 ;;  val             2   38[BANK1 ] unsigned int 
  4106 ;;  val             2   40[BANK1 ] unsigned int 
  4107 ;;  i               1   44[BANK1 ] unsigned char 
  4108 ;;  i               1   47[BANK1 ] unsigned char 
  4109 ;;  i               1   42[BANK1 ] unsigned char 
  4110 ;;  i               1   43[BANK1 ] unsigned char 
  4111 ;;  len             1   37[BANK1 ] unsigned char 
  4112 ;;  idx             1   46[BANK1 ] unsigned char 
  4113 ;;  idx             1   45[BANK1 ] unsigned char 
  4114 ;;  len             1   36[BANK1 ] unsigned char 
  4115 ;;  idx             1   35[BANK1 ] unsigned char 
  4116 ;;  len             1    0        unsigned char 
  4117 ;; Return value:  Size  Location     Type
  4118 ;;                  1    wreg      void 
  4119 ;; Registers used:
  4120 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4121 ;; Tracked objects:
  4122 ;;		On entry : 1F/2
  4123 ;;		On exit  : 0/0
  4124 ;;		Unchanged: 0/0
  4125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4127 ;;      Locals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0
  4128 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4129 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0
  4130 ;;Total ram usage:       18 bytes
  4131 ;; Hardware stack levels used:    1
  4132 ;; Hardware stack levels required when called:    7
  4133 ;; This function calls:
  4134 ;;		___lwdiv
  4135 ;;		_bleSendData
  4136 ;;		_bleSendDeviceData
  4137 ;;		_bleSendDeviceTime
  4138 ;;		_getCRC
  4139 ;;		_initDynamic
  4140 ;;		_turnOffLedRamp
  4141 ;;		_turnOnLedRamp
  4142 ;;		_updatePWM
  4143 ;; This function is called by:
  4144 ;;		_main
  4145 ;; This function uses a non-reentrant model
  4146 ;;
  4147                           
  4148                           
  4149                           ;psect for function _DecodeDATA
  4150  0CA3                     _DecodeDATA:	
  4151                           
  4152                           ;ble.c: 168: if ( gLedRunPara.find || rxBuf[0] != 0x68 )
  4153                           
  4154                           ;incstack = 0
  4155                           ; Regs used in _DecodeDATA: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4156  0CA3  0020               	movlb	0	; select bank0
  4157  0CA4  1849               	btfsc	_gLedRunPara,0	;volatile
  4158  0CA5  0008               	return
  4159  0CA6  3068               	movlw	104
  4160  0CA7  0025               	movlb	5	; select bank5
  4161  0CA8  0620               	xorwf	_rxBuf^(0+640),w
  4162  0CA9  1D03               	btfss	3,2
  4163  0CAA  0008               	return
  4164  0CAB  2F3C               	goto	l8215
  4165  0CAC                     l288:	
  4166                           ;ble.c: 173: {
  4167                           ;ble.c: 174: case 0x02:
  4168                           
  4169                           
  4170                           ;ble.c: 175: if ( !gLedRunPara.fPrev && getCRC(rxBuf, 4) == 0x00 )
  4171  0CAC  0020               	movlb	0	; select bank0
  4172  0CAD  19C9               	btfsc	_gLedRunPara,3	;volatile
  4173  0CAE  0008               	return
  4174  0CAF  278F  318C         	fcall	PL38	;call to abstracted procedure
  4175  0CB1  3004               	movlw	4
  4176  0CB2  00A2               	movwf	getCRC@len^(0+128)
  4177  0CB3  2747  318C         	fcall	_getCRC
  4178  0CB5  3A00               	xorlw	0
  4179  0CB6  1D03               	skipz
  4180  0CB7  0008               	return
  4181                           
  4182                           ;ble.c: 176: {
  4183                           ;ble.c: 177: if ( gLedPara.mPara.manualPara.fDyn == 12 )
  4184  0CB8  300C               	movlw	12
  4185  0CB9  0024               	movlb	4	; select bank4
  4186  0CBA  0622               	xorwf	(_gLedPara^(0+512)+2),w	;volatile
  4187  0CBB  1903               	btfsc	3,2
  4188                           
  4189                           ;ble.c: 178: {
  4190                           ;ble.c: 179: gLedPara.mPara.manualPara.fDyn = 0;
  4191  0CBC  01A2               	clrf	(_gLedPara^(0+512)+2)	;volatile
  4192                           
  4193                           ;ble.c: 180: }
  4194                           ;ble.c: 181: gLedRunPara.fDynamic = 0;
  4195  0CBD  0020               	movlb	0	; select bank0
  4196  0CBE  01CA               	clrf	_gLedRunPara+1	;volatile
  4197                           
  4198                           ;ble.c: 182: if ( rxBuf[2] == 0x00 )
  4199  0CBF  0025               	movlb	5	; select bank5
  4200  0CC0  0822               	movf	(_rxBuf^(0+640)+2),w
  4201  0CC1  1D03               	btfss	3,2
  4202  0CC2  2CD7               	goto	l7949
  4203                           
  4204                           ;ble.c: 183: {
  4205                           ;ble.c: 184: gLedPara.fAuto = 0;
  4206  0CC3  0024               	movlb	4	; select bank4
  4207  0CC4  1020               	bcf	_gLedPara^(0+512),0	;volatile
  4208                           
  4209                           ;ble.c: 185: if ( gLedPara.mPara.manualPara.fOn )
  4210  0CC5  1C21               	btfss	(_gLedPara^(0+512)+1),0	;volatile
  4211  0CC6  2CD4               	goto	l7947
  4212                           
  4213                           ;ble.c: 186: {
  4214                           ;ble.c: 187: if ( gLedPara.mPara.manualPara.fDyn == 0 )
  4215  0CC7  0822               	movf	(_gLedPara^(0+512)+2),w	;volatile
  4216  0CC8  1D03               	btfss	3,2
  4217  0CC9  2CCD               	goto	l7943
  4218                           
  4219                           ;ble.c: 188: {
  4220                           ;ble.c: 189: turnOnLedRamp();
  4221  0CCA  2767  318C         	fcall	_turnOnLedRamp
  4222                           
  4223                           ;ble.c: 190: }
  4224  0CCC  2CDB               	goto	l296
  4225  0CCD                     l7943:	
  4226                           
  4227                           ;ble.c: 191: else
  4228                           ;ble.c: 192: {
  4229                           ;ble.c: 193: gLedRunPara.fDynamic = gLedPara.mPara.manualPara.fDyn;
  4230  0CCD  0822               	movf	(_gLedPara^(0+512)+2),w	;volatile
  4231  0CCE  0020               	movlb	0	; select bank0
  4232  0CCF  00CA               	movwf	_gLedRunPara+1	;volatile
  4233                           
  4234                           ;ble.c: 194: initDynamic();
  4235  0CD0  3189  213D  318C   	fcall	_initDynamic
  4236  0CD3  2CDB               	goto	l296
  4237  0CD4                     l7947:	
  4238                           
  4239                           ;ble.c: 197: else
  4240                           ;ble.c: 198: {
  4241                           ;ble.c: 199: turnOffLedRamp();
  4242  0CD4  275B  318C         	fcall	_turnOffLedRamp
  4243  0CD6  2CDB               	goto	l296
  4244  0CD7                     l7949:	
  4245                           
  4246                           ;ble.c: 202: else if ( rxBuf[2] == 0x01 )
  4247  0CD7  0B22               	decfsz	(_rxBuf^(0+640)+2),w
  4248  0CD8  2CDB               	goto	l296
  4249                           
  4250                           ;ble.c: 203: {
  4251                           ;ble.c: 204: gLedPara.fAuto = 1;
  4252  0CD9  0024               	movlb	4	; select bank4
  4253  0CDA  1420               	bsf	_gLedPara^(0+512),0	;volatile
  4254  0CDB                     l296:	
  4255                           
  4256                           ;ble.c: 205: }
  4257                           ;ble.c: 206: gLedRunPara.fPause = 0;
  4258                           
  4259                           ;ble.c: 207: gLedRunPara.fStep = 0;
  4260                           
  4261                           ;ble.c: 208: gLedRunPara.fSave = 1;
  4262                           
  4263                           ;ble.c: 209: gLedRunPara.nSaveDelayCount = 3;
  4264  0CDB  27B7               	fcall	PL134	;call to abstracted procedure
  4265  0CDC                     l7955:	
  4266                           
  4267                           ;ble.c: 210: bleSendDeviceData();
  4268  0CDC  319E  2E71         	ljmp	l7349
  4269  0CDE                     l299:	
  4270                           ;ble.c: 214: case 0x03:
  4271                           
  4272                           
  4273                           ;ble.c: 215: if ( !gLedPara.fAuto )
  4274  0CDE  0024               	movlb	4	; select bank4
  4275  0CDF  1820               	btfsc	_gLedPara^(0+512),0	;volatile
  4276  0CE0  0008               	return
  4277                           
  4278                           ;ble.c: 216: {
  4279                           ;ble.c: 217: if ( getCRC(rxBuf, 4) == 0x00 )
  4280  0CE1  278F  318C         	fcall	PL38	;call to abstracted procedure
  4281  0CE3  3004               	movlw	4
  4282  0CE4  00A2               	movwf	getCRC@len^(0+128)
  4283  0CE5  2747  318C         	fcall	_getCRC
  4284  0CE7  3A00               	xorlw	0
  4285  0CE8  1D03               	skipz
  4286  0CE9  0008               	return
  4287                           
  4288                           ;ble.c: 218: {
  4289                           ;ble.c: 219: if ( gLedPara.mPara.manualPara.fDyn == 12 )
  4290  0CEA  300C               	movlw	12
  4291  0CEB  0024               	movlb	4	; select bank4
  4292  0CEC  0622               	xorwf	(_gLedPara^(0+512)+2),w	;volatile
  4293  0CED  1D03               	btfss	3,2
  4294  0CEE  2CF2               	goto	l7963
  4295                           
  4296                           ;ble.c: 220: {
  4297                           ;ble.c: 221: gLedPara.mPara.manualPara.fDyn = 0;
  4298  0CEF  01A2               	clrf	(_gLedPara^(0+512)+2)	;volatile
  4299                           
  4300                           ;ble.c: 222: gLedRunPara.fDynamic = 0;
  4301  0CF0  0020               	movlb	0	; select bank0
  4302  0CF1  01CA               	clrf	_gLedRunPara+1	;volatile
  4303  0CF2                     l7963:	
  4304                           
  4305                           ;ble.c: 223: }
  4306                           ;ble.c: 224: if ( rxBuf[2] == 0x00 )
  4307  0CF2  0025               	movlb	5	; select bank5
  4308  0CF3  0822               	movf	(_rxBuf^(0+640)+2),w
  4309  0CF4  1D03               	btfss	3,2
  4310  0CF5  2CFD               	goto	l7971
  4311                           
  4312                           ;ble.c: 225: {
  4313                           ;ble.c: 226: gLedPara.mPara.manualPara.fOn = 0;
  4314  0CF6  0024               	movlb	4	; select bank4
  4315  0CF7  1021               	bcf	(_gLedPara^(0+512)+1),0	;volatile
  4316                           
  4317                           ;ble.c: 227: gLedRunPara.fDynamic = 0;
  4318  0CF8  0020               	movlb	0	; select bank0
  4319  0CF9  01CA               	clrf	_gLedRunPara+1	;volatile
  4320                           
  4321                           ;ble.c: 228: turnOffLedRamp();
  4322  0CFA  275B  318C         	fcall	_turnOffLedRamp
  4323                           
  4324                           ;ble.c: 229: }
  4325  0CFC  2D0F               	goto	l7985
  4326  0CFD                     l7971:	
  4327                           
  4328                           ;ble.c: 230: else if ( rxBuf[2] == 0x01 )
  4329  0CFD  0B22               	decfsz	(_rxBuf^(0+640)+2),w
  4330  0CFE  2D0F               	goto	l7985
  4331                           
  4332                           ;ble.c: 231: {
  4333                           ;ble.c: 232: gLedPara.mPara.manualPara.fOn = 1;
  4334  0CFF  0024               	movlb	4	; select bank4
  4335  0D00  1421               	bsf	(_gLedPara^(0+512)+1),0	;volatile
  4336                           
  4337                           ;ble.c: 233: if ( gLedPara.mPara.manualPara.fDyn == 0 )
  4338  0D01  0822               	movf	(_gLedPara^(0+512)+2),w	;volatile
  4339  0D02  1D03               	btfss	3,2
  4340  0D03  2D09               	goto	l7981
  4341                           
  4342                           ;ble.c: 234: {
  4343                           ;ble.c: 235: gLedRunPara.fDynamic = 0;
  4344  0D04  0020               	movlb	0	; select bank0
  4345  0D05  01CA               	clrf	_gLedRunPara+1	;volatile
  4346                           
  4347                           ;ble.c: 236: turnOnLedRamp();
  4348  0D06  2767  318C         	fcall	_turnOnLedRamp
  4349                           
  4350                           ;ble.c: 237: }
  4351  0D08  2D0F               	goto	l7985
  4352  0D09                     l7981:	
  4353                           
  4354                           ;ble.c: 238: else
  4355                           ;ble.c: 239: {
  4356                           ;ble.c: 240: gLedRunPara.fDynamic = gLedPara.mPara.manualPara.fDyn;
  4357  0D09  0822               	movf	(_gLedPara^(0+512)+2),w	;volatile
  4358  0D0A                     L11:	
  4359  0D0A  0020               	movlb	0	; select bank0
  4360  0D0B  00CA               	movwf	_gLedRunPara+1	;volatile
  4361                           
  4362                           ;ble.c: 241: initDynamic();
  4363  0D0C  3189  213D  318C   	fcall	_initDynamic
  4364  0D0F                     l7985:	
  4365                           
  4366                           ;ble.c: 242: }
  4367                           ;ble.c: 243: }
  4368                           ;ble.c: 244: gLedRunPara.fPause = 0;
  4369                           
  4370                           ;ble.c: 245: gLedRunPara.fStep = 0;
  4371                           
  4372                           ;ble.c: 246: gLedRunPara.fSave = 1;
  4373                           
  4374                           ;ble.c: 247: gLedRunPara.nSaveDelayCount = 3;
  4375  0D0F  27B7               	fcall	PL134	;call to abstracted procedure
  4376                           
  4377                           ;ble.c: 248: bleSendDeviceData();
  4378  0D10  319E  2E71         	ljmp	l7349
  4379  0D12                     l308:	
  4380                           ;ble.c: 253: case 0x04:
  4381                           
  4382                           
  4383                           ;ble.c: 254: if ( gLedPara.mPara.manualPara.fOn && ( !gLedPara.fAuto ) )
  4384  0D12  0024               	movlb	4	; select bank4
  4385  0D13  1821               	btfsc	(_gLedPara^(0+512)+1),0	;volatile
  4386  0D14  1820               	btfsc	_gLedPara^(0+512),0	;volatile
  4387  0D15  0008               	return
  4388                           
  4389                           ;ble.c: 255: {
  4390                           ;ble.c: 256: gLedPara.mPara.manualPara.fDyn = 0;
  4391  0D16  01A2               	clrf	(_gLedPara^(0+512)+2)	;volatile
  4392                           
  4393                           ;ble.c: 258: if ( getCRC(rxBuf, len) == 0x00 )
  4394  0D17  278F  318C         	fcall	PL38	;call to abstracted procedure
  4395  0D19  300B               	movlw	11
  4396  0D1A  00A2               	movwf	getCRC@len^(0+128)
  4397  0D1B  2747  318C         	fcall	_getCRC
  4398  0D1D  3A00               	xorlw	0
  4399  0D1E  1D03               	skipz
  4400  0D1F  0008               	return
  4401                           
  4402                           ;ble.c: 259: {
  4403                           ;ble.c: 260: for ( unsigned char i = 0; i < 4; i++ )
  4404  0D20  01CF               	clrf	DecodeDATA@i^(0+128)
  4405  0D21                     l8007:	
  4406                           
  4407                           ;ble.c: 261: {
  4408                           ;ble.c: 262: unsigned int val = ( rxBuf[2 + 2 * i] << 8 ) | rxBuf[3 + 2 * i];
  4409  0D21  354F               	lslf	DecodeDATA@i^(0+128),w
  4410  0D22  3EA3               	addlw	(low ((_rxBuf| (0+512)+3)))& (0+255)
  4411  0D23  0086               	movwf	6
  4412  0D24  3002               	movlw	2	; select bank5/6
  4413  0D25  0087               	movwf	7
  4414  0D26  354F               	lslf	DecodeDATA@i^(0+128),w
  4415  0D27  27AB  318C         	fcall	PL122	;call to abstracted procedure
  4416  0D29  00C9               	movwf	(DecodeDATA@val+1)^(0+128)
  4417  0D2A  0801               	movf	1,w
  4418  0D2B  00C8               	movwf	DecodeDATA@val^(0+128)
  4419                           
  4420                           ;ble.c: 263: if ( val <= 1000 )
  4421  0D2C  3003               	movlw	3
  4422  0D2D  0249               	subwf	(DecodeDATA@val+1)^(0+128),w
  4423  0D2E  30E9               	movlw	233
  4424  0D2F  1903               	skipnz
  4425  0D30  0248               	subwf	DecodeDATA@val^(0+128),w
  4426  0D31  1803               	skipnc
  4427  0D32  2D42               	goto	l8013
  4428                           
  4429                           ;ble.c: 264: {
  4430                           ;ble.c: 265: gLedPara.mPara.manualPara.nBrt[i] = val;
  4431  0D33  354F               	lslf	DecodeDATA@i^(0+128),w
  4432  0D34  3E23               	addlw	(low ((_gLedPara| (0+512)+3)))& (0+255)
  4433  0D35  0086               	movwf	6
  4434  0D36  0848               	movf	DecodeDATA@val^(0+128),w
  4435  0D37  3FC0               	movwi [0]fsr1
  4436  0D38  0849               	movf	(DecodeDATA@val+1)^(0+128),w
  4437  0D39  3FC1               	movwi [1]fsr1
  4438                           
  4439                           ;ble.c: 266: gLedRunPara.nTargetBrt[i] = val;
  4440  0D3A  354F               	lslf	DecodeDATA@i^(0+128),w
  4441  0D3B  3E4E               	addlw	(low ((_gLedRunPara| 0+5)))& (0+255)
  4442  0D3C  0086               	movwf	6
  4443  0D3D  0187               	clrf	7
  4444  0D3E  0848               	movf	DecodeDATA@val^(0+128),w
  4445  0D3F  3FC0               	movwi [0]fsr1
  4446  0D40  0849               	movf	(DecodeDATA@val+1)^(0+128),w
  4447  0D41  3FC1               	movwi [1]fsr1
  4448  0D42                     l8013:	
  4449  0D42  3004               	movlw	4
  4450  0D43  0ACF               	incf	DecodeDATA@i^(0+128),f
  4451  0D44  024F               	subwf	DecodeDATA@i^(0+128),w
  4452  0D45  1C03               	skipc
  4453  0D46  2D21               	goto	l8007
  4454                           
  4455                           ;ble.c: 267: }
  4456                           ;ble.c: 268: }
  4457                           ;ble.c: 269: gLedRunPara.fDynamic = 0;
  4458  0D47  0020               	movlb	0	; select bank0
  4459  0D48  01CA               	clrf	_gLedRunPara+1	;volatile
  4460                           
  4461                           ;ble.c: 270: gLedRunPara.fPause = 0;
  4462  0D49  1249               	bcf	_gLedRunPara,4	;volatile
  4463                           
  4464                           ;ble.c: 271: gLedRunPara.fStep = 0;
  4465  0D4A  12C9               	bcf	_gLedRunPara,5	;volatile
  4466  0D4B                     L10:	
  4467                           
  4468                           ;ble.c: 272: gLedRunPara.fSave = 1;
  4469  0D4B  1549               	bsf	_gLedRunPara,2	;volatile
  4470                           
  4471                           ;ble.c: 273: gLedRunPara.nSaveDelayCount = 3;
  4472  0D4C  3003               	movlw	3
  4473  0D4D  00CC               	movwf	_gLedRunPara+3	;volatile
  4474  0D4E  0008               	return
  4475  0D4F                     l8027:	
  4476                           
  4477                           ;ble.c: 279: if ( rxBuf[0] ^ rxBuf[1] == rxBuf[2] )
  4478  0D4F  0821               	movf	(_rxBuf^(0+640)+1),w
  4479  0D50  0622               	xorwf	(_rxBuf^(0+640)+2),w
  4480  0D51  1D03               	btfss	3,2
  4481  0D52  2D55               	goto	u7020
  4482  0D53  3001               	movlw	1
  4483  0D54  2D56               	goto	u7030
  4484  0D55                     u7020:	
  4485  0D55  3000               	movlw	0
  4486  0D56                     u7030:	
  4487  0D56  0021               	movlb	1	; select bank1
  4488  0D57  00BE               	movwf	??_DecodeDATA^(0+128)
  4489  0D58  01BF               	clrf	(??_DecodeDATA^(0+128)+1)
  4490  0D59  0025               	movlb	5	; select bank5
  4491  0D5A  0620               	xorwf	_rxBuf^(0+640),w
  4492  0D5B  0021               	movlb	1	; select bank1
  4493  0D5C  00C0               	movwf	(??_DecodeDATA+2)^(0+128)
  4494  0D5D  083F               	movf	(??_DecodeDATA+1)^(0+128),w
  4495  0D5E  00C1               	movwf	(??_DecodeDATA+3)^(0+128)
  4496  0D5F  0840               	movf	(??_DecodeDATA+2)^(0+128),w
  4497  0D60  0441               	iorwf	((??_DecodeDATA+2)^(0+128)+1),w
  4498  0D61  1903               	btfsc	3,2
  4499  0D62  0008               	return
  4500  0D63  2CDC               	goto	l7955
  4501  0D64                     l8031:	
  4502                           
  4503                           ;ble.c: 286: if ( rxBuf[2] < 4 && getCRC(rxBuf, 4) == 0x00 )
  4504  0D64  3004               	movlw	4
  4505  0D65  0222               	subwf	(_rxBuf^(0+640)+2),w
  4506  0D66  1803               	skipnc
  4507  0D67  0008               	return
  4508  0D68  278F  318C         	fcall	PL38	;call to abstracted procedure
  4509  0D6A  3004               	movlw	4
  4510  0D6B  00A2               	movwf	getCRC@len^(0+128)
  4511  0D6C  2747  318C         	fcall	_getCRC
  4512  0D6E  3A00               	xorlw	0
  4513  0D6F  1D03               	skipz
  4514  0D70  0008               	return
  4515                           
  4516                           ;ble.c: 287: {
  4517                           ;ble.c: 288: unsigned char idx = rxBuf[2];
  4518  0D71  0025               	movlb	5	; select bank5
  4519  0D72  0822               	movf	(_rxBuf^(0+640)+2),w
  4520  0D73  0021               	movlb	1	; select bank1
  4521  0D74  00C3               	movwf	DecodeDATA@idx^(0+128)
  4522                           
  4523                           ;ble.c: 289: for ( unsigned char i = 0; i < 4; i++ )
  4524  0D75  01CB               	clrf	DecodeDATA@i_701^(0+128)
  4525  0D76                     l8043:	
  4526                           
  4527                           ;ble.c: 290: {
  4528                           ;ble.c: 291: gLedPara.mPara.manualPara.nCustomBrt[idx][i] = gLedRunPara.nCurrentBrt[i] /
      +                           10;
  4529  0D76  0843               	movf	DecodeDATA@idx^(0+128),w
  4530  0D77  00BE               	movwf	??_DecodeDATA^(0+128)
  4531  0D78  302B               	movlw	(low ((_gLedPara| (0+512)+11)))& (0+255)
  4532  0D79  35BE               	lslf	??_DecodeDATA^(0+128),f
  4533  0D7A  35BE               	lslf	??_DecodeDATA^(0+128),f
  4534  0D7B  073E               	addwf	??_DecodeDATA^(0+128),w
  4535  0D7C  00BF               	movwf	(??_DecodeDATA+1)^(0+128)
  4536  0D7D  084B               	movf	DecodeDATA@i_701^(0+128),w
  4537  0D7E  073F               	addwf	(??_DecodeDATA+1)^(0+128),w
  4538  0D7F  00C0               	movwf	(??_DecodeDATA+2)^(0+128)
  4539  0D80  0086               	movwf	6
  4540  0D81  3002               	movlw	2	; select bank4/5
  4541  0D82  0087               	movwf	7
  4542  0D83  300A               	movlw	10
  4543  0D84  00A0               	movwf	___lwdiv@divisor^(0+128)
  4544  0D85  01A1               	clrf	(___lwdiv@divisor+1)^(0+128)
  4545  0D86  354B               	lslf	DecodeDATA@i_701^(0+128),w
  4546  0D87  3E56               	addlw	(low ((_gLedRunPara| 0+13)))& (0+255)
  4547  0D88  0084               	movwf	4
  4548  0D89  0185               	clrf	5
  4549  0D8A  3F00               	moviw [0]fsr0
  4550  0D8B  00A2               	movwf	___lwdiv@dividend^(0+128)
  4551  0D8C  3F01               	moviw [1]fsr0
  4552  0D8D  00A3               	movwf	(___lwdiv@dividend+1)^(0+128)
  4553  0D8E  27CA  318C         	fcall	___lwdiv
  4554  0D90  0820               	movf	?___lwdiv^(0+128),w
  4555  0D91  0081               	movwf	1
  4556  0D92  3004               	movlw	4
  4557  0D93  0ACB               	incf	DecodeDATA@i_701^(0+128),f
  4558  0D94  024B               	subwf	DecodeDATA@i_701^(0+128),w
  4559  0D95  1C03               	skipc
  4560  0D96  2D76               	goto	l8043
  4561  0D97  2CDB               	goto	l296
  4562  0D98                     l320:	
  4563                           ;ble.c: 301: case 0x07:
  4564                           
  4565                           ;ble.c: 295: gLedRunPara.fSave = 1;
  4566                           
  4567                           ;ble.c: 294: gLedRunPara.fStep = 0;
  4568                           
  4569                           ;ble.c: 292: }
  4570                           ;ble.c: 293: gLedRunPara.fPause = 0;
  4571                           
  4572                           
  4573                           ;ble.c: 302: if ( !gLedRunPara.fPrev && getCRC(rxBuf, sizeof(gLedPara.aPara.array) + 3) 
      +                          == 0x00 )
  4574  0D98  0020               	movlb	0	; select bank0
  4575  0D99  19C9               	btfsc	_gLedRunPara,3	;volatile
  4576  0D9A  0008               	return
  4577  0D9B  278F  318C         	fcall	PL38	;call to abstracted procedure
  4578  0D9D  3019               	movlw	25
  4579  0D9E  00A2               	movwf	getCRC@len^(0+128)
  4580  0D9F  2747  318C         	fcall	_getCRC
  4581  0DA1  3A00               	xorlw	0
  4582  0DA2  1D03               	skipz
  4583  0DA3  0008               	return
  4584                           
  4585                           ;ble.c: 303: {
  4586                           ;ble.c: 304: unsigned char len = sizeof (gLedPara.aPara.array);
  4587  0DA4  3016               	movlw	22
  4588  0DA5  00C4               	movwf	DecodeDATA@len_702^(0+128)
  4589                           
  4590                           ;ble.c: 305: for ( unsigned char i = 0; i < len; i++ )
  4591  0DA6  01CA               	clrf	DecodeDATA@i_703^(0+128)
  4592  0DA7                     l8063:	
  4593  0DA7  0844               	movf	DecodeDATA@len_702^(0+128),w
  4594  0DA8  024A               	subwf	DecodeDATA@i_703^(0+128),w
  4595  0DA9  1803               	btfsc	3,0
  4596  0DAA  2CDB               	goto	l296
  4597                           
  4598                           ;ble.c: 306: {
  4599                           ;ble.c: 307: gLedPara.aPara.array[i] = rxBuf[2 + i];
  4600  0DAB  084A               	movf	DecodeDATA@i_703^(0+128),w
  4601  0DAC  3E3B               	addlw	(low ((_gLedPara| (0+512)+27)))& (0+255)
  4602  0DAD  0086               	movwf	6
  4603  0DAE  3002               	movlw	2	; select bank4/5
  4604  0DAF  0087               	movwf	7
  4605  0DB0  084A               	movf	DecodeDATA@i_703^(0+128),w
  4606  0DB1  27AB  318C         	fcall	PL122	;call to abstracted procedure
  4607  0DB3  0081               	movwf	1
  4608  0DB4  0ACA               	incf	DecodeDATA@i_703^(0+128),f
  4609  0DB5  2DA7               	goto	l8063
  4610  0DB6                     l325:	
  4611                           ;ble.c: 317: case 0x08:
  4612                           
  4613                           ;ble.c: 311: gLedRunPara.fSave = 1;
  4614                           
  4615                           ;ble.c: 310: gLedRunPara.fStep = 0;
  4616                           
  4617                           ;ble.c: 308: }
  4618                           ;ble.c: 309: gLedRunPara.fPause = 0;
  4619                           
  4620                           
  4621                           ;ble.c: 318: if ( gLedPara.mPara.manualPara.fOn && getCRC(rxBuf, 5) == 0x00 && rxBuf[2] 
      +                          < 4 )
  4622  0DB6  0024               	movlb	4	; select bank4
  4623  0DB7  1C21               	btfss	(_gLedPara^(0+512)+1),0	;volatile
  4624  0DB8  0008               	return
  4625  0DB9  278F  318C         	fcall	PL38	;call to abstracted procedure
  4626  0DBB  3005               	movlw	5
  4627  0DBC  00A2               	movwf	getCRC@len^(0+128)
  4628  0DBD  2747  318C         	fcall	_getCRC
  4629  0DBF  3A00               	xorlw	0
  4630  0DC0  1D03               	skipz
  4631  0DC1  0008               	return
  4632  0DC2  3004               	movlw	4
  4633  0DC3  0025               	movlb	5	; select bank5
  4634  0DC4  0222               	subwf	(_rxBuf^(0+640)+2),w
  4635  0DC5  1803               	skipnc
  4636  0DC6  0008               	return
  4637                           
  4638                           ;ble.c: 319: {
  4639                           ;ble.c: 320: unsigned char idx = rxBuf[2];
  4640  0DC7  0822               	movf	(_rxBuf^(0+640)+2),w
  4641  0DC8  0021               	movlb	1	; select bank1
  4642  0DC9  00CD               	movwf	DecodeDATA@idx_704^(0+128)
  4643                           
  4644                           ;ble.c: 321: if ( gLedPara.mPara.manualPara.nBrt[idx] + rxBuf[3] < 1000 )
  4645  0DCA  354D               	lslf	DecodeDATA@idx_704^(0+128),w
  4646  0DCB  3E23               	addlw	(low ((_gLedPara| (0+512)+3)))& (0+255)
  4647  0DCC  27A0  318C         	fcall	PL74	;call to abstracted procedure
  4648  0DCE  073E               	addwf	??_DecodeDATA^(0+128),w
  4649  0DCF  00C0               	movwf	(??_DecodeDATA+2)^(0+128)
  4650  0DD0  083F               	movf	(??_DecodeDATA+1)^(0+128),w
  4651  0DD1  1803               	skipnc
  4652  0DD2  0A3F               	incf	(??_DecodeDATA+1)^(0+128),w
  4653  0DD3  00C1               	movwf	((??_DecodeDATA+2)^(0+128)+1)
  4654  0DD4  3003               	movlw	3
  4655  0DD5  0241               	subwf	(??_DecodeDATA+3)^(0+128),w
  4656  0DD6  30E8               	movlw	232
  4657  0DD7  1903               	skipnz
  4658  0DD8  0240               	subwf	(??_DecodeDATA+2)^(0+128),w
  4659  0DD9  1803               	skipnc
  4660  0DDA  2DF0               	goto	l8081
  4661                           
  4662                           ;ble.c: 322: {
  4663                           ;ble.c: 323: gLedPara.mPara.manualPara.nBrt[idx] += rxBuf[3];
  4664  0DDB  354D               	lslf	DecodeDATA@idx_704^(0+128),w
  4665  0DDC  3E23               	addlw	(low ((_gLedPara| (0+512)+3)))& (0+255)
  4666  0DDD  0086               	movwf	6
  4667  0DDE  0025               	movlb	5	; select bank5
  4668  0DDF  0823               	movf	(_rxBuf^(0+640)+3),w
  4669  0DE0  0781               	addwf	1,f
  4670  0DE1  3141               	addfsr 1,1
  4671  0DE2  1803               	skipnc
  4672  0DE3  0A81               	incf	1,f
  4673                           
  4674                           ;ble.c: 324: gLedRunPara.nTargetBrt[idx] = gLedPara.mPara.manualPara.nBrt[idx];
  4675  0DE4  0021               	movlb	1	; select bank1
  4676  0DE5  354D               	lslf	DecodeDATA@idx_704^(0+128),w
  4677  0DE6  3E23               	addlw	(low ((_gLedPara| (0+512)+3)))& (0+255)
  4678  0DE7  0086               	movwf	6
  4679  0DE8  3002               	movlw	2	; select bank4/5
  4680  0DE9  0087               	movwf	7
  4681  0DEA  354D               	lslf	DecodeDATA@idx_704^(0+128),w
  4682  0DEB  3E4E               	addlw	(low ((_gLedRunPara| 0+5)))& (0+255)
  4683  0DEC  318B  23B3  318C   	fcall	PL22	;call to abstracted procedure
  4684                           
  4685                           ;ble.c: 325: }
  4686  0DEF  2E40               	goto	l8105
  4687  0DF0                     l8081:	
  4688                           
  4689                           ;ble.c: 326: else
  4690                           ;ble.c: 327: {
  4691                           ;ble.c: 328: gLedPara.mPara.manualPara.nBrt[idx] = 1000;
  4692  0DF0  27BE  318C         	fcall	PL154	;call to abstracted procedure
  4693  0DF2  3E23               	addlw	(low ((_gLedPara| (0+512)+3)))& (0+255)
  4694  0DF3  0086               	movwf	6
  4695  0DF4  3002               	movlw	2	; select bank4/5
  4696  0DF5  0087               	movwf	7
  4697  0DF6  083E               	movf	??_DecodeDATA^(0+128),w
  4698  0DF7  3FC0               	movwi [0]fsr1
  4699  0DF8  083F               	movf	(??_DecodeDATA^(0+128)+1),w
  4700  0DF9  3FC1               	movwi [1]fsr1
  4701                           
  4702                           ;ble.c: 329: gLedRunPara.nTargetBrt[idx] = 1000;
  4703  0DFA  27BE  318C         	fcall	PL154	;call to abstracted procedure
  4704  0DFC  3E4E               	addlw	(low ((_gLedRunPara| 0+5)))& (0+255)
  4705  0DFD  0086               	movwf	6
  4706  0DFE  0187               	clrf	7
  4707  0DFF  083E               	movf	??_DecodeDATA^(0+128),w
  4708  0E00  3FC0               	movwi [0]fsr1
  4709  0E01  083F               	movf	(??_DecodeDATA^(0+128)+1),w
  4710  0E02  3FC1               	movwi [1]fsr1
  4711  0E03  2E40               	goto	l8105
  4712  0E04                     l329:	
  4713                           ;ble.c: 338: case 0x09:
  4714                           
  4715                           ;ble.c: 333: gLedRunPara.fSave = 1;
  4716                           
  4717                           ;ble.c: 332: gLedRunPara.fStep = 1;
  4718                           
  4719                           ;ble.c: 330: }
  4720                           ;ble.c: 331: gLedRunPara.fPause = 0;
  4721                           
  4722                           
  4723                           ;ble.c: 339: if ( gLedPara.mPara.manualPara.fOn && getCRC(rxBuf, 5) == 0x00 && rxBuf[2] 
      +                          < 4 )
  4724  0E04  0024               	movlb	4	; select bank4
  4725  0E05  1C21               	btfss	(_gLedPara^(0+512)+1),0	;volatile
  4726  0E06  0008               	return
  4727  0E07  278F  318C         	fcall	PL38	;call to abstracted procedure
  4728  0E09  3005               	movlw	5
  4729  0E0A  00A2               	movwf	getCRC@len^(0+128)
  4730  0E0B  2747  318C         	fcall	_getCRC
  4731  0E0D  3A00               	xorlw	0
  4732  0E0E  1D03               	skipz
  4733  0E0F  0008               	return
  4734  0E10  3004               	movlw	4
  4735  0E11  0025               	movlb	5	; select bank5
  4736  0E12  0222               	subwf	(_rxBuf^(0+640)+2),w
  4737  0E13  1803               	skipnc
  4738  0E14  0008               	return
  4739                           
  4740                           ;ble.c: 340: {
  4741                           ;ble.c: 341: unsigned char idx = rxBuf[2];
  4742  0E15  0822               	movf	(_rxBuf^(0+640)+2),w
  4743  0E16  0021               	movlb	1	; select bank1
  4744  0E17  00CE               	movwf	DecodeDATA@idx_705^(0+128)
  4745                           
  4746                           ;ble.c: 342: if ( gLedPara.mPara.manualPara.nBrt[idx] > rxBuf[3] )
  4747  0E18  354E               	lslf	DecodeDATA@idx_705^(0+128),w
  4748  0E19  3E23               	addlw	(low ((_gLedPara| (0+512)+3)))& (0+255)
  4749  0E1A  27A0  318C         	fcall	PL74	;call to abstracted procedure
  4750  0E1C  00C0               	movwf	(??_DecodeDATA+2)^(0+128)
  4751  0E1D  01C1               	clrf	((??_DecodeDATA+2)^(0+128)+1)
  4752  0E1E  083F               	movf	(??_DecodeDATA+1)^(0+128),w
  4753  0E1F  0241               	subwf	(??_DecodeDATA+3)^(0+128),w
  4754  0E20  1D03               	skipz
  4755  0E21  2E24               	goto	u7185
  4756  0E22  083E               	movf	??_DecodeDATA^(0+128),w
  4757  0E23  0240               	subwf	(??_DecodeDATA+2)^(0+128),w
  4758  0E24                     u7185:	
  4759  0E24  1803               	skipnc
  4760  0E25  2E34               	goto	l8103
  4761                           
  4762                           ;ble.c: 343: {
  4763                           ;ble.c: 344: gLedPara.mPara.manualPara.nBrt[idx] -= rxBuf[3];
  4764  0E26  27B1  318C         	fcall	PL126	;call to abstracted procedure
  4765  0E28  0025               	movlb	5	; select bank5
  4766  0E29  0823               	movf	(_rxBuf^(0+640)+3),w
  4767  0E2A  27C4  318C         	fcall	PL178	;call to abstracted procedure
  4768                           
  4769                           ;ble.c: 345: gLedRunPara.nTargetBrt[idx] = gLedPara.mPara.manualPara.nBrt[idx];
  4770  0E2C  0021               	movlb	1	; select bank1
  4771  0E2D  27B1               	fcall	PL126	;call to abstracted procedure
  4772  0E2E  354E               	lslf	DecodeDATA@idx_705^(0+128),w
  4773  0E2F  3E4E               	addlw	(low ((_gLedRunPara| 0+5)))& (0+255)
  4774  0E30  318B  23B3  318C   	fcall	PL22	;call to abstracted procedure
  4775                           
  4776                           ;ble.c: 346: }
  4777  0E33  2E40               	goto	l8105
  4778  0E34                     l8103:	
  4779                           
  4780                           ;ble.c: 347: else
  4781                           ;ble.c: 348: {
  4782                           ;ble.c: 349: gLedPara.mPara.manualPara.nBrt[idx] = 0;
  4783  0E34  354E               	lslf	DecodeDATA@idx_705^(0+128),w
  4784  0E35  3E23               	addlw	(low ((_gLedPara| (0+512)+3)))& (0+255)
  4785  0E36  0086               	movwf	6
  4786  0E37  3002               	movlw	2	; select bank4/5
  4787  0E38  0087               	movwf	7
  4788  0E39  3000               	movlw	0
  4789  0E3A  3FC0               	movwi [0]fsr1
  4790  0E3B  3FC1               	movwi [1]fsr1
  4791                           
  4792                           ;ble.c: 350: gLedRunPara.nTargetBrt[idx] = 0;
  4793  0E3C  354E               	lslf	DecodeDATA@idx_705^(0+128),w
  4794  0E3D  318B  23E9  318C   	fcall	PL92	;call to abstracted procedure
  4795  0E40                     l8105:	
  4796                           
  4797                           ;ble.c: 351: }
  4798                           ;ble.c: 352: gLedRunPara.fPause = 0;
  4799  0E40  0020               	movlb	0	; select bank0
  4800  0E41  1249               	bcf	_gLedRunPara,4	;volatile
  4801                           
  4802                           ;ble.c: 353: gLedRunPara.fStep = 1;
  4803  0E42  16C9               	bsf	_gLedRunPara,5	;volatile
  4804  0E43  2D4B               	goto	L10
  4805  0E44                     l8113:	
  4806                           ;ble.c: 354: gLedRunPara.fSave = 1;
  4807                           
  4808                           
  4809                           ;ble.c: 360: if ( getCRC(rxBuf, 4) == 0x00 )
  4810  0E44  278F  318C         	fcall	PL38	;call to abstracted procedure
  4811  0E46  3004               	movlw	4
  4812  0E47  00A2               	movwf	getCRC@len^(0+128)
  4813  0E48  2747  318C         	fcall	_getCRC
  4814  0E4A  3A00               	xorlw	0
  4815  0E4B  1D03               	skipz
  4816  0E4C  0008               	return
  4817                           
  4818                           ;ble.c: 361: {
  4819                           ;ble.c: 362: if ( rxBuf[2] == 12 || ( gLedPara.mPara.manualPara.fOn && rxBuf[2] <= 12 ) 
      +                          )
  4820  0E4D  300C               	movlw	12
  4821  0E4E  0025               	movlb	5	; select bank5
  4822  0E4F  0622               	xorwf	(_rxBuf^(0+640)+2),w
  4823  0E50  1903               	btfsc	3,2
  4824  0E51  2E5A               	goto	l8121
  4825  0E52  0024               	movlb	4	; select bank4
  4826  0E53  1C21               	btfss	(_gLedPara^(0+512)+1),0	;volatile
  4827  0E54  2E60               	goto	l8133
  4828  0E55  300D               	movlw	13
  4829  0E56  0025               	movlb	5	; select bank5
  4830  0E57  0222               	subwf	(_rxBuf^(0+640)+2),w
  4831  0E58  1803               	skipnc
  4832  0E59  2E60               	goto	l8133
  4833  0E5A                     l8121:	
  4834                           
  4835                           ;ble.c: 363: {
  4836                           ;ble.c: 364: gLedPara.mPara.manualPara.fDyn = rxBuf[2];
  4837  0E5A  0822               	movf	(_rxBuf^(0+640)+2),w
  4838  0E5B  0024               	movlb	4	; select bank4
  4839  0E5C  00A2               	movwf	(_gLedPara^(0+512)+2)	;volatile
  4840                           
  4841                           ;ble.c: 365: gLedRunPara.fDynamic = rxBuf[2];
  4842  0E5D  0025               	movlb	5	; select bank5
  4843  0E5E  0822               	movf	(_rxBuf^(0+640)+2),w
  4844  0E5F  2D0A               	goto	L11
  4845  0E60                     l8133:	
  4846                           ;ble.c: 369: gLedRunPara.fSave = 1;
  4847                           
  4848                           ;ble.c: 368: gLedRunPara.fStep = 0;
  4849                           
  4850                           ;ble.c: 367: gLedRunPara.fPause = 0;
  4851                           
  4852                           ;ble.c: 366: initDynamic();
  4853                           
  4854                           
  4855                           ;ble.c: 373: else if ( rxBuf[2] == 13 && gLedPara.mPara.manualPara.fOn && gLedPara.mPara
      +                          .manualPara.fDyn )
  4856  0E60  300D               	movlw	13
  4857  0E61  0025               	movlb	5	; select bank5
  4858  0E62  0622               	xorwf	(_rxBuf^(0+640)+2),w
  4859  0E63  1D03               	btfss	3,2
  4860  0E64  0008               	return
  4861  0E65  0024               	movlb	4	; select bank4
  4862  0E66  1C21               	btfss	(_gLedPara^(0+512)+1),0	;volatile
  4863  0E67  0008               	return
  4864  0E68  0822               	movf	(_gLedPara^(0+512)+2),w	;volatile
  4865  0E69  1903               	btfsc	3,2
  4866  0E6A  0008               	return
  4867                           
  4868                           ;ble.c: 374: {
  4869                           ;ble.c: 375: gLedRunPara.fPause = !gLedRunPara.fPause;
  4870  0E6B  1003               	clrc
  4871  0E6C  0020               	movlb	0	; select bank0
  4872  0E6D  1E49               	btfss	_gLedRunPara,4	;volatile
  4873  0E6E  1403               	setc
  4874  0E6F  1C03               	btfss	3,0
  4875  0E70  2E74               	goto	u7260
  4876  0E71  0020               	movlb	0	; select bank0
  4877  0E72  1649               	bsf	_gLedRunPara,4	;volatile
  4878  0E73  0008               	return
  4879  0E74                     u7260:	
  4880  0E74  0020               	movlb	0	; select bank0
  4881  0E75  1249               	bcf	_gLedRunPara,4	;volatile
  4882  0E76  0008               	return
  4883  0E77                     l340:	
  4884                           ;ble.c: 380: case 0x0B:
  4885                           
  4886                           
  4887                           ;ble.c: 381: if ( gLedPara.fAuto )
  4888  0E77  0024               	movlb	4	; select bank4
  4889  0E78  1C20               	btfss	_gLedPara^(0+512),0	;volatile
  4890  0E79  0008               	return
  4891                           
  4892                           ;ble.c: 382: {
  4893                           ;ble.c: 383: unsigned char len = 3 + 2 * 4;
  4894  0E7A  300B               	movlw	11
  4895  0E7B  0021               	movlb	1	; select bank1
  4896  0E7C  00C5               	movwf	DecodeDATA@len_706^(0+128)
  4897                           
  4898                           ;ble.c: 384: if ( getCRC(rxBuf, len) == 0x00 )
  4899  0E7D  30A0               	movlw	low _rxBuf
  4900  0E7E  00A0               	movwf	getCRC@pbuf^(0+128)
  4901  0E7F  3002               	movlw	high _rxBuf
  4902  0E80  00A1               	movwf	(getCRC@pbuf+1)^(0+128)
  4903  0E81  0845               	movf	DecodeDATA@len_706^(0+128),w
  4904  0E82  00A2               	movwf	getCRC@len^(0+128)
  4905  0E83  2747  318C         	fcall	_getCRC
  4906  0E85  3A00               	xorlw	0
  4907  0E86  1D03               	skipz
  4908  0E87  0008               	return
  4909                           
  4910                           ;ble.c: 385: {
  4911                           ;ble.c: 386: for ( unsigned char i = 0; i < 4; i++ )
  4912  0E88  01CC               	clrf	DecodeDATA@i_707^(0+128)
  4913  0E89                     l8147:	
  4914  0E89  3004               	movlw	4
  4915  0E8A  024C               	subwf	DecodeDATA@i_707^(0+128),w
  4916  0E8B  1803               	btfsc	3,0
  4917  0E8C  2EA9               	goto	l8161
  4918                           
  4919                           ;ble.c: 387: {
  4920                           ;ble.c: 388: unsigned int val = ( rxBuf[2 + 2 * i] << 8 ) | rxBuf[3 + 2 * i];
  4921  0E8D  354C               	lslf	DecodeDATA@i_707^(0+128),w
  4922  0E8E  3EA3               	addlw	(low ((_rxBuf| (0+512)+3)))& (0+255)
  4923  0E8F  0086               	movwf	6
  4924  0E90  3002               	movlw	2	; select bank5/6
  4925  0E91  0087               	movwf	7
  4926  0E92  354C               	lslf	DecodeDATA@i_707^(0+128),w
  4927  0E93  27AB  318C         	fcall	PL122	;call to abstracted procedure
  4928  0E95  00C7               	movwf	(DecodeDATA@val_708+1)^(0+128)
  4929  0E96  0801               	movf	1,w
  4930  0E97  00C6               	movwf	DecodeDATA@val_708^(0+128)
  4931                           
  4932                           ;ble.c: 389: if ( val <= 1000 )
  4933  0E98  3003               	movlw	3
  4934  0E99  0247               	subwf	(DecodeDATA@val_708+1)^(0+128),w
  4935  0E9A  30E9               	movlw	233
  4936  0E9B  1903               	skipnz
  4937  0E9C  0246               	subwf	DecodeDATA@val_708^(0+128),w
  4938  0E9D  1803               	skipnc
  4939  0E9E  2EA7               	goto	l8157
  4940                           
  4941                           ;ble.c: 390: {
  4942                           ;ble.c: 391: gLedRunPara.nCurrentBrt[i] = val;
  4943  0E9F  354C               	lslf	DecodeDATA@i_707^(0+128),w
  4944  0EA0  3E56               	addlw	(low ((_gLedRunPara| 0+13)))& (0+255)
  4945  0EA1  0086               	movwf	6
  4946  0EA2  0187               	clrf	7
  4947  0EA3  0846               	movf	DecodeDATA@val_708^(0+128),w
  4948  0EA4  3FC0               	movwi [0]fsr1
  4949  0EA5  0847               	movf	(DecodeDATA@val_708+1)^(0+128),w
  4950  0EA6  3FC1               	movwi [1]fsr1
  4951  0EA7                     l8157:	
  4952  0EA7  0ACC               	incf	DecodeDATA@i_707^(0+128),f
  4953  0EA8  2E89               	goto	l8147
  4954  0EA9                     l8161:	
  4955                           
  4956                           ;ble.c: 392: }
  4957                           ;ble.c: 393: }
  4958                           ;ble.c: 394: updatePWM();
  4959  0EA9  3197  2779         	fcall	_updatePWM
  4960                           
  4961                           ;ble.c: 395: gLedRunPara.fPause = 0;
  4962  0EAB  0020               	movlb	0	; select bank0
  4963  0EAC  1249               	bcf	_gLedRunPara,4	;volatile
  4964                           
  4965                           ;ble.c: 396: gLedRunPara.fStep = 0;
  4966  0EAD  12C9               	bcf	_gLedRunPara,5	;volatile
  4967                           
  4968                           ;ble.c: 397: gLedRunPara.fPrev = 1;
  4969  0EAE  15C9               	bsf	_gLedRunPara,3	;volatile
  4970                           
  4971                           ;ble.c: 398: gLedRunPara.nPrevCount = 3;
  4972  0EAF  3003               	movlw	3
  4973  0EB0  00CD               	movwf	_gLedRunPara+4	;volatile
  4974  0EB1  0008               	return
  4975  0EB2                     l8171:	
  4976                           
  4977                           ;ble.c: 404: if ( 0x68 ^ 0x0C == rxBuf[2] )
  4978  0EB2  300C               	movlw	12
  4979  0EB3  0622               	xorwf	(_rxBuf^(0+640)+2),w
  4980  0EB4  1D03               	btfss	3,2
  4981  0EB5  2EB8               	goto	u7320
  4982  0EB6  3001               	movlw	1
  4983  0EB7  2EB9               	goto	u7330
  4984  0EB8                     u7320:	
  4985  0EB8  3000               	movlw	0
  4986  0EB9                     u7330:	
  4987  0EB9  2795  318C         	fcall	PL42	;call to abstracted procedure
  4988  0EBB  1903               	btfsc	3,2
  4989  0EBC  0008               	return
  4990                           
  4991                           ;ble.c: 405: {
  4992                           ;ble.c: 406: gLedRunPara.fPause = 0;
  4993  0EBD  0020               	movlb	0	; select bank0
  4994  0EBE  1249               	bcf	_gLedRunPara,4	;volatile
  4995                           
  4996                           ;ble.c: 407: gLedRunPara.fStep = 0;
  4997  0EBF  12C9               	bcf	_gLedRunPara,5	;volatile
  4998                           
  4999                           ;ble.c: 408: gLedRunPara.fPrev = 0;
  5000  0EC0  11C9               	bcf	_gLedRunPara,3	;volatile
  5001                           
  5002                           ;ble.c: 409: gLedRunPara.nPrevCount = 0;
  5003  0EC1  01CD               	clrf	_gLedRunPara+4	;volatile
  5004  0EC2  0008               	return
  5005  0EC3                     l8177:	
  5006                           
  5007                           ;ble.c: 414: if ( 0x68 ^ 0x0D == rxBuf[2] )
  5008  0EC3  300D               	movlw	13
  5009  0EC4  0622               	xorwf	(_rxBuf^(0+640)+2),w
  5010  0EC5  1D03               	btfss	3,2
  5011  0EC6  2EC9               	goto	u7350
  5012  0EC7  3001               	movlw	1
  5013  0EC8  2ECA               	goto	u7360
  5014  0EC9                     u7350:	
  5015  0EC9  3000               	movlw	0
  5016  0ECA                     u7360:	
  5017  0ECA  2795  318C         	fcall	PL42	;call to abstracted procedure
  5018  0ECC  1903               	btfsc	3,2
  5019  0ECD  0008               	return
  5020                           
  5021                           ;ble.c: 415: {
  5022                           ;ble.c: 416: bleSendDeviceTime();
  5023  0ECE  319E  2E42         	ljmp	l7377
  5024  0ED0                     l8181:	
  5025                           
  5026                           ;ble.c: 421: if ( getCRC(rxBuf, 10) == 0x00 )
  5027  0ED0  278F  318C         	fcall	PL38	;call to abstracted procedure
  5028  0ED2  300A               	movlw	10
  5029  0ED3  00A2               	movwf	getCRC@len^(0+128)
  5030  0ED4  2747  318C         	fcall	_getCRC
  5031  0ED6  3A00               	xorlw	0
  5032  0ED7  1D03               	skipz
  5033  0ED8  0008               	return
  5034                           
  5035                           ;ble.c: 422: {
  5036                           ;ble.c: 423: (INTCONbits.GIE = 0);
  5037  0ED9  138B               	bcf	11,7	;volatile
  5038                           
  5039                           ;ble.c: 424: gCurrentTime.datetime.year = rxBuf[2];
  5040  0EDA  0025               	movlb	5	; select bank5
  5041  0EDB  0822               	movf	(_rxBuf^(0+640)+2),w
  5042  0EDC  0020               	movlb	0	; select bank0
  5043  0EDD  00C0               	movwf	_gCurrentTime	;volatile
  5044                           
  5045                           ;ble.c: 425: gCurrentTime.datetime.month = rxBuf[3];
  5046  0EDE  0025               	movlb	5	; select bank5
  5047  0EDF  0823               	movf	(_rxBuf^(0+640)+3),w
  5048  0EE0  0020               	movlb	0	; select bank0
  5049  0EE1  00C1               	movwf	_gCurrentTime+1	;volatile
  5050                           
  5051                           ;ble.c: 426: gCurrentTime.datetime.day = rxBuf[4];
  5052  0EE2  0025               	movlb	5	; select bank5
  5053  0EE3  0824               	movf	(_rxBuf^(0+640)+4),w
  5054  0EE4  0020               	movlb	0	; select bank0
  5055  0EE5  00C2               	movwf	_gCurrentTime+2	;volatile
  5056                           
  5057                           ;ble.c: 427: gCurrentTime.datetime.wk = rxBuf[5];
  5058  0EE6  0025               	movlb	5	; select bank5
  5059  0EE7  0825               	movf	(_rxBuf^(0+640)+5),w
  5060  0EE8  0020               	movlb	0	; select bank0
  5061  0EE9  00C3               	movwf	_gCurrentTime+3	;volatile
  5062                           
  5063                           ;ble.c: 428: gCurrentTime.datetime.hour = rxBuf[6];
  5064  0EEA  0025               	movlb	5	; select bank5
  5065  0EEB  0826               	movf	(_rxBuf^(0+640)+6),w
  5066  0EEC  0020               	movlb	0	; select bank0
  5067  0EED  00C4               	movwf	_gCurrentTime+4	;volatile
  5068                           
  5069                           ;ble.c: 429: gCurrentTime.datetime.minute = rxBuf[7];
  5070  0EEE  0025               	movlb	5	; select bank5
  5071  0EEF  0827               	movf	(_rxBuf^(0+640)+7),w
  5072  0EF0  0020               	movlb	0	; select bank0
  5073  0EF1  00C5               	movwf	_gCurrentTime+5	;volatile
  5074                           
  5075                           ;ble.c: 430: gCurrentTime.datetime.second = rxBuf[8];
  5076  0EF2  0025               	movlb	5	; select bank5
  5077  0EF3  0828               	movf	(_rxBuf^(0+640)+8),w
  5078  0EF4  0020               	movlb	0	; select bank0
  5079  0EF5  00C6               	movwf	_gCurrentTime+6	;volatile
  5080                           
  5081                           ;ble.c: 431: (INTCONbits.GIE = 1);
  5082  0EF6  178B               	bsf	11,7	;volatile
  5083  0EF7  2CDC               	goto	l7955
  5084  0EF8                     l8191:	
  5085                           
  5086                           ;ble.c: 437: if ( 0x68 ^ 0x0F == rxBuf[2] )
  5087  0EF8  300F               	movlw	15
  5088  0EF9  0622               	xorwf	(_rxBuf^(0+640)+2),w
  5089  0EFA  1D03               	btfss	3,2
  5090  0EFB  2EFE               	goto	u7390
  5091  0EFC  3001               	movlw	1
  5092  0EFD  2EFF               	goto	u7400
  5093  0EFE                     u7390:	
  5094  0EFE  3000               	movlw	0
  5095  0EFF                     u7400:	
  5096  0EFF  2795  318C         	fcall	PL42	;call to abstracted procedure
  5097  0F01  1903               	btfsc	3,2
  5098  0F02  0008               	return
  5099                           
  5100                           ;ble.c: 438: {
  5101                           ;ble.c: 439: gLedRunPara.find = 1;
  5102  0F03  0020               	movlb	0	; select bank0
  5103  0F04  1449               	bsf	_gLedRunPara,0	;volatile
  5104                           
  5105                           ;ble.c: 440: gLedRunPara.nFlashCount = 3;
  5106  0F05  3003               	movlw	3
  5107  0F06  00CB               	movwf	_gLedRunPara+2	;volatile
  5108  0F07  0008               	return
  5109  0F08                     l8197:	
  5110                           
  5111                           ;ble.c: 445: if ( getCRC(rxBuf, 5) == 0x00 )
  5112  0F08  278F  318C         	fcall	PL38	;call to abstracted procedure
  5113  0F0A  3005               	movlw	5
  5114  0F0B  00A2               	movwf	getCRC@len^(0+128)
  5115  0F0C  2747  318C         	fcall	_getCRC
  5116  0F0E  3A00               	xorlw	0
  5117  0F0F  1D03               	skipz
  5118  0F10  0008               	return
  5119                           
  5120                           ;ble.c: 446: {
  5121                           ;ble.c: 447: NVMADR = 8192 - 1;
  5122  0F11  301F               	movlw	31
  5123  0F12  0031               	movlb	17	; select bank17
  5124  0F13  0092               	movwf	18	;volatile
  5125  0F14  30FF               	movlw	255
  5126  0F15  0091               	movwf	17	;volatile
  5127                           
  5128                           ;ble.c: 448: NVMCON1 = 0x94;
  5129  0F16  3094               	movlw	148
  5130  0F17  0095               	movwf	21	;volsfr
  5131                           
  5132                           ;ble.c: 449: NVMCON2 = 0x55;
  5133  0F18  3055               	movlw	85
  5134  0F19  0096               	movwf	22	;volsfr
  5135                           
  5136                           ;ble.c: 450: NVMCON2 = 0xAA;
  5137  0F1A  30AA               	movlw	170
  5138  0F1B  0096               	movwf	22	;volsfr
  5139                           
  5140                           ;ble.c: 451: NVMCON1bits.WR = 1;
  5141  0F1C  1495               	bsf	21,1	;volsfr
  5142                           
  5143                           ;ble.c: 452: __nop();
  5144  0F1D  0000               	nop
  5145                           
  5146                           ;ble.c: 453: __nop();
  5147  0F1E  0000               	nop
  5148  0F1F                     l356:	
  5149                           ;ble.c: 454: while ( NVMCON1bits.WR );
  5150                           
  5151  0F1F  0031               	movlb	17	; select bank17
  5152  0F20  1895               	btfsc	21,1	;volsfr
  5153  0F21  2F1F               	goto	l356
  5154                           
  5155                           ;ble.c: 455: NVMCON1bits.WREN = 0;
  5156  0F22  1115               	bcf	21,2	;volsfr
  5157                           
  5158                           ;ble.c: 456: bleSendData(rxBuf, 5);
  5159  0F23  30A0               	movlw	low _rxBuf
  5160  0F24  0021               	movlb	1	; select bank1
  5161  0F25  00A1               	movwf	bleSendData@frame^(0+128)
  5162  0F26  3002               	movlw	high _rxBuf
  5163  0F27  00A2               	movwf	(bleSendData@frame+1)^(0+128)
  5164  0F28  3005               	movlw	5
  5165  0F29  00A3               	movwf	bleSendData@len^(0+128)
  5166  0F2A  319E  26BF  318C   	fcall	_bleSendData
  5167                           
  5168                           ;ble.c: 457: _delay((unsigned long)((96)*(16000000/4000.0)));
  5169  0F2D  3002               	movlw	2
  5170  0F2E  0021               	movlb	1	; select bank1
  5171  0F2F  00BF               	movwf	(??_DecodeDATA^(0+128)+1)
  5172  0F30  30F3               	movlw	243
  5173  0F31  00BE               	movwf	??_DecodeDATA^(0+128)
  5174  0F32  30B0               	movlw	176
  5175  0F33                     u7917:	
  5176  0F33  0B89               	decfsz	9,f
  5177  0F34  2F33               	goto	u7917
  5178  0F35  0BBE               	decfsz	??_DecodeDATA^(0+128),f
  5179  0F36  2F33               	goto	u7917
  5180  0F37  0BBF               	decfsz	(??_DecodeDATA^(0+128)+1),f
  5181  0F38  2F33               	goto	u7917
  5182  0F39  0000               	nop
  5183  0F3A  0001               	reset	;# 
  5184  0F3B  0008               	return
  5185  0F3C                     l8215:	
  5186  0F3C  0821               	movf	(_rxBuf^(0+640)+1),w
  5187                           
  5188                           ; Switch size 1, requested type "space"
  5189                           ; Number of cases is 15, Range of values is 0 to 15
  5190                           ; switch strategies available:
  5191                           ; Name         Instructions Cycles
  5192                           ; direct_byte           38     6 (fixed)
  5193                           ; simple_byte           46    24 (average)
  5194                           ; jumptable            260     6 (fixed)
  5195                           ;	Chosen strategy is direct_byte
  5196  0F3D  0084               	movwf	4
  5197  0F3E  3010               	movlw	16
  5198  0F3F  0204               	subwf	4,w
  5199  0F40  1803               	skipnc
  5200  0F41  0008               	return
  5201  0F42  3188               	movlp	high S8573
  5202  0F43  3504               	lslf	4,w
  5203  0F44  3E00               	addlw	low S8573
  5204  0F45  0082               	movwf	2
  5205  0F46                     l286:	
  5206  0F46  0008               	return
  5207  0F47                     __end_of_DecodeDATA:	
  5208  0F47                     __ptext50:	
  5209 ;; *************** function _getCRC *****************
  5210 ;; Defined at:
  5211 ;;		line 25 in file "src/ble.c"
  5212 ;; Parameters:    Size  Location     Type
  5213 ;;  pbuf            2    0[BANK1 ] PTR unsigned char 
  5214 ;;		 -> txBuf(48), rxBuf(48), 
  5215 ;;  len             1    2[BANK1 ] unsigned char 
  5216 ;; Auto vars:     Size  Location     Type
  5217 ;;  i               1    6[BANK1 ] unsigned char 
  5218 ;;  result          1    5[BANK1 ] unsigned char 
  5219 ;; Return value:  Size  Location     Type
  5220 ;;                  1    wreg      unsigned char 
  5221 ;; Registers used:
  5222 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5223 ;; Tracked objects:
  5224 ;;		On entry : 1F/1
  5225 ;;		On exit  : 1F/1
  5226 ;;		Unchanged: 0/0
  5227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5228 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  5229 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5230 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  5231 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  5232 ;;Total ram usage:        7 bytes
  5233 ;; Hardware stack levels used:    1
  5234 ;; Hardware stack levels required when called:    4
  5235 ;; This function calls:
  5236 ;;		Nothing
  5237 ;; This function is called by:
  5238 ;;		_bleSendDeviceData
  5239 ;;		_bleSendDeviceTime
  5240 ;;		_DecodeDATA
  5241 ;; This function uses a non-reentrant model
  5242 ;;
  5243                           
  5244                           
  5245                           ;psect for function _getCRC
  5246  0F47                     _getCRC:	
  5247                           
  5248                           ;ble.c: 27: unsigned char result = 0x00;
  5249                           
  5250                           ;incstack = 0
  5251                           ; Regs used in _getCRC: [wreg+fsr1l+fsr1h+status,2+status,0]
  5252  0F47  01A5               	clrf	getCRC@result^(0+128)
  5253                           
  5254                           ;ble.c: 28: for ( unsigned char i = 0; i < len; i++ )
  5255  0F48  01A6               	clrf	getCRC@i^(0+128)
  5256  0F49                     l7023:	
  5257  0F49  0822               	movf	getCRC@len^(0+128),w
  5258  0F4A  0226               	subwf	getCRC@i^(0+128),w
  5259  0F4B  1803               	btfsc	3,0
  5260  0F4C  2F59               	goto	l7025
  5261                           
  5262                           ;ble.c: 29: {
  5263                           ;ble.c: 30: result ^= *( pbuf + i );
  5264  0F4D  0826               	movf	getCRC@i^(0+128),w
  5265  0F4E  00A3               	movwf	??_getCRC^(0+128)
  5266  0F4F  01A4               	clrf	(??_getCRC^(0+128)+1)
  5267  0F50  0720               	addwf	getCRC@pbuf^(0+128),w
  5268  0F51  0086               	movwf	6
  5269  0F52  0824               	movf	(??_getCRC+1)^(0+128),w
  5270  0F53  3D21               	addwfc	(getCRC@pbuf+1)^(0+128),w
  5271  0F54  0087               	movwf	7
  5272  0F55  0801               	movf	1,w
  5273  0F56  06A5               	xorwf	getCRC@result^(0+128),f
  5274  0F57  0AA6               	incf	getCRC@i^(0+128),f
  5275  0F58  2F49               	goto	l7023
  5276  0F59                     l7025:	
  5277                           
  5278                           ;ble.c: 31: }
  5279                           ;ble.c: 32: return result;
  5280  0F59  0825               	movf	getCRC@result^(0+128),w
  5281  0F5A  0008               	return
  5282  0F5B                     __end_of_getCRC:	
  5283  0F5B                     __ptext42:	
  5284 ;; *************** function _turnOffLedRamp *****************
  5285 ;; Defined at:
  5286 ;;		line 186 in file "src/led.c"
  5287 ;; Parameters:    Size  Location     Type
  5288 ;;		None
  5289 ;; Auto vars:     Size  Location     Type
  5290 ;;  i               1    0[BANK1 ] unsigned char 
  5291 ;; Return value:  Size  Location     Type
  5292 ;;                  1    wreg      void 
  5293 ;; Registers used:
  5294 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5295 ;; Tracked objects:
  5296 ;;		On entry : 1B/4
  5297 ;;		On exit  : 1F/1
  5298 ;;		Unchanged: 0/0
  5299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5301 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5303 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5304 ;;Total ram usage:        1 bytes
  5305 ;; Hardware stack levels used:    1
  5306 ;; Hardware stack levels required when called:    4
  5307 ;; This function calls:
  5308 ;;		Nothing
  5309 ;; This function is called by:
  5310 ;;		_DecodeDATA
  5311 ;;		_initLed
  5312 ;; This function uses a non-reentrant model
  5313 ;;
  5314                           
  5315                           
  5316                           ;psect for function _turnOffLedRamp
  5317  0F5B                     _turnOffLedRamp:	
  5318  0F5B                     l7677:	
  5319                           ;incstack = 0
  5320                           ; Regs used in _turnOffLedRamp: [wreg+fsr1l+fsr1h+status,2+status,0]
  5321                           
  5322                           
  5323                           ;led.c: 188: for ( unsigned char i = 0; i < 4; i++ )
  5324  0F5B  0021               	movlb	1	; select bank1
  5325  0F5C  01A0               	clrf	turnOffLedRamp@i^(0+128)
  5326  0F5D                     l7683:	
  5327                           
  5328                           ;led.c: 189: {
  5329                           ;led.c: 190: gLedRunPara.nTargetBrt[i] = 0;
  5330  0F5D  3520               	lslf	turnOffLedRamp@i^(0+128),w
  5331  0F5E  318B  23E9  318C   	fcall	PL92	;call to abstracted procedure
  5332  0F61  3004               	movlw	4
  5333  0F62  0AA0               	incf	turnOffLedRamp@i^(0+128),f
  5334  0F63  0220               	subwf	turnOffLedRamp@i^(0+128),w
  5335  0F64  1803               	btfsc	3,0
  5336  0F65  0008               	return
  5337  0F66  2F5D               	goto	l7683
  5338  0F67                     __end_of_turnOffLedRamp:	
  5339  0F67                     __ptext41:	
  5340 ;; *************** function _turnOnLedRamp *****************
  5341 ;; Defined at:
  5342 ;;		line 175 in file "src/led.c"
  5343 ;; Parameters:    Size  Location     Type
  5344 ;;		None
  5345 ;; Auto vars:     Size  Location     Type
  5346 ;;  i               1    0[BANK1 ] unsigned char 
  5347 ;; Return value:  Size  Location     Type
  5348 ;;                  1    wreg      void 
  5349 ;; Registers used:
  5350 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  5351 ;; Tracked objects:
  5352 ;;		On entry : 1B/4
  5353 ;;		On exit  : 1F/1
  5354 ;;		Unchanged: 0/0
  5355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5357 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5359 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  5360 ;;Total ram usage:        1 bytes
  5361 ;; Hardware stack levels used:    1
  5362 ;; Hardware stack levels required when called:    4
  5363 ;; This function calls:
  5364 ;;		Nothing
  5365 ;; This function is called by:
  5366 ;;		_DecodeDATA
  5367 ;;		_initLed
  5368 ;; This function uses a non-reentrant model
  5369 ;;
  5370                           
  5371                           
  5372                           ;psect for function _turnOnLedRamp
  5373  0F67                     _turnOnLedRamp:	
  5374  0F67                     l7389:	
  5375                           ;incstack = 0
  5376                           ; Regs used in _turnOnLedRamp: [wreg-fsr1h+status,2+status,0]
  5377                           
  5378                           
  5379                           ;led.c: 177: for ( unsigned char i = 0; i < 4; i++ )
  5380  0F67  0021               	movlb	1	; select bank1
  5381  0F68  01A0               	clrf	turnOnLedRamp@i^(0+128)
  5382  0F69                     l7395:	
  5383                           
  5384                           ;led.c: 178: {
  5385                           ;led.c: 179: gLedRunPara.nTargetBrt[i] = gLedPara.mPara.manualPara.nBrt[i];
  5386  0F69  3520               	lslf	turnOnLedRamp@i^(0+128),w
  5387  0F6A  3E23               	addlw	(low ((_gLedPara| (0+512)+3)))& (0+255)
  5388  0F6B  0086               	movwf	6
  5389  0F6C  3002               	movlw	2	; select bank4/5
  5390  0F6D  0087               	movwf	7
  5391  0F6E  3520               	lslf	turnOnLedRamp@i^(0+128),w
  5392  0F6F  3E4E               	addlw	(low ((_gLedRunPara| 0+5)))& (0+255)
  5393  0F70  318B  23B3  318C   	fcall	PL22	;call to abstracted procedure
  5394  0F73  3004               	movlw	4
  5395  0F74  0AA0               	incf	turnOnLedRamp@i^(0+128),f
  5396  0F75  0220               	subwf	turnOnLedRamp@i^(0+128),w
  5397  0F76  1803               	btfsc	3,0
  5398  0F77  0008               	return
  5399  0F78  2F69               	goto	l7395
  5400  0F79                     __end_of_turnOnLedRamp:	
  5401  0F79                     __ptext24:	
  5402 ;; *************** function _TMR0_StartTimer *****************
  5403 ;; Defined at:
  5404 ;;		line 30 in file "src/tmr.c"
  5405 ;; Parameters:    Size  Location     Type
  5406 ;;		None
  5407 ;; Auto vars:     Size  Location     Type
  5408 ;;		None
  5409 ;; Return value:  Size  Location     Type
  5410 ;;                  1    wreg      void 
  5411 ;; Registers used:
  5412 ;;		None
  5413 ;; Tracked objects:
  5414 ;;		On entry : 1F/0
  5415 ;;		On exit  : 1F/0
  5416 ;;		Unchanged: 0/0
  5417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5421 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5422 ;;Total ram usage:        0 bytes
  5423 ;; Hardware stack levels used:    1
  5424 ;; Hardware stack levels required when called:    4
  5425 ;; This function calls:
  5426 ;;		Nothing
  5427 ;; This function is called by:
  5428 ;;		_main
  5429 ;; This function uses a non-reentrant model
  5430 ;;
  5431                           
  5432                           
  5433                           ;psect for function _TMR0_StartTimer
  5434  0F79                     _TMR0_StartTimer:	
  5435                           
  5436                           ;tmr.c: 33: T0CON0bits.T0EN = 1;
  5437                           
  5438                           ;incstack = 0
  5439                           ; Regs used in _TMR0_StartTimer: []
  5440  0F79  1797               	bsf	23,7	;volatile
  5441  0F7A  0008               	return
  5442  0F7B                     __end_of_TMR0_StartTimer:	
  5443  0F7B                     __ptext23:	
  5444 ;; *************** function _TMR2_StartTimer *****************
  5445 ;; Defined at:
  5446 ;;		line 57 in file "src/tmr.c"
  5447 ;; Parameters:    Size  Location     Type
  5448 ;;		None
  5449 ;; Auto vars:     Size  Location     Type
  5450 ;;		None
  5451 ;; Return value:  Size  Location     Type
  5452 ;;                  1    wreg      void 
  5453 ;; Registers used:
  5454 ;;		None
  5455 ;; Tracked objects:
  5456 ;;		On entry : 1F/0
  5457 ;;		On exit  : 1F/0
  5458 ;;		Unchanged: 0/0
  5459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5463 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5464 ;;Total ram usage:        0 bytes
  5465 ;; Hardware stack levels used:    1
  5466 ;; Hardware stack levels required when called:    4
  5467 ;; This function calls:
  5468 ;;		Nothing
  5469 ;; This function is called by:
  5470 ;;		_main
  5471 ;; This function uses a non-reentrant model
  5472 ;;
  5473                           
  5474                           
  5475                           ;psect for function _TMR2_StartTimer
  5476  0F7B                     _TMR2_StartTimer:	
  5477                           
  5478                           ;tmr.c: 60: T2CONbits.TMR2ON = 1;
  5479                           
  5480                           ;incstack = 0
  5481                           ; Regs used in _TMR2_StartTimer: []
  5482  0F7B  151F               	bsf	31,2	;volatile
  5483  0F7C  0008               	return
  5484  0F7D                     __end_of_TMR2_StartTimer:	
  5485  0F7D                     __ptext16:	
  5486 ;; *************** function _findDeviceFlash *****************
  5487 ;; Defined at:
  5488 ;;		line 216 in file "src/led.c"
  5489 ;; Parameters:    Size  Location     Type
  5490 ;;		None
  5491 ;; Auto vars:     Size  Location     Type
  5492 ;;		None
  5493 ;; Return value:  Size  Location     Type
  5494 ;;                  1    wreg      void 
  5495 ;; Registers used:
  5496 ;;		wreg, status,2, status,0, pclath, cstack
  5497 ;; Tracked objects:
  5498 ;;		On entry : 1F/0
  5499 ;;		On exit  : 19/0
  5500 ;;		Unchanged: 0/0
  5501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5505 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5506 ;;Total ram usage:        0 bytes
  5507 ;; Hardware stack levels used:    1
  5508 ;; Hardware stack levels required when called:    6
  5509 ;; This function calls:
  5510 ;;		_turnMaxLed
  5511 ;;		_turnOffLed
  5512 ;; This function is called by:
  5513 ;;		_main
  5514 ;; This function uses a non-reentrant model
  5515 ;;
  5516                           
  5517                           
  5518                           ;psect for function _findDeviceFlash
  5519  0F7D                     _findDeviceFlash:	
  5520                           
  5521                           ;led.c: 218: static unsigned char tog = 0;
  5522                           ;led.c: 219: if ( tog )
  5523                           
  5524                           ;incstack = 0
  5525                           ; Regs used in _findDeviceFlash: [wreg+status,2+status,0+pclath+cstack]
  5526  0F7D  0847               	movf	findDeviceFlash@tog,w
  5527  0F7E  1903               	btfsc	3,2
  5528  0F7F  2F8B               	goto	l481
  5529                           
  5530                           ;led.c: 220: {
  5531                           ;led.c: 221: tog = 0;
  5532  0F80  01C7               	clrf	findDeviceFlash@tog
  5533                           
  5534                           ;led.c: 222: turnOffLed();
  5535  0F81  3197  274B         	fcall	_turnOffLed
  5536                           
  5537                           ;led.c: 223: if ( gLedRunPara.nFlashCount > 0 )
  5538  0F83  0020               	movlb	0	; select bank0
  5539  0F84  084B               	movf	_gLedRunPara+2,w	;volatile
  5540  0F85  1D03               	btfss	3,2
  5541                           
  5542                           ;led.c: 224: {
  5543                           ;led.c: 225: gLedRunPara.nFlashCount--;
  5544  0F86  03CB               	decf	_gLedRunPara+2,f	;volatile
  5545                           
  5546                           ;led.c: 226: }
  5547                           ;led.c: 227: if ( gLedRunPara.nFlashCount == 0 )
  5548  0F87  084B               	movf	_gLedRunPara+2,w	;volatile
  5549  0F88  1903               	btfsc	3,2
  5550                           
  5551                           ;led.c: 228: {
  5552                           ;led.c: 229: gLedRunPara.find = 0;
  5553  0F89  1049               	bcf	_gLedRunPara,0	;volatile
  5554  0F8A  0008               	return
  5555  0F8B                     l481:	
  5556                           
  5557                           ;led.c: 232: else
  5558                           ;led.c: 233: {
  5559                           ;led.c: 234: tog = 1;
  5560  0F8B  01C7               	clrf	findDeviceFlash@tog
  5561  0F8C  0AC7               	incf	findDeviceFlash@tog,f
  5562                           
  5563                           ;led.c: 235: turnMaxLed();
  5564  0F8D  3197  2F5E         	ljmp	l7691
  5565  0F8F                     __end_of_findDeviceFlash:	
  5566  0F8F                     PL38:	
  5567  0F8F  30A0               	movlw	low _rxBuf
  5568  0F90  0021               	movlb	1	; select bank1
  5569  0F91  00A0               	movwf	getCRC@pbuf^(0+128)
  5570  0F92  3002               	movlw	high _rxBuf
  5571  0F93  00A1               	movwf	(getCRC@pbuf+1)^(0+128)
  5572  0F94  0008               	return
  5573  0F95                     __end_ofPL38:	
  5574  0F95                     PL42:	
  5575  0F95  0021               	movlb	1	; select bank1
  5576  0F96  00BE               	movwf	??_DecodeDATA^(0+128)
  5577  0F97  3068               	movlw	104
  5578  0F98  01BF               	clrf	(??_DecodeDATA^(0+128)+1)
  5579  0F99  063E               	xorwf	??_DecodeDATA^(0+128),w
  5580  0F9A  00C0               	movwf	(??_DecodeDATA+2)^(0+128)
  5581  0F9B  083F               	movf	(??_DecodeDATA+1)^(0+128),w
  5582  0F9C  00C1               	movwf	(??_DecodeDATA+3)^(0+128)
  5583  0F9D  0840               	movf	(??_DecodeDATA+2)^(0+128),w
  5584  0F9E  0441               	iorwf	((??_DecodeDATA+2)^(0+128)+1),w
  5585  0F9F  0008               	return
  5586  0FA0                     __end_ofPL42:	
  5587  0FA0                     PL74:	
  5588  0FA0  0086               	movwf	6
  5589  0FA1  3002               	movlw	2	; select bank4/5
  5590  0FA2  0087               	movwf	7
  5591  0FA3  3F40               	moviw [0]fsr1
  5592  0FA4  00BE               	movwf	??_DecodeDATA^(0+128)
  5593  0FA5  3F41               	moviw [1]fsr1
  5594  0FA6  00BF               	movwf	(??_DecodeDATA^(0+128)+1)
  5595  0FA7  0025               	movlb	5	; select bank5
  5596  0FA8  0823               	movf	(_rxBuf^(0+640)+3),w
  5597  0FA9  0021               	movlb	1	; select bank1
  5598  0FAA  0008               	return
  5599  0FAB                     __end_ofPL74:	
  5600  0FAB                     PL122:	
  5601  0FAB  3EA2               	addlw	(low ((_rxBuf| (0+512)+2)))& (0+255)
  5602  0FAC  0084               	movwf	4
  5603  0FAD  3002               	movlw	2	; select bank5/6
  5604  0FAE  0085               	movwf	5
  5605  0FAF  0800               	movf	0,w
  5606  0FB0  0008               	return
  5607  0FB1                     __end_ofPL122:	
  5608  0FB1                     PL126:	
  5609  0FB1  354E               	lslf	DecodeDATA@idx_705^(0+128),w
  5610  0FB2  3E23               	addlw	(low ((_gLedPara| (0+512)+3)))& (0+255)
  5611  0FB3  0086               	movwf	6
  5612  0FB4  3002               	movlw	2	; select bank4/5
  5613  0FB5  0087               	movwf	7
  5614  0FB6  0008               	return
  5615  0FB7                     __end_ofPL126:	
  5616  0FB7                     PL134:	
  5617  0FB7  0020               	movlb	0	; select bank0
  5618  0FB8  1249               	bcf	_gLedRunPara,4	;volatile
  5619  0FB9  12C9               	bcf	_gLedRunPara,5	;volatile
  5620  0FBA  1549               	bsf	_gLedRunPara,2	;volatile
  5621  0FBB  3003               	movlw	3
  5622  0FBC  00CC               	movwf	_gLedRunPara+3	;volatile
  5623  0FBD  0008               	return
  5624  0FBE                     __end_ofPL134:	
  5625  0FBE                     PL154:	
  5626  0FBE  30E8               	movlw	232
  5627  0FBF  00BE               	movwf	??_DecodeDATA^(0+128)
  5628  0FC0  3003               	movlw	3
  5629  0FC1  00BF               	movwf	(??_DecodeDATA^(0+128)+1)
  5630  0FC2  354D               	lslf	DecodeDATA@idx_704^(0+128),w
  5631  0FC3  0008               	return
  5632  0FC4                     __end_ofPL154:	
  5633  0FC4                     PL178:	
  5634  0FC4  0281               	subwf	1,f
  5635  0FC5  3141               	addfsr 1,1
  5636  0FC6  1C03               	skipc
  5637  0FC7  0381               	decf	1,f
  5638  0FC8  317F               	addfsr 1,-1
  5639  0FC9  0008               	return
  5640  0FCA                     __end_ofPL178:	
  5641  0FCA                     __ptext53:	
  5642 ;; *************** function ___lwdiv *****************
  5643 ;; Defined at:
  5644 ;;		line 6 in file "D:\Program Files\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  5645 ;; Parameters:    Size  Location     Type
  5646 ;;  divisor         2    0[BANK1 ] unsigned int 
  5647 ;;  dividend        2    2[BANK1 ] unsigned int 
  5648 ;; Auto vars:     Size  Location     Type
  5649 ;;  quotient        2    5[BANK1 ] unsigned int 
  5650 ;;  counter         1    4[BANK1 ] unsigned char 
  5651 ;; Return value:  Size  Location     Type
  5652 ;;                  2    0[BANK1 ] unsigned int 
  5653 ;; Registers used:
  5654 ;;		wreg, status,2, status,0
  5655 ;; Tracked objects:
  5656 ;;		On entry : 1F/1
  5657 ;;		On exit  : 1F/1
  5658 ;;		Unchanged: 0/0
  5659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5660 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  5661 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  5662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5663 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
  5664 ;;Total ram usage:        7 bytes
  5665 ;; Hardware stack levels used:    1
  5666 ;; Hardware stack levels required when called:    4
  5667 ;; This function calls:
  5668 ;;		Nothing
  5669 ;; This function is called by:
  5670 ;;		_DecodeDATA
  5671 ;; This function uses a non-reentrant model
  5672 ;;
  5673                           
  5674                           
  5675                           ;psect for function ___lwdiv
  5676  0FCA                     ___lwdiv:	
  5677                           
  5678                           ;incstack = 0
  5679                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5680  0FCA  01A5               	clrf	___lwdiv@quotient^(0+128)
  5681  0FCB  01A6               	clrf	(___lwdiv@quotient+1)^(0+128)
  5682  0FCC  0820               	movf	___lwdiv@divisor^(0+128),w
  5683  0FCD  0421               	iorwf	(___lwdiv@divisor+1)^(0+128),w
  5684  0FCE  1903               	btfsc	3,2
  5685  0FCF  2FEA               	goto	l7779
  5686  0FD0  01A4               	clrf	___lwdiv@counter^(0+128)
  5687  0FD1                     L18:	
  5688  0FD1  0AA4               	incf	___lwdiv@counter^(0+128),f
  5689  0FD2  1BA1               	btfsc	(___lwdiv@divisor+1)^(0+128),7
  5690  0FD3  2FD7               	goto	l7767
  5691  0FD4  35A0               	lslf	___lwdiv@divisor^(0+128),f
  5692  0FD5  0DA1               	rlf	(___lwdiv@divisor+1)^(0+128),f
  5693  0FD6  2FD1               	goto	L18
  5694  0FD7                     l7767:	
  5695  0FD7  35A5               	lslf	___lwdiv@quotient^(0+128),f
  5696  0FD8  0DA6               	rlf	(___lwdiv@quotient+1)^(0+128),f
  5697  0FD9  0821               	movf	(___lwdiv@divisor+1)^(0+128),w
  5698  0FDA  0223               	subwf	(___lwdiv@dividend+1)^(0+128),w
  5699  0FDB  1D03               	skipz
  5700  0FDC  2FDF               	goto	u6555
  5701  0FDD  0820               	movf	___lwdiv@divisor^(0+128),w
  5702  0FDE  0222               	subwf	___lwdiv@dividend^(0+128),w
  5703  0FDF                     u6555:	
  5704  0FDF  1C03               	skipc
  5705  0FE0  2FE6               	goto	l7775
  5706  0FE1  0820               	movf	___lwdiv@divisor^(0+128),w
  5707  0FE2  02A2               	subwf	___lwdiv@dividend^(0+128),f
  5708  0FE3  0821               	movf	(___lwdiv@divisor+1)^(0+128),w
  5709  0FE4  3BA3               	subwfb	(___lwdiv@dividend+1)^(0+128),f
  5710  0FE5  1425               	bsf	___lwdiv@quotient^(0+128),0
  5711  0FE6                     l7775:	
  5712  0FE6  36A1               	lsrf	(___lwdiv@divisor+1)^(0+128),f
  5713  0FE7  0CA0               	rrf	___lwdiv@divisor^(0+128),f
  5714  0FE8  0BA4               	decfsz	___lwdiv@counter^(0+128),f
  5715  0FE9  2FD7               	goto	l7767
  5716  0FEA                     l7779:	
  5717  0FEA  0826               	movf	(___lwdiv@quotient+1)^(0+128),w
  5718  0FEB  00A1               	movwf	(?___lwdiv+1)^(0+128)
  5719  0FEC  0825               	movf	___lwdiv@quotient^(0+128),w
  5720  0FED  00A0               	movwf	?___lwdiv^(0+128)
  5721  0FEE  0008               	return
  5722  0FEF                     __end_of___lwdiv:	
  5723  0FEF                     __ptext7:	
  5724 ;; *************** function _initRTC *****************
  5725 ;; Defined at:
  5726 ;;		line 38 in file "src/rtc.c"
  5727 ;; Parameters:    Size  Location     Type
  5728 ;;		None
  5729 ;; Auto vars:     Size  Location     Type
  5730 ;;		None
  5731 ;; Return value:  Size  Location     Type
  5732 ;;                  1    wreg      void 
  5733 ;; Registers used:
  5734 ;;		wreg, status,2
  5735 ;; Tracked objects:
  5736 ;;		On entry : 1A/0
  5737 ;;		On exit  : 1F/0
  5738 ;;		Unchanged: 0/0
  5739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5743 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5744 ;;Total ram usage:        0 bytes
  5745 ;; Hardware stack levels used:    1
  5746 ;; Hardware stack levels required when called:    4
  5747 ;; This function calls:
  5748 ;;		Nothing
  5749 ;; This function is called by:
  5750 ;;		_main
  5751 ;; This function uses a non-reentrant model
  5752 ;;
  5753                           
  5754                           
  5755                           ;psect for function _initRTC
  5756  0FEF                     _initRTC:	
  5757                           
  5758                           ;rtc.c: 40: gCurrentTime.datetime.second = 0;
  5759                           
  5760                           ;incstack = 0
  5761                           ; Regs used in _initRTC: [wreg+status,2]
  5762  0FEF  0020               	movlb	0	; select bank0
  5763  0FF0  01C6               	clrf	_gCurrentTime+6	;volatile
  5764                           
  5765                           ;rtc.c: 41: gCurrentTime.datetime.minute = 0;
  5766  0FF1  01C5               	clrf	_gCurrentTime+5	;volatile
  5767                           
  5768                           ;rtc.c: 42: gCurrentTime.datetime.hour = 0;
  5769  0FF2  01C4               	clrf	_gCurrentTime+4	;volatile
  5770                           
  5771                           ;rtc.c: 43: gCurrentTime.datetime.wk = 0;
  5772  0FF3  01C3               	clrf	_gCurrentTime+3	;volatile
  5773                           
  5774                           ;rtc.c: 44: gCurrentTime.datetime.day = 1;
  5775  0FF4  3001               	movlw	1
  5776  0FF5  00C2               	movwf	_gCurrentTime+2	;volatile
  5777                           
  5778                           ;rtc.c: 45: gCurrentTime.datetime.month = 1;
  5779  0FF6  00C1               	movwf	_gCurrentTime+1	;volatile
  5780                           
  5781                           ;rtc.c: 46: gCurrentTime.datetime.year = 0;
  5782  0FF7  01C0               	clrf	_gCurrentTime	;volatile
  5783  0FF8  0008               	return
  5784  0FF9                     __end_of_initRTC:	
  5785  0FF9                     __ptext6:	
  5786 ;; *************** function _preview *****************
  5787 ;; Defined at:
  5788 ;;		line 239 in file "src/led.c"
  5789 ;; Parameters:    Size  Location     Type
  5790 ;;		None
  5791 ;; Auto vars:     Size  Location     Type
  5792 ;;		None
  5793 ;; Return value:  Size  Location     Type
  5794 ;;                  1    wreg      void 
  5795 ;; Registers used:
  5796 ;;		wreg, status,2, status,0
  5797 ;; Tracked objects:
  5798 ;;		On entry : 1F/0
  5799 ;;		On exit  : 1F/0
  5800 ;;		Unchanged: 0/0
  5801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5805 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5806 ;;Total ram usage:        0 bytes
  5807 ;; Hardware stack levels used:    1
  5808 ;; Hardware stack levels required when called:    4
  5809 ;; This function calls:
  5810 ;;		Nothing
  5811 ;; This function is called by:
  5812 ;;		_main
  5813 ;; This function uses a non-reentrant model
  5814 ;;
  5815                           
  5816                           
  5817                           ;psect for function _preview
  5818  0FF9                     _preview:	
  5819                           
  5820                           ;led.c: 241: if ( gLedRunPara.nPrevCount > 0 )
  5821                           
  5822                           ;incstack = 0
  5823                           ; Regs used in _preview: [wreg+status,2+status,0]
  5824  0FF9  084D               	movf	_gLedRunPara+4,w	;volatile
  5825  0FFA  1D03               	btfss	3,2
  5826                           
  5827                           ;led.c: 242: {
  5828                           ;led.c: 243: gLedRunPara.nPrevCount--;
  5829  0FFB  03CD               	decf	_gLedRunPara+4,f	;volatile
  5830                           
  5831                           ;led.c: 244: }
  5832                           ;led.c: 245: if ( gLedRunPara.nPrevCount == 0 )
  5833  0FFC  084D               	movf	_gLedRunPara+4,w	;volatile
  5834  0FFD  1903               	btfsc	3,2
  5835                           
  5836                           ;led.c: 246: {
  5837                           ;led.c: 247: gLedRunPara.fPrev = 0;
  5838  0FFE  11C9               	bcf	_gLedRunPara,3	;volatile
  5839  0FFF  0008               	return
  5840  1000                     __end_of_preview:	
  5841                           
  5842                           	psect	bssBANK0
  5843  0040                     __pbssBANK0:	
  5844  0040                     _gCurrentTime:	
  5845  0040                     	ds	7
  5846  0047                     findDeviceFlash@tog:	
  5847  0047                     	ds	1
  5848  0048                     INTERRUPT_interruptManager@cnt:	
  5849  0048                     	ds	1
  5850  0049                     _gLedRunPara:	
  5851  0049                     	ds	21
  5852                           
  5853                           	psect	bssBANK1
  5854  00E8                     __pbssBANK1:	
  5855  00E8                     _nRcvIdx:	
  5856  00E8                     	ds	1
  5857                           
  5858                           	psect	dataBANK1
  5859  00E1                     __pdataBANK1:	
  5860  00E1                     BLE_SendCMD@F7932:	
  5861  00E1                     	ds	7
  5862                           
  5863                           	psect	dataBANK2
  5864  0152                     __pdataBANK2:	
  5865  0152                     checkDevID@F7939:	
  5866  0152                     	ds	17
  5867  0163                     _MONTH_DAY:	
  5868  0163                     	ds	12
  5869                           
  5870                           	psect	bssBANK3
  5871  01A0                     __pbssBANK3:	
  5872  01A0                     _gDynPara:	
  5873  01A0                     	ds	34
  5874                           
  5875                           	psect	bssBANK4
  5876  0220                     __pbssBANK4:	
  5877  0220                     _gLedPara:	
  5878  0220                     	ds	49
  5879                           
  5880                           	psect	bssBANK5
  5881  02A0                     __pbssBANK5:	
  5882  02A0                     _rxBuf:	
  5883  02A0                     	ds	48
  5884                           
  5885                           	psect	bssBANK6
  5886  0320                     __pbssBANK6:	
  5887  0320                     _txBuf:	
  5888  0320                     	ds	48
  5889                           
  5890                           	psect	inittext
  5891  1C87                     init_ram:	
  5892  1C87  00FE               	movwf	126
  5893  1C88                     initloop:	
  5894  1C88  0012               	moviw fsr0++
  5895  1C89  001E               	movwi fsr1++
  5896  1C8A  0BFE               	decfsz	126,f
  5897  1C8B  2C88               	goto	initloop
  5898  1C8C  3400               	retlw	0
  5899                           
  5900                           	psect	clrtext
  5901  1C81                     clear_ram0:	
  5902                           ;	Called with FSR0 containing the base address, and
  5903                           ;	WREG with the size to clear
  5904                           
  5905  1C81  0064               	clrwdt	;clear the watchdog before getting into this loop
  5906  1C82                     clrloop0:	
  5907  1C82  0180               	clrf	0	;clear RAM location pointed to by FSR
  5908  1C83  3101               	addfsr 0,1
  5909  1C84  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  5910  1C85  2C82               	goto	clrloop0	;have we reached the end yet?
  5911  1C86  3400               	retlw	0	;all done for this memory range, return
  5912                           
  5913                           	psect	cstackBANK2
  5914  0120                     __pcstackBANK2:	
  5915  0120                     readLedPara@addr:	
  5916  0120                     autoRun@val:	
  5917                           ; 1 bytes @ 0x0
  5918                           
  5919                           
  5920                           ; 16 bytes @ 0x0
  5921  0120                     	ds	1
  5922  0121                     readLedPara@para:	
  5923                           
  5924                           ; 49 bytes @ 0x1
  5925  0121                     	ds	15
  5926  0130                     autoRun@tr:	
  5927                           
  5928                           ; 8 bytes @ 0x10
  5929  0130                     	ds	8
  5930  0138                     autoRun@dbrt:	
  5931                           
  5932                           ; 1 bytes @ 0x18
  5933  0138                     	ds	1
  5934  0139                     autoRun@duration:	
  5935                           
  5936                           ; 2 bytes @ 0x19
  5937  0139                     	ds	2
  5938  013B                     autoRun@sec:	
  5939                           
  5940                           ; 1 bytes @ 0x1B
  5941  013B                     	ds	1
  5942  013C                     autoRun@auto_dyn_start:	
  5943                           
  5944                           ; 2 bytes @ 0x1C
  5945  013C                     	ds	2
  5946  013E                     autoRun@auto_dyn_end:	
  5947                           
  5948                           ; 2 bytes @ 0x1E
  5949  013E                     	ds	2
  5950  0140                     autoRun@dt:	
  5951                           
  5952                           ; 4 bytes @ 0x20
  5953  0140                     	ds	4
  5954  0144                     autoRun@j:	
  5955                           
  5956                           ; 1 bytes @ 0x24
  5957  0144                     	ds	1
  5958  0145                     autoRun@et:	
  5959                           
  5960                           ; 2 bytes @ 0x25
  5961  0145                     	ds	2
  5962  0147                     autoRun@st:	
  5963                           
  5964                           ; 2 bytes @ 0x27
  5965  0147                     	ds	2
  5966  0149                     autoRun@ct:	
  5967                           
  5968                           ; 2 bytes @ 0x29
  5969  0149                     	ds	2
  5970  014B                     autoRun@k:	
  5971                           
  5972                           ; 1 bytes @ 0x2B
  5973  014B                     	ds	1
  5974  014C                     autoRun@i:	
  5975                           
  5976                           ; 1 bytes @ 0x2C
  5977  014C                     	ds	6
  5978                           
  5979                           	psect	cstackBANK1
  5980  00A0                     __pcstackBANK1:	
  5981  00A0                     ??_initRTC:	
  5982  00A0                     ??_TMR0_StartTimer:	
  5983                           ; 1 bytes @ 0x0
  5984                           
  5985  00A0                     ??_TMR2_StartTimer:	
  5986                           ; 1 bytes @ 0x0
  5987                           
  5988  00A0                     ??_preview:	
  5989                           ; 1 bytes @ 0x0
  5990                           
  5991  00A0                     ??_PIN_MANAGER_Initialize:	
  5992                           ; 1 bytes @ 0x0
  5993                           
  5994  00A0                     ??_PWM1_Initialize:	
  5995                           ; 1 bytes @ 0x0
  5996                           
  5997  00A0                     ??_PWM2_Initialize:	
  5998                           ; 1 bytes @ 0x0
  5999                           
  6000  00A0                     ??_PWM4_Initialize:	
  6001                           ; 1 bytes @ 0x0
  6002                           
  6003  00A0                     ??_PWM3_Initialize:	
  6004                           ; 1 bytes @ 0x0
  6005                           
  6006  00A0                     ??_TMR2_Initialize:	
  6007                           ; 1 bytes @ 0x0
  6008                           
  6009  00A0                     ??_TMR0_Initialize:	
  6010                           ; 1 bytes @ 0x0
  6011                           
  6012  00A0                     ??_turnOnLedRamp:	
  6013                           ; 1 bytes @ 0x0
  6014                           
  6015  00A0                     ??_turnOffLedRamp:	
  6016                           ; 1 bytes @ 0x0
  6017                           
  6018  00A0                     ?_PWM1_LoadDutyValue:	
  6019                           ; 1 bytes @ 0x0
  6020                           
  6021  00A0                     ?_PWM2_LoadDutyValue:	
  6022                           ; 1 bytes @ 0x0
  6023                           
  6024  00A0                     ?_PWM3_LoadDutyValue:	
  6025                           ; 1 bytes @ 0x0
  6026                           
  6027  00A0                     ?_PWM4_LoadDutyValue:	
  6028                           ; 1 bytes @ 0x0
  6029                           
  6030  00A0                     ??_EUSART_Initialize:	
  6031                           ; 1 bytes @ 0x0
  6032                           
  6033  00A0                     ??_eusartSendByte:	
  6034                           ; 1 bytes @ 0x0
  6035                           
  6036  00A0                     ??_OSCILLATOR_Initialize:	
  6037                           ; 1 bytes @ 0x0
  6038                           
  6039  00A0                     ?_getCRC:	
  6040                           ; 1 bytes @ 0x0
  6041                           
  6042  00A0                     ??_updateDynamic:	
  6043                           ; 1 bytes @ 0x0
  6044                           
  6045  00A0                     ?_DATAEE_WriteByte:	
  6046                           ; 1 bytes @ 0x0
  6047                           
  6048  00A0                     ?_DATAEE_ReadByte:	
  6049                           ; 1 bytes @ 0x0
  6050                           
  6051  00A0                     ?___wmul:	
  6052                           ; 1 bytes @ 0x0
  6053                           
  6054  00A0                     ?___lwdiv:	
  6055                           ; 2 bytes @ 0x0
  6056                           
  6057  00A0                     ?___ftpack:	
  6058                           ; 2 bytes @ 0x0
  6059                           
  6060  00A0                     ?___lmul:	
  6061                           ; 3 bytes @ 0x0
  6062                           
  6063  00A0                     eusartSendByte@byte:	
  6064                           ; 4 bytes @ 0x0
  6065                           
  6066  00A0                     turnOnLedRamp@i:	
  6067                           ; 1 bytes @ 0x0
  6068                           
  6069  00A0                     turnOffLedRamp@i:	
  6070                           ; 1 bytes @ 0x0
  6071                           
  6072  00A0                     PIN_MANAGER_Initialize@state:	
  6073                           ; 1 bytes @ 0x0
  6074                           
  6075  00A0                     getCRC@pbuf:	
  6076                           ; 1 bytes @ 0x0
  6077                           
  6078  00A0                     DATAEE_WriteByte@bAdd:	
  6079                           ; 2 bytes @ 0x0
  6080                           
  6081  00A0                     DATAEE_ReadByte@bAdd:	
  6082                           ; 2 bytes @ 0x0
  6083                           
  6084  00A0                     PWM1_LoadDutyValue@dutyValue:	
  6085                           ; 2 bytes @ 0x0
  6086                           
  6087  00A0                     PWM2_LoadDutyValue@dutyValue:	
  6088                           ; 2 bytes @ 0x0
  6089                           
  6090  00A0                     PWM3_LoadDutyValue@dutyValue:	
  6091                           ; 2 bytes @ 0x0
  6092                           
  6093  00A0                     PWM4_LoadDutyValue@dutyValue:	
  6094                           ; 2 bytes @ 0x0
  6095                           
  6096  00A0                     ___wmul@multiplier:	
  6097                           ; 2 bytes @ 0x0
  6098                           
  6099  00A0                     ___lwdiv@divisor:	
  6100                           ; 2 bytes @ 0x0
  6101                           
  6102  00A0                     ___ftpack@arg:	
  6103                           ; 2 bytes @ 0x0
  6104                           
  6105  00A0                     ___lmul@multiplier:	
  6106                           ; 3 bytes @ 0x0
  6107                           
  6108                           
  6109                           ; 4 bytes @ 0x0
  6110  00A0                     	ds	1
  6111  00A1                     ??_SYSTEM_Initialize:	
  6112  00A1                     ?_BLE_SendCMD:	
  6113                           ; 1 bytes @ 0x1
  6114                           
  6115  00A1                     ?_bleSendData:	
  6116                           ; 1 bytes @ 0x1
  6117                           
  6118  00A1                     BLE_SendCMD@pBuf:	
  6119                           ; 1 bytes @ 0x1
  6120                           
  6121  00A1                     bleSendData@frame:	
  6122                           ; 2 bytes @ 0x1
  6123                           
  6124                           
  6125                           ; 2 bytes @ 0x1
  6126  00A1                     	ds	1
  6127  00A2                     ??_findDeviceFlash:	
  6128  00A2                     ??_updatePWM:	
  6129                           ; 1 bytes @ 0x2
  6130                           
  6131  00A2                     ??_PWM1_LoadDutyValue:	
  6132                           ; 1 bytes @ 0x2
  6133                           
  6134  00A2                     ??_PWM2_LoadDutyValue:	
  6135                           ; 1 bytes @ 0x2
  6136                           
  6137  00A2                     ??_PWM3_LoadDutyValue:	
  6138                           ; 1 bytes @ 0x2
  6139                           
  6140  00A2                     ??_PWM4_LoadDutyValue:	
  6141                           ; 1 bytes @ 0x2
  6142                           
  6143  00A2                     ??_turnMaxLed:	
  6144                           ; 1 bytes @ 0x2
  6145                           
  6146  00A2                     ??_turnOffLed:	
  6147                           ; 1 bytes @ 0x2
  6148                           
  6149  00A2                     ??_DATAEE_ReadByte:	
  6150                           ; 1 bytes @ 0x2
  6151                           
  6152  00A2                     ??_readByte:	
  6153                           ; 1 bytes @ 0x2
  6154                           
  6155  00A2                     getCRC@len:	
  6156                           ; 1 bytes @ 0x2
  6157                           
  6158  00A2                     updateDynamic@i:	
  6159                           ; 1 bytes @ 0x2
  6160                           
  6161  00A2                     DATAEE_WriteByte@bData:	
  6162                           ; 1 bytes @ 0x2
  6163                           
  6164  00A2                     readByte@addr:	
  6165                           ; 1 bytes @ 0x2
  6166                           
  6167  00A2                     ___wmul@multiplicand:	
  6168                           ; 1 bytes @ 0x2
  6169                           
  6170  00A2                     ___lwdiv@dividend:	
  6171                           ; 2 bytes @ 0x2
  6172                           
  6173                           
  6174                           ; 2 bytes @ 0x2
  6175  00A2                     	ds	1
  6176  00A3                     ??_getCRC:	
  6177  00A3                     ??_BLE_SendCMD:	
  6178                           ; 1 bytes @ 0x3
  6179                           
  6180  00A3                     ??_DATAEE_WriteByte:	
  6181                           ; 1 bytes @ 0x3
  6182                           
  6183  00A3                     bleSendData@len:	
  6184                           ; 1 bytes @ 0x3
  6185                           
  6186  00A3                     DATAEE_WriteByte@GIEBitValue:	
  6187                           ; 1 bytes @ 0x3
  6188                           
  6189  00A3                     readByte@result:	
  6190                           ; 1 bytes @ 0x3
  6191                           
  6192  00A3                     ___ftpack@exp:	
  6193                           ; 1 bytes @ 0x3
  6194                           
  6195                           
  6196                           ; 1 bytes @ 0x3
  6197  00A3                     	ds	1
  6198  00A4                     ??_bleSendData:	
  6199  00A4                     ?_writeByte:	
  6200                           ; 1 bytes @ 0x4
  6201                           
  6202  00A4                     ?_readBuffer:	
  6203                           ; 1 bytes @ 0x4
  6204                           
  6205  00A4                     ??___wmul:	
  6206                           ; 1 bytes @ 0x4
  6207                           
  6208  00A4                     ??___lwdiv:	
  6209                           ; 1 bytes @ 0x4
  6210                           
  6211  00A4                     writeByte@byte:	
  6212                           ; 1 bytes @ 0x4
  6213                           
  6214  00A4                     readBuffer@buf:	
  6215                           ; 1 bytes @ 0x4
  6216                           
  6217  00A4                     ___ftpack@sign:	
  6218                           ; 1 bytes @ 0x4
  6219                           
  6220  00A4                     ___lwdiv@counter:	
  6221                           ; 1 bytes @ 0x4
  6222                           
  6223  00A4                     ___wmul@product:	
  6224                           ; 1 bytes @ 0x4
  6225                           
  6226  00A4                     ___lmul@multiplicand:	
  6227                           ; 2 bytes @ 0x4
  6228                           
  6229  00A4                     BLE_SendCMD@ack:	
  6230                           ; 4 bytes @ 0x4
  6231                           
  6232                           
  6233                           ; 7 bytes @ 0x4
  6234  00A4                     	ds	1
  6235  00A5                     ??___ftpack:	
  6236  00A5                     ??_writeByte:	
  6237                           ; 1 bytes @ 0x5
  6238                           
  6239  00A5                     getCRC@result:	
  6240                           ; 1 bytes @ 0x5
  6241                           
  6242  00A5                     writeByte@addr:	
  6243                           ; 1 bytes @ 0x5
  6244                           
  6245  00A5                     readBuffer@len:	
  6246                           ; 1 bytes @ 0x5
  6247                           
  6248  00A5                     ___lwdiv@quotient:	
  6249                           ; 1 bytes @ 0x5
  6250                           
  6251                           
  6252                           ; 2 bytes @ 0x5
  6253  00A5                     	ds	1
  6254  00A6                     ?_writeBuffer:	
  6255  00A6                     ??_readBuffer:	
  6256                           ; 1 bytes @ 0x6
  6257                           
  6258  00A6                     getCRC@i:	
  6259                           ; 1 bytes @ 0x6
  6260                           
  6261  00A6                     writeBuffer@buf:	
  6262                           ; 1 bytes @ 0x6
  6263                           
  6264                           
  6265                           ; 1 bytes @ 0x6
  6266  00A6                     	ds	1
  6267  00A7                     ??_bleSendDeviceData:	
  6268  00A7                     ??_bleSendDeviceTime:	
  6269                           ; 1 bytes @ 0x7
  6270                           
  6271  00A7                     bleSendDeviceTime@len:	
  6272                           ; 1 bytes @ 0x7
  6273                           
  6274  00A7                     writeBuffer@len:	
  6275                           ; 1 bytes @ 0x7
  6276                           
  6277  00A7                     readBuffer@addr:	
  6278                           ; 1 bytes @ 0x7
  6279                           
  6280                           
  6281                           ; 1 bytes @ 0x7
  6282  00A7                     	ds	1
  6283  00A8                     ??_writeBuffer:	
  6284  00A8                     ??___lmul:	
  6285                           ; 1 bytes @ 0x8
  6286                           
  6287  00A8                     ?___lwtoft:	
  6288                           ; 1 bytes @ 0x8
  6289                           
  6290  00A8                     bleSendDeviceData@len:	
  6291                           ; 3 bytes @ 0x8
  6292                           
  6293  00A8                     bleSendDeviceTime@i:	
  6294                           ; 1 bytes @ 0x8
  6295                           
  6296  00A8                     readBuffer@i:	
  6297                           ; 1 bytes @ 0x8
  6298                           
  6299  00A8                     ___lwtoft@c:	
  6300                           ; 1 bytes @ 0x8
  6301                           
  6302  00A8                     ___lmul@product:	
  6303                           ; 2 bytes @ 0x8
  6304                           
  6305                           
  6306                           ; 4 bytes @ 0x8
  6307  00A8                     	ds	1
  6308  00A9                     ?_readLedPara:	
  6309  00A9                     bleSendDeviceData@i:	
  6310                           ; 49 bytes @ 0x9
  6311                           
  6312  00A9                     writeBuffer@addr:	
  6313                           ; 1 bytes @ 0x9
  6314                           
  6315                           
  6316                           ; 1 bytes @ 0x9
  6317  00A9                     	ds	1
  6318  00AA                     writeBuffer@i:	
  6319                           
  6320                           ; 1 bytes @ 0xA
  6321  00AA                     	ds	1
  6322  00AB                     ?_writeLedPara:	
  6323  00AB                     ??___lwtoft:	
  6324                           ; 1 bytes @ 0xB
  6325                           
  6326  00AB                     ?___ftmul:	
  6327                           ; 1 bytes @ 0xB
  6328                           
  6329  00AB                     BLE_SendCMD@cnt:	
  6330                           ; 3 bytes @ 0xB
  6331                           
  6332  00AB                     ___ftmul@f1:	
  6333                           ; 2 bytes @ 0xB
  6334                           
  6335  00AB                     writeLedPara@para:	
  6336                           ; 3 bytes @ 0xB
  6337                           
  6338                           
  6339                           ; 49 bytes @ 0xB
  6340  00AB                     	ds	1
  6341  00AC                     ?___lldiv:	
  6342  00AC                     ___lldiv@divisor:	
  6343                           ; 4 bytes @ 0xC
  6344                           
  6345                           
  6346                           ; 4 bytes @ 0xC
  6347  00AC                     	ds	1
  6348  00AD                     BLE_SendCMD@rev:	
  6349                           
  6350                           ; 1 bytes @ 0xD
  6351  00AD                     	ds	1
  6352  00AE                     BLE_SendCMD@index:	
  6353  00AE                     ___ftmul@f2:	
  6354                           ; 1 bytes @ 0xE
  6355                           
  6356                           
  6357                           ; 3 bytes @ 0xE
  6358  00AE                     	ds	1
  6359  00AF                     ??_checkDevID:	
  6360                           
  6361                           ; 1 bytes @ 0xF
  6362  00AF                     	ds	1
  6363  00B0                     ___lldiv@dividend:	
  6364  00B0                     checkDevID@dev:	
  6365                           ; 4 bytes @ 0x10
  6366                           
  6367                           
  6368                           ; 17 bytes @ 0x10
  6369  00B0                     	ds	1
  6370  00B1                     ??___ftmul:	
  6371                           
  6372                           ; 1 bytes @ 0x11
  6373  00B1                     	ds	3
  6374  00B4                     ??___lldiv:	
  6375  00B4                     ___ftmul@exp:	
  6376                           ; 1 bytes @ 0x14
  6377                           
  6378  00B4                     ___lldiv@quotient:	
  6379                           ; 1 bytes @ 0x14
  6380                           
  6381                           
  6382                           ; 4 bytes @ 0x14
  6383  00B4                     	ds	1
  6384  00B5                     ___ftmul@f3_as_product:	
  6385                           
  6386                           ; 3 bytes @ 0x15
  6387  00B5                     	ds	3
  6388  00B8                     ___ftmul@cntr:	
  6389  00B8                     ___lldiv@counter:	
  6390                           ; 1 bytes @ 0x18
  6391                           
  6392                           
  6393                           ; 1 bytes @ 0x18
  6394  00B8                     	ds	1
  6395  00B9                     ___ftmul@sign:	
  6396                           
  6397                           ; 1 bytes @ 0x19
  6398  00B9                     	ds	1
  6399  00BA                     ??_initDynamic:	
  6400                           
  6401                           ; 1 bytes @ 0x1A
  6402  00BA                     	ds	2
  6403  00BC                     initDynamic@i_943:	
  6404                           
  6405                           ; 1 bytes @ 0x1C
  6406  00BC                     	ds	1
  6407  00BD                     initDynamic@i:	
  6408                           
  6409                           ; 1 bytes @ 0x1D
  6410  00BD                     	ds	1
  6411  00BE                     ??_DecodeDATA:	
  6412  00BE                     ??_autoRun:	
  6413                           ; 1 bytes @ 0x1E
  6414                           
  6415                           
  6416                           ; 1 bytes @ 0x1E
  6417  00BE                     	ds	3
  6418  00C1                     checkDevID@rev:	
  6419                           
  6420                           ; 1 bytes @ 0x21
  6421  00C1                     	ds	1
  6422  00C2                     checkDevID@cnt:	
  6423                           
  6424                           ; 2 bytes @ 0x22
  6425  00C2                     	ds	1
  6426  00C3                     DecodeDATA@idx:	
  6427                           
  6428                           ; 1 bytes @ 0x23
  6429  00C3                     	ds	1
  6430  00C4                     checkDevID@index:	
  6431  00C4                     DecodeDATA@len_702:	
  6432                           ; 1 bytes @ 0x24
  6433                           
  6434                           
  6435                           ; 1 bytes @ 0x24
  6436  00C4                     	ds	1
  6437  00C5                     ??_initBLE:	
  6438  00C5                     DecodeDATA@len_706:	
  6439                           ; 1 bytes @ 0x25
  6440                           
  6441                           
  6442                           ; 1 bytes @ 0x25
  6443  00C5                     	ds	1
  6444  00C6                     DecodeDATA@val_708:	
  6445                           
  6446                           ; 2 bytes @ 0x26
  6447  00C6                     	ds	2
  6448  00C8                     DecodeDATA@val:	
  6449                           
  6450                           ; 2 bytes @ 0x28
  6451  00C8                     	ds	2
  6452  00CA                     DecodeDATA@i_703:	
  6453                           
  6454                           ; 1 bytes @ 0x2A
  6455  00CA                     	ds	1
  6456  00CB                     DecodeDATA@i_701:	
  6457                           
  6458                           ; 1 bytes @ 0x2B
  6459  00CB                     	ds	1
  6460  00CC                     DecodeDATA@i_707:	
  6461                           
  6462                           ; 1 bytes @ 0x2C
  6463  00CC                     	ds	1
  6464  00CD                     DecodeDATA@idx_704:	
  6465                           
  6466                           ; 1 bytes @ 0x2D
  6467  00CD                     	ds	1
  6468  00CE                     DecodeDATA@idx_705:	
  6469                           
  6470                           ; 1 bytes @ 0x2E
  6471  00CE                     	ds	1
  6472  00CF                     DecodeDATA@i:	
  6473                           
  6474                           ; 1 bytes @ 0x2F
  6475  00CF                     	ds	11
  6476  00DA                     ??_readLedPara:	
  6477                           
  6478                           ; 1 bytes @ 0x3A
  6479  00DA                     	ds	1
  6480  00DB                     ??_initLed:	
  6481                           
  6482                           ; 1 bytes @ 0x3B
  6483  00DB                     	ds	1
  6484  00DC                     ??_writeLedPara:	
  6485  00DC                     writeLedPara@addr:	
  6486                           ; 1 bytes @ 0x3C
  6487                           
  6488                           
  6489                           ; 1 bytes @ 0x3C
  6490  00DC                     	ds	1
  6491  00DD                     ??_saveLedPara:	
  6492                           
  6493                           ; 1 bytes @ 0x3D
  6494  00DD                     	ds	1
  6495  00DE                     initLed@j:	
  6496                           
  6497                           ; 1 bytes @ 0x3E
  6498  00DE                     	ds	1
  6499  00DF                     initLed@i:	
  6500                           
  6501                           ; 1 bytes @ 0x3F
  6502  00DF                     	ds	1
  6503  00E0                     ??_main:	
  6504                           
  6505                           ; 1 bytes @ 0x40
  6506  00E0                     	ds	1
  6507                           
  6508                           	psect	cstackCOMMON
  6509  0070                     __pcstackCOMMON:	
  6510  0070                     ?_SYSTEM_Initialize:	
  6511  0070                     ?_initBLE:	
  6512                           ; 1 bytes @ 0x0
  6513                           
  6514  0070                     ?_initLed:	
  6515                           ; 1 bytes @ 0x0
  6516                           
  6517  0070                     ?_initRTC:	
  6518                           ; 1 bytes @ 0x0
  6519                           
  6520  0070                     ?_TMR0_StartTimer:	
  6521                           ; 1 bytes @ 0x0
  6522                           
  6523  0070                     ?_TMR2_StartTimer:	
  6524                           ; 1 bytes @ 0x0
  6525                           
  6526  0070                     ?_DecodeDATA:	
  6527                           ; 1 bytes @ 0x0
  6528                           
  6529  0070                     ?_findDeviceFlash:	
  6530                           ; 1 bytes @ 0x0
  6531                           
  6532  0070                     ?_preview:	
  6533                           ; 1 bytes @ 0x0
  6534                           
  6535  0070                     ?_autoRun:	
  6536                           ; 1 bytes @ 0x0
  6537                           
  6538  0070                     ?_saveLedPara:	
  6539                           ; 1 bytes @ 0x0
  6540                           
  6541  0070                     ?_PIN_MANAGER_Initialize:	
  6542                           ; 1 bytes @ 0x0
  6543                           
  6544  0070                     ?_PWM1_Initialize:	
  6545                           ; 1 bytes @ 0x0
  6546                           
  6547  0070                     ?_PWM2_Initialize:	
  6548                           ; 1 bytes @ 0x0
  6549                           
  6550  0070                     ?_PWM4_Initialize:	
  6551                           ; 1 bytes @ 0x0
  6552                           
  6553  0070                     ?_PWM3_Initialize:	
  6554                           ; 1 bytes @ 0x0
  6555                           
  6556  0070                     ?_TMR2_Initialize:	
  6557                           ; 1 bytes @ 0x0
  6558                           
  6559  0070                     ?_TMR0_Initialize:	
  6560                           ; 1 bytes @ 0x0
  6561                           
  6562  0070                     ?_runRTC:	
  6563                           ; 1 bytes @ 0x0
  6564                           
  6565  0070                     ?_ledSunrs:	
  6566                           ; 1 bytes @ 0x0
  6567                           
  6568  0070                     ?_ledDynamic:	
  6569                           ; 1 bytes @ 0x0
  6570                           
  6571  0070                     ?_updateLed:	
  6572                           ; 1 bytes @ 0x0
  6573                           
  6574  0070                     ?_turnOnLedRamp:	
  6575                           ; 1 bytes @ 0x0
  6576                           
  6577  0070                     ?_initDynamic:	
  6578                           ; 1 bytes @ 0x0
  6579                           
  6580  0070                     ?_turnOffLedRamp:	
  6581                           ; 1 bytes @ 0x0
  6582                           
  6583  0070                     ?_updatePWM:	
  6584                           ; 1 bytes @ 0x0
  6585                           
  6586  0070                     ?_main:	
  6587                           ; 1 bytes @ 0x0
  6588                           
  6589  0070                     ?_EUSART_Initialize:	
  6590                           ; 1 bytes @ 0x0
  6591                           
  6592  0070                     ?_EUSART_RCV_ISR:	
  6593                           ; 1 bytes @ 0x0
  6594                           
  6595  0070                     ??_EUSART_RCV_ISR:	
  6596                           ; 1 bytes @ 0x0
  6597                           
  6598  0070                     ?_eusartSendByte:	
  6599                           ; 1 bytes @ 0x0
  6600                           
  6601  0070                     ?_OSCILLATOR_Initialize:	
  6602                           ; 1 bytes @ 0x0
  6603                           
  6604  0070                     ?_INTERRUPT_interruptManager:	
  6605                           ; 1 bytes @ 0x0
  6606                           
  6607  0070                     ?_checkDevID:	
  6608                           ; 1 bytes @ 0x0
  6609                           
  6610  0070                     ?_bleSendDeviceData:	
  6611                           ; 1 bytes @ 0x0
  6612                           
  6613  0070                     ?_bleSendDeviceTime:	
  6614                           ; 1 bytes @ 0x0
  6615                           
  6616  0070                     ?_turnMaxLed:	
  6617                           ; 1 bytes @ 0x0
  6618                           
  6619  0070                     ?_turnOffLed:	
  6620                           ; 1 bytes @ 0x0
  6621                           
  6622  0070                     ?_updateDynamic:	
  6623                           ; 1 bytes @ 0x0
  6624                           
  6625  0070                     ?_ledThunder_1:	
  6626                           ; 1 bytes @ 0x0
  6627                           
  6628  0070                     ??_ledThunder_1:	
  6629                           ; 1 bytes @ 0x0
  6630                           
  6631  0070                     ?_ledThunder_2:	
  6632                           ; 1 bytes @ 0x0
  6633                           
  6634  0070                     ?_ledThunder_3:	
  6635                           ; 1 bytes @ 0x0
  6636                           
  6637  0070                     ?_ledAllCOlor:	
  6638                           ; 1 bytes @ 0x0
  6639                           
  6640  0070                     ?_readByte:	
  6641                           ; 1 bytes @ 0x0
  6642                           
  6643  0070                     ?i1_updatePWM:	
  6644                           ; 1 bytes @ 0x0
  6645                           
  6646  0070                     ?i1_updateDynamic:	
  6647                           ; 1 bytes @ 0x0
  6648                           
  6649  0070                     ??i1_updateDynamic:	
  6650                           ; 1 bytes @ 0x0
  6651                           
  6652  0070                     ?i1_PWM1_LoadDutyValue:	
  6653                           ; 1 bytes @ 0x0
  6654                           
  6655  0070                     ?i1_PWM2_LoadDutyValue:	
  6656                           ; 1 bytes @ 0x0
  6657                           
  6658  0070                     ?i1_PWM3_LoadDutyValue:	
  6659                           ; 1 bytes @ 0x0
  6660                           
  6661  0070                     ?i1_PWM4_LoadDutyValue:	
  6662                           ; 1 bytes @ 0x0
  6663                           
  6664  0070                     ?___lwmod:	
  6665                           ; 1 bytes @ 0x0
  6666                           
  6667  0070                     ?i1___ftpack:	
  6668                           ; 2 bytes @ 0x0
  6669                           
  6670  0070                     ___lwmod@divisor:	
  6671                           ; 3 bytes @ 0x0
  6672                           
  6673  0070                     i1PWM1_LoadDutyValue@dutyValue:	
  6674                           ; 2 bytes @ 0x0
  6675                           
  6676  0070                     i1PWM2_LoadDutyValue@dutyValue:	
  6677                           ; 2 bytes @ 0x0
  6678                           
  6679  0070                     i1PWM3_LoadDutyValue@dutyValue:	
  6680                           ; 2 bytes @ 0x0
  6681                           
  6682  0070                     i1PWM4_LoadDutyValue@dutyValue:	
  6683                           ; 2 bytes @ 0x0
  6684                           
  6685  0070                     i1___ftpack@arg:	
  6686                           ; 2 bytes @ 0x0
  6687                           
  6688                           
  6689                           ; 3 bytes @ 0x0
  6690  0070                     	ds	2
  6691  0072                     ??_updateLed:	
  6692  0072                     ??i1_updatePWM:	
  6693                           ; 1 bytes @ 0x2
  6694                           
  6695  0072                     ??i1_PWM1_LoadDutyValue:	
  6696                           ; 1 bytes @ 0x2
  6697                           
  6698  0072                     ??i1_PWM2_LoadDutyValue:	
  6699                           ; 1 bytes @ 0x2
  6700                           
  6701  0072                     ??i1_PWM3_LoadDutyValue:	
  6702                           ; 1 bytes @ 0x2
  6703                           
  6704  0072                     ??i1_PWM4_LoadDutyValue:	
  6705                           ; 1 bytes @ 0x2
  6706                           
  6707  0072                     i1updateDynamic@i:	
  6708                           ; 1 bytes @ 0x2
  6709                           
  6710  0072                     ___lwmod@dividend:	
  6711                           ; 1 bytes @ 0x2
  6712                           
  6713                           
  6714                           ; 2 bytes @ 0x2
  6715  0072                     	ds	1
  6716  0073                     ??_ledThunder_2:	
  6717  0073                     ??_ledThunder_3:	
  6718                           ; 1 bytes @ 0x3
  6719                           
  6720  0073                     ??_ledAllCOlor:	
  6721                           ; 1 bytes @ 0x3
  6722                           
  6723  0073                     i1___ftpack@exp:	
  6724                           ; 1 bytes @ 0x3
  6725                           
  6726                           
  6727                           ; 1 bytes @ 0x3
  6728  0073                     	ds	1
  6729  0074                     ??___lwmod:	
  6730  0074                     ___lwmod@counter:	
  6731                           ; 1 bytes @ 0x4
  6732                           
  6733  0074                     i1___ftpack@sign:	
  6734                           ; 1 bytes @ 0x4
  6735                           
  6736                           
  6737                           ; 1 bytes @ 0x4
  6738  0074                     	ds	1
  6739  0075                     ?_checkIsYearLeap:	
  6740  0075                     ??i1___ftpack:	
  6741                           ; 1 bytes @ 0x5
  6742                           
  6743  0075                     checkIsYearLeap@year:	
  6744                           ; 1 bytes @ 0x5
  6745                           
  6746                           
  6747                           ; 2 bytes @ 0x5
  6748  0075                     	ds	2
  6749  0077                     ??_runRTC:	
  6750  0077                     ??_checkIsYearLeap:	
  6751                           ; 1 bytes @ 0x7
  6752                           
  6753                           
  6754                           ; 1 bytes @ 0x7
  6755  0077                     	ds	1
  6756  0078                     ?i1___lwtoft:	
  6757  0078                     updateLed@step:	
  6758                           ; 3 bytes @ 0x8
  6759                           
  6760  0078                     i1___lwtoft@c:	
  6761                           ; 1 bytes @ 0x8
  6762                           
  6763                           
  6764                           ; 2 bytes @ 0x8
  6765  0078                     	ds	1
  6766  0079                     updateLed@i:	
  6767                           
  6768                           ; 1 bytes @ 0x9
  6769  0079                     	ds	2
  6770  007B                     ??i1___ftmul:	
  6771  007B                     ??i1___lwtoft:	
  6772                           ; 1 bytes @ 0xB
  6773                           
  6774                           
  6775                           ; 1 bytes @ 0xB
  6776  007B                     	ds	3
  6777  007E                     ??_INTERRUPT_interruptManager:	
  6778                           
  6779                           	psect	cstackBANK0
  6780  0020                     __pcstackBANK0:	
  6781                           ; 1 bytes @ 0xE
  6782                           
  6783  0020                     ?i1___ftmul:	
  6784  0020                     i1___ftmul@f1:	
  6785                           ; 3 bytes @ 0x0
  6786                           
  6787                           
  6788                           ; 3 bytes @ 0x0
  6789  0020                     	ds	3
  6790  0023                     i1___ftmul@f2:	
  6791                           
  6792                           ; 3 bytes @ 0x3
  6793  0023                     	ds	3
  6794  0026                     i1___ftmul@exp:	
  6795                           
  6796                           ; 1 bytes @ 0x6
  6797  0026                     	ds	1
  6798  0027                     i1___ftmul@f3_as_product:	
  6799                           
  6800                           ; 3 bytes @ 0x7
  6801  0027                     	ds	3
  6802  002A                     i1___ftmul@cntr:	
  6803                           
  6804                           ; 1 bytes @ 0xA
  6805  002A                     	ds	1
  6806  002B                     i1___ftmul@sign:	
  6807                           
  6808                           ; 1 bytes @ 0xB
  6809  002B                     	ds	1
  6810  002C                     ?___fttol:	
  6811  002C                     ___fttol@f1:	
  6812                           ; 4 bytes @ 0xC
  6813                           
  6814                           
  6815                           ; 3 bytes @ 0xC
  6816  002C                     	ds	4
  6817  0030                     ??___fttol:	
  6818                           
  6819                           ; 1 bytes @ 0x10
  6820  0030                     	ds	3
  6821  0033                     ___fttol@sign1:	
  6822                           
  6823                           ; 1 bytes @ 0x13
  6824  0033                     	ds	1
  6825  0034                     ___fttol@lval:	
  6826                           
  6827                           ; 4 bytes @ 0x14
  6828  0034                     	ds	4
  6829  0038                     ___fttol@exp1:	
  6830                           
  6831                           ; 1 bytes @ 0x18
  6832  0038                     	ds	1
  6833  0039                     ??_ledSunrs:	
  6834  0039                     ??_ledDynamic:	
  6835                           ; 1 bytes @ 0x19
  6836                           
  6837                           
  6838                           ; 1 bytes @ 0x19
  6839  0039                     	ds	4
  6840  003D                     ledSunrs@temp:	
  6841  003D                     ledDynamic@temp:	
  6842                           ; 2 bytes @ 0x1D
  6843                           
  6844                           
  6845                           ; 2 bytes @ 0x1D
  6846  003D                     	ds	2
  6847  003F                     ledSunrs@i:	
  6848  003F                     ledDynamic@i:	
  6849                           ; 1 bytes @ 0x1F
  6850                           
  6851                           
  6852                           ; 1 bytes @ 0x1F
  6853  003F                     	ds	1
  6854                           
  6855                           	psect	text1
  6856  1CAB                     __ptext1:	
  6857 ;; *************** function _saveLedPara *****************
  6858 ;; Defined at:
  6859 ;;		line 108 in file "src/eeprom.c"
  6860 ;; Parameters:    Size  Location     Type
  6861 ;;		None
  6862 ;; Auto vars:     Size  Location     Type
  6863 ;;		None
  6864 ;; Return value:  Size  Location     Type
  6865 ;;                  1    wreg      void 
  6866 ;; Registers used:
  6867 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6868 ;; Tracked objects:
  6869 ;;		On entry : 1F/0
  6870 ;;		On exit  : 1F/0
  6871 ;;		Unchanged: 0/0
  6872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6875 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6876 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6877 ;;Total ram usage:        1 bytes
  6878 ;; Hardware stack levels used:    1
  6879 ;; Hardware stack levels required when called:    8
  6880 ;; This function calls:
  6881 ;;		_writeLedPara
  6882 ;; This function is called by:
  6883 ;;		_main
  6884 ;; This function uses a non-reentrant model
  6885 ;;
  6886                           
  6887                           
  6888                           ;psect for function _saveLedPara
  6889  1CAB                     _saveLedPara:	
  6890                           
  6891                           ;eeprom.c: 110: if (gLedRunPara.nSaveDelayCount > 0)
  6892                           
  6893                           ;incstack = 0
  6894                           ; Regs used in _saveLedPara: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6895  1CAB  084C               	movf	_gLedRunPara+3,w	;volatile
  6896  1CAC  1D03               	btfss	3,2
  6897                           
  6898                           ;eeprom.c: 111: {
  6899                           ;eeprom.c: 112: gLedRunPara.nSaveDelayCount--;
  6900  1CAD  03CC               	decf	_gLedRunPara+3,f	;volatile
  6901                           
  6902                           ;eeprom.c: 113: }
  6903                           ;eeprom.c: 114: if (gLedRunPara.nSaveDelayCount == 0)
  6904  1CAE  084C               	movf	_gLedRunPara+3,w	;volatile
  6905  1CAF  1D03               	btfss	3,2
  6906  1CB0  0008               	return
  6907                           
  6908                           ;eeprom.c: 115: {
  6909                           ;eeprom.c: 116: writeLedPara( 0x10, gLedPara );
  6910  1CB1  3020               	movlw	low _gLedPara
  6911  1CB2  0086               	movwf	6
  6912  1CB3  3002               	movlw	high _gLedPara
  6913  1CB4  0087               	movwf	7
  6914  1CB5  30AB               	movlw	low writeLedPara@para
  6915  1CB6  0084               	movwf	4
  6916  1CB7  3000               	movlw	high writeLedPara@para
  6917  1CB8  0085               	movwf	5
  6918  1CB9  3031               	movlw	49
  6919  1CBA  0021               	movlb	1	; select bank1
  6920  1CBB  00DD               	movwf	??_saveLedPara^(0+128)
  6921  1CBC                     u7710:	
  6922  1CBC  0016               	moviw fsr1++
  6923  1CBD  001A               	movwi fsr0++
  6924  1CBE  0BDD               	decfsz	??_saveLedPara^(0+128),f
  6925  1CBF  2CBC               	goto	u7710
  6926  1CC0  3010               	movlw	16
  6927  1CC1  24C5               	fcall	_writeLedPara
  6928                           
  6929                           ;eeprom.c: 117: gLedRunPara.fSave = 0;
  6930  1CC2  0020               	movlb	0	; select bank0
  6931  1CC3  1149               	bcf	_gLedRunPara,2	;volatile
  6932  1CC4  0008               	return
  6933  1CC5                     __end_of_saveLedPara:	
  6934  1CC5                     __ptext2:	
  6935 ;; *************** function _writeLedPara *****************
  6936 ;; Defined at:
  6937 ;;		line 91 in file "src/eeprom.c"
  6938 ;; Parameters:    Size  Location     Type
  6939 ;;  addr            1    wreg     unsigned char 
  6940 ;;  para           49   11[BANK1 ] struct .
  6941 ;; Auto vars:     Size  Location     Type
  6942 ;;  addr            1   60[BANK1 ] unsigned char 
  6943 ;; Return value:  Size  Location     Type
  6944 ;;                  1    wreg      void 
  6945 ;; Registers used:
  6946 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6947 ;; Tracked objects:
  6948 ;;		On entry : 1F/1
  6949 ;;		On exit  : 1F/1
  6950 ;;		Unchanged: 0/0
  6951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6952 ;;      Params:         0       0      49       0       0       0       0       0       0       0       0       0       
      +0       0
  6953 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6955 ;;      Totals:         0       0      50       0       0       0       0       0       0       0       0       0       
      +0       0
  6956 ;;Total ram usage:       50 bytes
  6957 ;; Hardware stack levels used:    1
  6958 ;; Hardware stack levels required when called:    7
  6959 ;; This function calls:
  6960 ;;		_writeBuffer
  6961 ;; This function is called by:
  6962 ;;		_saveLedPara
  6963 ;; This function uses a non-reentrant model
  6964 ;;
  6965                           
  6966                           
  6967                           ;psect for function _writeLedPara
  6968  1CC5                     _writeLedPara:	
  6969                           
  6970                           ;incstack = 0
  6971                           ; Regs used in _writeLedPara: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6972                           ;writeLedPara@addr stored from wreg
  6973  1CC5  00DC               	movwf	writeLedPara@addr^(0+128)
  6974                           
  6975                           ;eeprom.c: 93: writeBuffer(addr, (unsigned char*)&para, sizeof(para));
  6976  1CC6  30AB               	movlw	(low (writeLedPara@para| 0))& (0+255)
  6977  1CC7  00A6               	movwf	writeBuffer@buf^(0+128)
  6978  1CC8  3031               	movlw	49
  6979  1CC9  00A7               	movwf	writeBuffer@len^(0+128)
  6980  1CCA  085C               	movf	writeLedPara@addr^(0+128),w
  6981  1CCB  2CCC               	ljmp	_writeBuffer
  6982  1CCC                     __end_of_writeLedPara:	
  6983  1CCC                     __ptext3:	
  6984 ;; *************** function _writeBuffer *****************
  6985 ;; Defined at:
  6986 ;;		line 64 in file "src/eeprom.c"
  6987 ;; Parameters:    Size  Location     Type
  6988 ;;  addr            1    wreg     unsigned char 
  6989 ;;  buf             1    6[BANK1 ] PTR unsigned char 
  6990 ;;		 -> writeLedPara@para(49), 
  6991 ;;  len             1    7[BANK1 ] unsigned char 
  6992 ;; Auto vars:     Size  Location     Type
  6993 ;;  addr            1    9[BANK1 ] unsigned char 
  6994 ;;  i               1   10[BANK1 ] unsigned char 
  6995 ;; Return value:  Size  Location     Type
  6996 ;;                  1    wreg      void 
  6997 ;; Registers used:
  6998 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6999 ;; Tracked objects:
  7000 ;;		On entry : 1F/1
  7001 ;;		On exit  : 1F/1
  7002 ;;		Unchanged: 0/0
  7003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7004 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7005 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7006 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7007 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  7008 ;;Total ram usage:        5 bytes
  7009 ;; Hardware stack levels used:    1
  7010 ;; Hardware stack levels required when called:    6
  7011 ;; This function calls:
  7012 ;;		_writeByte
  7013 ;; This function is called by:
  7014 ;;		_writeLedPara
  7015 ;; This function uses a non-reentrant model
  7016 ;;
  7017                           
  7018                           
  7019                           ;psect for function _writeBuffer
  7020  1CCC                     _writeBuffer:	
  7021                           
  7022                           ;incstack = 0
  7023                           ; Regs used in _writeBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7024                           ;writeBuffer@addr stored from wreg
  7025  1CCC  00A9               	movwf	writeBuffer@addr^(0+128)
  7026                           
  7027                           ;eeprom.c: 66: for (unsigned char i = 0; i < len; i++)
  7028  1CCD  01AA               	clrf	writeBuffer@i^(0+128)
  7029  1CCE                     l7131:	
  7030  1CCE  0827               	movf	writeBuffer@len^(0+128),w
  7031  1CCF  022A               	subwf	writeBuffer@i^(0+128),w
  7032  1CD0  1803               	btfsc	3,0
  7033  1CD1  0008               	return
  7034                           
  7035                           ;eeprom.c: 67: {
  7036                           ;eeprom.c: 68: writeByte((addr+i), *(buf+i));
  7037  1CD2  082A               	movf	writeBuffer@i^(0+128),w
  7038  1CD3  0726               	addwf	writeBuffer@buf^(0+128),w
  7039  1CD4  00A8               	movwf	??_writeBuffer^(0+128)
  7040  1CD5  0086               	movwf	6
  7041  1CD6  0187               	clrf	7
  7042  1CD7  0801               	movf	1,w
  7043  1CD8  00A4               	movwf	writeByte@byte^(0+128)
  7044  1CD9  0829               	movf	writeBuffer@addr^(0+128),w
  7045  1CDA  072A               	addwf	writeBuffer@i^(0+128),w
  7046  1CDB  24DF  319C         	fcall	_writeByte
  7047  1CDD  0AAA               	incf	writeBuffer@i^(0+128),f
  7048  1CDE  2CCE               	goto	l7131
  7049  1CDF                     __end_of_writeBuffer:	
  7050  1CDF                     __ptext4:	
  7051 ;; *************** function _writeByte *****************
  7052 ;; Defined at:
  7053 ;;		line 42 in file "src/eeprom.c"
  7054 ;; Parameters:    Size  Location     Type
  7055 ;;  addr            1    wreg     unsigned char 
  7056 ;;  byte            1    4[BANK1 ] unsigned char 
  7057 ;; Auto vars:     Size  Location     Type
  7058 ;;  addr            1    5[BANK1 ] unsigned char 
  7059 ;; Return value:  Size  Location     Type
  7060 ;;                  1    wreg      void 
  7061 ;; Registers used:
  7062 ;;		wreg, status,2, status,0, pclath, cstack
  7063 ;; Tracked objects:
  7064 ;;		On entry : 1F/1
  7065 ;;		On exit  : 1F/1
  7066 ;;		Unchanged: 0/0
  7067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7068 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7069 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7071 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7072 ;;Total ram usage:        2 bytes
  7073 ;; Hardware stack levels used:    1
  7074 ;; Hardware stack levels required when called:    5
  7075 ;; This function calls:
  7076 ;;		_DATAEE_WriteByte
  7077 ;; This function is called by:
  7078 ;;		_writeBuffer
  7079 ;; This function uses a non-reentrant model
  7080 ;;
  7081                           
  7082                           
  7083                           ;psect for function _writeByte
  7084  1CDF                     _writeByte:	
  7085                           
  7086                           ;incstack = 0
  7087                           ; Regs used in _writeByte: [wreg+status,2+status,0+pclath+cstack]
  7088                           ;writeByte@addr stored from wreg
  7089  1CDF  00A5               	movwf	writeByte@addr^(0+128)
  7090                           
  7091                           ;eeprom.c: 44: DATAEE_WriteByte(0x7000 + addr, byte);
  7092  1CE0  00A0               	movwf	DATAEE_WriteByte@bAdd^(0+128)
  7093  1CE1  3070               	movlw	112
  7094  1CE2  01A1               	clrf	(DATAEE_WriteByte@bAdd+1)^(0+128)
  7095  1CE3  07A1               	addwf	(DATAEE_WriteByte@bAdd+1)^(0+128),f
  7096  1CE4  0824               	movf	writeByte@byte^(0+128),w
  7097  1CE5  00A2               	movwf	DATAEE_WriteByte@bData^(0+128)
  7098  1CE6  2CE7               	ljmp	l6947
  7099  1CE7                     __end_of_writeByte:	
  7100  1CE7                     __ptext5:	
  7101 ;; *************** function _DATAEE_WriteByte *****************
  7102 ;; Defined at:
  7103 ;;		line 3 in file "src/eeprom.c"
  7104 ;; Parameters:    Size  Location     Type
  7105 ;;  bAdd            2    0[BANK1 ] unsigned int 
  7106 ;;  bData           1    2[BANK1 ] unsigned char 
  7107 ;; Auto vars:     Size  Location     Type
  7108 ;;  GIEBitValue     1    3[BANK1 ] unsigned char 
  7109 ;; Return value:  Size  Location     Type
  7110 ;;                  1    wreg      void 
  7111 ;; Registers used:
  7112 ;;		wreg, status,2, status,0
  7113 ;; Tracked objects:
  7114 ;;		On entry : 1F/1
  7115 ;;		On exit  : 1F/1
  7116 ;;		Unchanged: 0/0
  7117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7118 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7119 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7121 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7122 ;;Total ram usage:        4 bytes
  7123 ;; Hardware stack levels used:    1
  7124 ;; Hardware stack levels required when called:    4
  7125 ;; This function calls:
  7126 ;;		Nothing
  7127 ;; This function is called by:
  7128 ;;		_writeByte
  7129 ;; This function uses a non-reentrant model
  7130 ;;
  7131                           
  7132                           
  7133                           ;psect for function _DATAEE_WriteByte
  7134  1CE7                     _DATAEE_WriteByte:	
  7135  1CE7                     l6947:	
  7136                           ;incstack = 0
  7137                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  7138                           
  7139                           
  7140                           ;eeprom.c: 5: unsigned char GIEBitValue = INTCONbits.GIE;
  7141  1CE7  3000               	movlw	0
  7142  1CE8  1B8B               	btfsc	11,7	;volatile
  7143  1CE9  3001               	movlw	1
  7144  1CEA  00A3               	movwf	DATAEE_WriteByte@GIEBitValue^(0+128)
  7145                           
  7146                           ;eeprom.c: 7: NVMADRH = ((bAdd >> 8) & 0xFF);
  7147  1CEB  0821               	movf	(DATAEE_WriteByte@bAdd^(0+128)+1),w
  7148  1CEC  0031               	movlb	17	; select bank17
  7149  1CED  0092               	movwf	18	;volatile
  7150                           
  7151                           ;eeprom.c: 8: NVMADRL = (bAdd & 0xFF);
  7152  1CEE  0021               	movlb	1	; select bank1
  7153  1CEF  0820               	movf	DATAEE_WriteByte@bAdd^(0+128),w
  7154  1CF0  0031               	movlb	17	; select bank17
  7155  1CF1  0091               	movwf	17	;volatile
  7156                           
  7157                           ;eeprom.c: 9: NVMDATL = bData;
  7158  1CF2  0021               	movlb	1	; select bank1
  7159  1CF3  0822               	movf	DATAEE_WriteByte@bData^(0+128),w
  7160  1CF4  0031               	movlb	17	; select bank17
  7161  1CF5  0093               	movwf	19	;volatile
  7162                           
  7163                           ;eeprom.c: 10: NVMCON1bits.NVMREGS = 1;
  7164  1CF6  1715               	bsf	21,6	;volsfr
  7165                           
  7166                           ;eeprom.c: 11: NVMCON1bits.WREN = 1;
  7167  1CF7  1515               	bsf	21,2	;volsfr
  7168                           
  7169                           ;eeprom.c: 12: INTCONbits.GIE = 0;
  7170  1CF8  138B               	bcf	11,7	;volatile
  7171                           
  7172                           ;eeprom.c: 13: NVMCON2 = 0x55;
  7173  1CF9  3055               	movlw	85
  7174  1CFA  0096               	movwf	22	;volsfr
  7175                           
  7176                           ;eeprom.c: 14: NVMCON2 = 0xAA;
  7177  1CFB  30AA               	movlw	170
  7178  1CFC  0096               	movwf	22	;volsfr
  7179                           
  7180                           ;eeprom.c: 15: NVMCON1bits.WR = 1;
  7181  1CFD  1495               	bsf	21,1	;volsfr
  7182  1CFE                     l753:	
  7183                           ;eeprom.c: 18: {
  7184                           
  7185  1CFE  1895               	btfsc	21,1	;volsfr
  7186  1CFF  2CFE               	goto	l753
  7187                           
  7188                           ;eeprom.c: 19: }
  7189                           ;eeprom.c: 21: NVMCON1bits.WREN = 0;
  7190  1D00  1115               	bcf	21,2	;volsfr
  7191                           
  7192                           ;eeprom.c: 22: INTCONbits.GIE = GIEBitValue;
  7193  1D01  0021               	movlb	1	; select bank1
  7194  1D02  0C23               	rrf	DATAEE_WriteByte@GIEBitValue^(0+128),w
  7195  1D03  1C03               	skipc
  7196  1D04  138B               	bcf	11,7	;volatile
  7197  1D05  1803               	skipnc
  7198  1D06  178B               	bsf	11,7	;volatile
  7199  1D07  0008               	return
  7200  1D08                     __end_of_DATAEE_WriteByte:	
  7201                           
  7202                           	psect	text8
  7203  083D                     __ptext8:	
  7204 ;; *************** function _initLed *****************
  7205 ;; Defined at:
  7206 ;;		line 1137 in file "src/led.c"
  7207 ;; Parameters:    Size  Location     Type
  7208 ;;		None
  7209 ;; Auto vars:     Size  Location     Type
  7210 ;;  j               1   62[BANK1 ] unsigned char 
  7211 ;;  i               1   63[BANK1 ] unsigned char 
  7212 ;; Return value:  Size  Location     Type
  7213 ;;                  1    wreg      void 
  7214 ;; Registers used:
  7215 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7216 ;; Tracked objects:
  7217 ;;		On entry : 1F/2
  7218 ;;		On exit  : 1A/0
  7219 ;;		Unchanged: 0/0
  7220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7222 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7223 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7224 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  7225 ;;Total ram usage:        5 bytes
  7226 ;; Hardware stack levels used:    1
  7227 ;; Hardware stack levels required when called:    8
  7228 ;; This function calls:
  7229 ;;		_initDynamic
  7230 ;;		_readLedPara
  7231 ;;		_turnOffLedRamp
  7232 ;;		_turnOnLedRamp
  7233 ;; This function is called by:
  7234 ;;		_main
  7235 ;; This function uses a non-reentrant model
  7236 ;;
  7237                           
  7238                           
  7239                           ;psect for function _initLed
  7240  083D                     _initLed:	
  7241                           
  7242                           ;led.c: 1139: gLedPara = readLedPara(0x10);
  7243                           
  7244                           ;incstack = 0
  7245                           ; Regs used in _initLed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7246  083D  3010               	movlw	16
  7247  083E  20E7  3188         	fcall	_readLedPara
  7248  0840  30A9               	movlw	low ?_readLedPara
  7249  0841  0086               	movwf	6
  7250  0842  3000               	movlw	high ?_readLedPara
  7251  0843  0087               	movwf	7
  7252  0844  3020               	movlw	low _gLedPara
  7253  0845  0084               	movwf	4
  7254  0846  3002               	movlw	high _gLedPara
  7255  0847  0085               	movwf	5
  7256  0848  3031               	movlw	49
  7257  0849  00DB               	movwf	??_initLed^(0+128)
  7258  084A                     u6580:	
  7259  084A  0016               	moviw fsr1++
  7260  084B  001A               	movwi fsr0++
  7261  084C  0BDB               	decfsz	??_initLed^(0+128),f
  7262  084D  284A               	goto	u6580
  7263                           
  7264                           ;led.c: 1140: gLedPara.fRsv = 0;
  7265  084E  3001               	movlw	-255
  7266  084F  0024               	movlb	4	; select bank4
  7267  0850  05A0               	andwf	_gLedPara^(0+512),f	;volatile
  7268                           
  7269                           ;led.c: 1141: gLedPara.mPara.manualPara.fRsv = 0;
  7270  0851  3001               	movlw	-255
  7271  0852  05A1               	andwf	(_gLedPara^(0+512)+1),f	;volatile
  7272                           
  7273                           ;led.c: 1142: for ( unsigned char i = 0; i < 4; i++ )
  7274  0853  0021               	movlb	1	; select bank1
  7275  0854  01DF               	clrf	initLed@i^(0+128)
  7276  0855                     l7817:	
  7277                           
  7278                           ;led.c: 1143: {
  7279                           ;led.c: 1145: if ( gLedPara.mPara.manualPara.nBrt[i] > 1000 )
  7280  0855  355F               	lslf	initLed@i^(0+128),w
  7281  0856  3E23               	addlw	(low ((_gLedPara| (0+512)+3)))& (0+255)
  7282  0857  0086               	movwf	6
  7283  0858  3002               	movlw	2	; select bank4/5
  7284  0859  0087               	movwf	7
  7285  085A  3F40               	moviw [0]fsr1
  7286  085B  00DB               	movwf	??_initLed^(0+128)
  7287  085C  3F41               	moviw [1]fsr1
  7288  085D  00DC               	movwf	(??_initLed^(0+128)+1)
  7289  085E  3003               	movlw	3
  7290  085F  025C               	subwf	(??_initLed+1)^(0+128),w
  7291  0860  30E9               	movlw	233
  7292  0861  1903               	skipnz
  7293  0862  025B               	subwf	??_initLed^(0+128),w
  7294  0863  1C03               	skipc
  7295  0864  2870               	goto	l7821
  7296                           
  7297                           ;led.c: 1146: {
  7298                           ;led.c: 1147: gLedPara.mPara.manualPara.nBrt[i] = 1000;
  7299  0865  30E8               	movlw	232
  7300  0866  00DB               	movwf	??_initLed^(0+128)
  7301  0867  3003               	movlw	3
  7302  0868  00DC               	movwf	(??_initLed^(0+128)+1)
  7303  0869  355F               	lslf	initLed@i^(0+128),w
  7304  086A  3E23               	addlw	(low ((_gLedPara| (0+512)+3)))& (0+255)
  7305  086B  0086               	movwf	6
  7306  086C  085B               	movf	??_initLed^(0+128),w
  7307  086D  3FC0               	movwi [0]fsr1
  7308  086E  085C               	movf	(??_initLed^(0+128)+1),w
  7309  086F  3FC1               	movwi [1]fsr1
  7310  0870                     l7821:	
  7311                           
  7312                           ;led.c: 1148: }
  7313                           ;led.c: 1150: for ( unsigned char j = 0; j < 4; j++ )
  7314  0870  01DE               	clrf	initLed@j^(0+128)
  7315  0871                     l7827:	
  7316                           
  7317                           ;led.c: 1151: {
  7318                           ;led.c: 1152: if ( gLedPara.mPara.manualPara.nCustomBrt[j][i] > 100 )
  7319  0871  212B  3188         	fcall	PL66	;call to abstracted procedure
  7320  0873  3002               	movlw	2	; select bank4/5
  7321  0874  0087               	movwf	7
  7322  0875  3065               	movlw	101
  7323  0876  0201               	subwf	1,w
  7324  0877  1C03               	skipc
  7325  0878  287D               	goto	l7831
  7326                           
  7327                           ;led.c: 1153: {
  7328                           ;led.c: 1154: gLedPara.mPara.manualPara.nCustomBrt[j][i] = 100;
  7329  0879  212B  3188         	fcall	PL66	;call to abstracted procedure
  7330  087B  3064               	movlw	100
  7331  087C  0081               	movwf	1
  7332  087D                     l7831:	
  7333  087D  3004               	movlw	4
  7334  087E  0ADE               	incf	initLed@j^(0+128),f
  7335  087F  025E               	subwf	initLed@j^(0+128),w
  7336  0880  1C03               	skipc
  7337  0881  2871               	goto	l7827
  7338                           
  7339                           ;led.c: 1155: }
  7340                           ;led.c: 1156: }
  7341                           ;led.c: 1158: if ( gLedPara.aPara.autoPara.daylight[i] > 100 )
  7342  0882  085F               	movf	initLed@i^(0+128),w
  7343  0883  3E3F               	addlw	(low ((_gLedPara| (0+512)+31)))& (0+255)
  7344  0884  2137  3188         	fcall	PL128	;call to abstracted procedure
  7345                           
  7346                           ;led.c: 1159: {
  7347                           ;led.c: 1160: gLedPara.aPara.autoPara.daylight[i] = 100;
  7348  0886  085F               	movf	initLed@i^(0+128),w
  7349  0887  1C03               	skipc
  7350  0888  288E               	goto	L1
  7351  0889  3E3F               	addlw	(low ((_gLedPara| (0+512)+31)))& (0+255)
  7352  088A  0086               	movwf	6
  7353  088B  3064               	movlw	100
  7354  088C  0081               	movwf	1
  7355                           
  7356                           ;led.c: 1161: }
  7357                           ;led.c: 1163: if ( gLedPara.aPara.autoPara.moonlight[i] > 100 )
  7358  088D  085F               	movf	initLed@i^(0+128),w
  7359  088E                     L1:	
  7360  088E  3E47               	addlw	(low ((_gLedPara| (0+512)+39)))& (0+255)
  7361  088F  2137  3188         	fcall	PL128	;call to abstracted procedure
  7362  0891  1C03               	skipc
  7363  0892  2898               	goto	l7841
  7364                           
  7365                           ;led.c: 1164: {
  7366                           ;led.c: 1165: gLedPara.aPara.autoPara.moonlight[i] = 100;
  7367  0893  085F               	movf	initLed@i^(0+128),w
  7368  0894  3E47               	addlw	(low ((_gLedPara| (0+512)+39)))& (0+255)
  7369  0895  0086               	movwf	6
  7370  0896  3064               	movlw	100
  7371  0897  0081               	movwf	1
  7372  0898                     l7841:	
  7373  0898  3004               	movlw	4
  7374  0899  0ADF               	incf	initLed@i^(0+128),f
  7375  089A  025F               	subwf	initLed@i^(0+128),w
  7376  089B  1C03               	skipc
  7377  089C  2855               	goto	l7817
  7378                           
  7379                           ;led.c: 1166: }
  7380                           ;led.c: 1167: }
  7381                           ;led.c: 1169: if ( gLedPara.aPara.autoPara.sunrise.start.hour > 23 )
  7382  089D  3018               	movlw	24
  7383  089E  0024               	movlb	4	; select bank4
  7384  089F  023B               	subwf	(_gLedPara^(0+512)+27),w	;volatile
  7385  08A0  1803               	btfsc	3,0
  7386                           
  7387                           ;led.c: 1170: {
  7388                           ;led.c: 1171: gLedPara.aPara.autoPara.sunrise.start.hour = 0;
  7389  08A1  01BB               	clrf	(_gLedPara^(0+512)+27)	;volatile
  7390                           
  7391                           ;led.c: 1172: }
  7392                           ;led.c: 1173: if ( gLedPara.aPara.autoPara.sunrise.start.minute > 59 )
  7393  08A2  303C               	movlw	60
  7394  08A3  023C               	subwf	(_gLedPara^(0+512)+28),w	;volatile
  7395  08A4  1803               	btfsc	3,0
  7396                           
  7397                           ;led.c: 1174: {
  7398                           ;led.c: 1175: gLedPara.aPara.autoPara.sunrise.start.minute = 0;
  7399  08A5  01BC               	clrf	(_gLedPara^(0+512)+28)	;volatile
  7400                           
  7401                           ;led.c: 1176: }
  7402                           ;led.c: 1178: if ( gLedPara.aPara.autoPara.sunrise.end.hour > 23 )
  7403  08A6  3018               	movlw	24
  7404  08A7  023D               	subwf	(_gLedPara^(0+512)+29),w	;volatile
  7405  08A8  1803               	btfsc	3,0
  7406                           
  7407                           ;led.c: 1179: {
  7408                           ;led.c: 1180: gLedPara.aPara.autoPara.sunrise.end.hour = 0;
  7409  08A9  01BD               	clrf	(_gLedPara^(0+512)+29)	;volatile
  7410                           
  7411                           ;led.c: 1181: }
  7412                           ;led.c: 1182: if ( gLedPara.aPara.autoPara.sunrise.end.minute > 59 )
  7413  08AA  303C               	movlw	60
  7414  08AB  023E               	subwf	(_gLedPara^(0+512)+30),w	;volatile
  7415  08AC  1803               	btfsc	3,0
  7416                           
  7417                           ;led.c: 1183: {
  7418                           ;led.c: 1184: gLedPara.aPara.autoPara.sunrise.end.minute = 0;
  7419  08AD  01BE               	clrf	(_gLedPara^(0+512)+30)	;volatile
  7420                           
  7421                           ;led.c: 1185: }
  7422                           ;led.c: 1187: if ( gLedPara.aPara.autoPara.sunset.start.hour > 23 )
  7423  08AE  3018               	movlw	24
  7424  08AF  0243               	subwf	(_gLedPara^(0+512)+35),w	;volatile
  7425  08B0  1803               	btfsc	3,0
  7426                           
  7427                           ;led.c: 1188: {
  7428                           ;led.c: 1189: gLedPara.aPara.autoPara.sunset.start.hour = 0;
  7429  08B1  01C3               	clrf	(_gLedPara^(0+512)+35)	;volatile
  7430                           
  7431                           ;led.c: 1190: }
  7432                           ;led.c: 1191: if ( gLedPara.aPara.autoPara.sunset.start.minute > 59 )
  7433  08B2  303C               	movlw	60
  7434  08B3  0244               	subwf	(_gLedPara^(0+512)+36),w	;volatile
  7435  08B4  1803               	btfsc	3,0
  7436                           
  7437                           ;led.c: 1192: {
  7438                           ;led.c: 1193: gLedPara.aPara.autoPara.sunset.start.minute = 0;
  7439  08B5  01C4               	clrf	(_gLedPara^(0+512)+36)	;volatile
  7440                           
  7441                           ;led.c: 1194: }
  7442                           ;led.c: 1196: if ( gLedPara.aPara.autoPara.sunset.end.hour > 23 )
  7443  08B6  3018               	movlw	24
  7444  08B7  0245               	subwf	(_gLedPara^(0+512)+37),w	;volatile
  7445  08B8  1803               	btfsc	3,0
  7446                           
  7447                           ;led.c: 1197: {
  7448                           ;led.c: 1198: gLedPara.aPara.autoPara.sunset.end.hour = 0;
  7449  08B9  01C5               	clrf	(_gLedPara^(0+512)+37)	;volatile
  7450                           
  7451                           ;led.c: 1199: }
  7452                           ;led.c: 1200: if ( gLedPara.aPara.autoPara.sunset.end.minute > 59 )
  7453  08BA  303C               	movlw	60
  7454  08BB  0246               	subwf	(_gLedPara^(0+512)+38),w	;volatile
  7455  08BC  1803               	btfsc	3,0
  7456                           
  7457                           ;led.c: 1201: {
  7458                           ;led.c: 1202: gLedPara.aPara.autoPara.sunset.end.minute = 0;
  7459  08BD  01C6               	clrf	(_gLedPara^(0+512)+38)	;volatile
  7460                           
  7461                           ;led.c: 1203: }
  7462                           ;led.c: 1205: if( gLedPara.aPara.autoPara.autoDynamic.dynamicPeriod.start.hour > 23 )
  7463  08BE  3018               	movlw	24
  7464  08BF  024C               	subwf	(_gLedPara^(0+512)+44),w	;volatile
  7465  08C0  1803               	btfsc	3,0
  7466                           
  7467                           ;led.c: 1206: {
  7468                           ;led.c: 1207: gLedPara.aPara.autoPara.autoDynamic.dynamicPeriod.start.hour = 0;
  7469  08C1  01CC               	clrf	(_gLedPara^(0+512)+44)	;volatile
  7470                           
  7471                           ;led.c: 1208: }
  7472                           ;led.c: 1209: if( gLedPara.aPara.autoPara.autoDynamic.dynamicPeriod.start.minute > 59 )
  7473  08C2  303C               	movlw	60
  7474  08C3  024D               	subwf	(_gLedPara^(0+512)+45),w	;volatile
  7475  08C4  1803               	btfsc	3,0
  7476                           
  7477                           ;led.c: 1210: {
  7478                           ;led.c: 1211: gLedPara.aPara.autoPara.autoDynamic.dynamicPeriod.start.minute = 0;
  7479  08C5  01CD               	clrf	(_gLedPara^(0+512)+45)	;volatile
  7480                           
  7481                           ;led.c: 1212: }
  7482                           ;led.c: 1213: if( gLedPara.aPara.autoPara.autoDynamic.dynamicPeriod.end.hour > 23 )
  7483  08C6  3018               	movlw	24
  7484  08C7  024E               	subwf	(_gLedPara^(0+512)+46),w	;volatile
  7485  08C8  1803               	btfsc	3,0
  7486                           
  7487                           ;led.c: 1214: {
  7488                           ;led.c: 1215: gLedPara.aPara.autoPara.autoDynamic.dynamicPeriod.end.hour = 0;
  7489  08C9  01CE               	clrf	(_gLedPara^(0+512)+46)	;volatile
  7490                           
  7491                           ;led.c: 1216: }
  7492                           ;led.c: 1217: if( gLedPara.aPara.autoPara.autoDynamic.dynamicPeriod.end.minute > 59 )
  7493  08CA  303C               	movlw	60
  7494  08CB  024F               	subwf	(_gLedPara^(0+512)+47),w	;volatile
  7495  08CC  1803               	btfsc	3,0
  7496                           
  7497                           ;led.c: 1218: {
  7498                           ;led.c: 1219: gLedPara.aPara.autoPara.autoDynamic.dynamicPeriod.end.minute = 0;
  7499  08CD  01CF               	clrf	(_gLedPara^(0+512)+47)	;volatile
  7500                           
  7501                           ;led.c: 1220: }
  7502                           ;led.c: 1221: if( gLedPara.aPara.autoPara.autoDynamic.dynamicMode >= 12 )
  7503  08CE  300C               	movlw	12
  7504  08CF  0250               	subwf	(_gLedPara^(0+512)+48),w	;volatile
  7505  08D0  1C03               	skipc
  7506  08D1  28D4               	goto	l7897
  7507                           
  7508                           ;led.c: 1222: {
  7509                           ;led.c: 1223: gLedPara.aPara.autoPara.autoDynamic.dynamicMode = 0;
  7510  08D2  01D0               	clrf	(_gLedPara^(0+512)+48)	;volatile
  7511                           
  7512                           ;led.c: 1224: gLedPara.aPara.autoPara.autoDynamic.enable_week = 0;
  7513  08D3  01CB               	clrf	(_gLedPara^(0+512)+43)	;volatile
  7514  08D4                     l7897:	
  7515                           
  7516                           ;led.c: 1225: }
  7517                           ;led.c: 1227: if ( gLedPara.mPara.manualPara.fDyn >= 12 )
  7518  08D4  300C               	movlw	12
  7519  08D5  0222               	subwf	(_gLedPara^(0+512)+2),w	;volatile
  7520  08D6  1803               	btfsc	3,0
  7521                           
  7522                           ;led.c: 1228: {
  7523                           ;led.c: 1229: gLedPara.mPara.manualPara.fDyn = 0;
  7524  08D7  01A2               	clrf	(_gLedPara^(0+512)+2)	;volatile
  7525                           
  7526                           ;led.c: 1230: }
  7527                           ;led.c: 1233: if ( !gLedPara.fAuto )
  7528  08D8  1820               	btfsc	_gLedPara^(0+512),0	;volatile
  7529  08D9  0008               	return
  7530                           
  7531                           ;led.c: 1234: {
  7532                           ;led.c: 1235: if ( gLedPara.mPara.manualPara.fOn )
  7533  08DA  1C21               	btfss	(_gLedPara^(0+512)+1),0	;volatile
  7534  08DB  28E5               	goto	l7913
  7535                           
  7536                           ;led.c: 1236: {
  7537                           ;led.c: 1237: if ( gLedPara.mPara.manualPara.fDyn == 0 )
  7538  08DC  0822               	movf	(_gLedPara^(0+512)+2),w	;volatile
  7539  08DD  1D03               	btfss	3,2
  7540  08DE  28E1               	goto	l7909
  7541                           
  7542                           ;led.c: 1238: {
  7543                           ;led.c: 1239: turnOnLedRamp();
  7544  08DF  318F  2F67         	ljmp	l7389
  7545  08E1                     l7909:	
  7546                           ;led.c: 1240: }
  7547                           
  7548                           
  7549                           ;led.c: 1241: else
  7550                           ;led.c: 1242: {
  7551                           ;led.c: 1243: gLedRunPara.fDynamic = gLedPara.mPara.manualPara.fDyn;
  7552  08E1  0822               	movf	(_gLedPara^(0+512)+2),w	;volatile
  7553  08E2  0020               	movlb	0	; select bank0
  7554  08E3  00CA               	movwf	_gLedRunPara+1	;volatile
  7555                           
  7556                           ;led.c: 1244: initDynamic();
  7557  08E4  293D               	ljmp	l7401
  7558  08E5                     l7913:	
  7559                           
  7560                           ;led.c: 1247: else
  7561                           ;led.c: 1248: {
  7562                           ;led.c: 1249: turnOffLedRamp();
  7563  08E5  318F  2F5B         	ljmp	l7677
  7564  08E7                     __end_of_initLed:	
  7565  08E7                     __ptext9:	
  7566 ;; *************** function _readLedPara *****************
  7567 ;; Defined at:
  7568 ;;		line 101 in file "src/eeprom.c"
  7569 ;; Parameters:    Size  Location     Type
  7570 ;;  addr            1    wreg     unsigned char 
  7571 ;; Auto vars:     Size  Location     Type
  7572 ;;  addr            1    0[BANK2 ] unsigned char 
  7573 ;;  para           49    1[BANK2 ] struct .
  7574 ;; Return value:  Size  Location     Type
  7575 ;;                  49    9[BANK1 ] struct .
  7576 ;; Registers used:
  7577 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7578 ;; Tracked objects:
  7579 ;;		On entry : 1F/2
  7580 ;;		On exit  : 1F/1
  7581 ;;		Unchanged: 0/0
  7582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7583 ;;      Params:         0       0      49       0       0       0       0       0       0       0       0       0       
      +0       0
  7584 ;;      Locals:         0       0       0      50       0       0       0       0       0       0       0       0       
      +0       0
  7585 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7586 ;;      Totals:         0       0      50      50       0       0       0       0       0       0       0       0       
      +0       0
  7587 ;;Total ram usage:      100 bytes
  7588 ;; Hardware stack levels used:    1
  7589 ;; Hardware stack levels required when called:    7
  7590 ;; This function calls:
  7591 ;;		_readBuffer
  7592 ;; This function is called by:
  7593 ;;		_initLed
  7594 ;; This function uses a non-reentrant model
  7595 ;;
  7596                           
  7597                           
  7598                           ;psect for function _readLedPara
  7599  08E7                     _readLedPara:	
  7600                           
  7601                           ;incstack = 0
  7602                           ; Regs used in _readLedPara: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7603                           ;readLedPara@addr stored from wreg
  7604  08E7  00A0               	movwf	readLedPara@addr^(0+256)
  7605                           
  7606                           ;eeprom.c: 103: LedPara_t para;
  7607                           ;eeprom.c: 104: readBuffer(addr, (unsigned char*)&para, sizeof(para));
  7608  08E8  3021               	movlw	(low (readLedPara@para| (0+256)))& (0+255)
  7609  08E9  0021               	movlb	1	; select bank1
  7610  08EA  00A4               	movwf	readBuffer@buf^(0+128)
  7611  08EB  3031               	movlw	49
  7612  08EC  00A5               	movwf	readBuffer@len^(0+128)
  7613  08ED  0022               	movlb	2	; select bank2
  7614  08EE  0820               	movf	readLedPara@addr^(0+256),w
  7615  08EF  2100  3188         	fcall	_readBuffer
  7616                           
  7617                           ;eeprom.c: 105: return para;
  7618  08F1  3021               	movlw	low readLedPara@para
  7619  08F2  0086               	movwf	6
  7620  08F3  3001               	movlw	high readLedPara@para
  7621  08F4  0087               	movwf	7
  7622  08F5  30A9               	movlw	low ?_readLedPara
  7623  08F6  0084               	movwf	4
  7624  08F7  3000               	movlw	high ?_readLedPara
  7625  08F8  0085               	movwf	5
  7626  08F9  3031               	movlw	49
  7627  08FA  00DA               	movwf	??_readLedPara^(0+128)
  7628  08FB                     u6440:	
  7629  08FB  0016               	moviw fsr1++
  7630  08FC  001A               	movwi fsr0++
  7631  08FD  0BDA               	decfsz	??_readLedPara^(0+128),f
  7632  08FE  28FB               	goto	u6440
  7633  08FF  0008               	return
  7634  0900                     __end_of_readLedPara:	
  7635  0900                     __ptext10:	
  7636 ;; *************** function _readBuffer *****************
  7637 ;; Defined at:
  7638 ;;		line 78 in file "src/eeprom.c"
  7639 ;; Parameters:    Size  Location     Type
  7640 ;;  addr            1    wreg     unsigned char 
  7641 ;;  buf             1    4[BANK1 ] PTR unsigned char 
  7642 ;;		 -> readLedPara@para(49), 
  7643 ;;  len             1    5[BANK1 ] unsigned char 
  7644 ;; Auto vars:     Size  Location     Type
  7645 ;;  addr            1    7[BANK1 ] unsigned char 
  7646 ;;  i               1    8[BANK1 ] unsigned char 
  7647 ;; Return value:  Size  Location     Type
  7648 ;;                  1    wreg      void 
  7649 ;; Registers used:
  7650 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7651 ;; Tracked objects:
  7652 ;;		On entry : 1F/2
  7653 ;;		On exit  : 1F/1
  7654 ;;		Unchanged: 0/0
  7655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7656 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7657 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7658 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7659 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  7660 ;;Total ram usage:        5 bytes
  7661 ;; Hardware stack levels used:    1
  7662 ;; Hardware stack levels required when called:    6
  7663 ;; This function calls:
  7664 ;;		_readByte
  7665 ;; This function is called by:
  7666 ;;		_readLedPara
  7667 ;; This function uses a non-reentrant model
  7668 ;;
  7669                           
  7670                           
  7671                           ;psect for function _readBuffer
  7672  0900                     _readBuffer:	
  7673                           
  7674                           ;incstack = 0
  7675                           ; Regs used in _readBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7676                           ;readBuffer@addr stored from wreg
  7677  0900  0021               	movlb	1	; select bank1
  7678  0901  00A7               	movwf	readBuffer@addr^(0+128)
  7679                           
  7680                           ;eeprom.c: 80: for (unsigned char i = 0; i < len; i++)
  7681  0902  01A8               	clrf	readBuffer@i^(0+128)
  7682  0903                     l7139:	
  7683  0903  0825               	movf	readBuffer@len^(0+128),w
  7684  0904  0228               	subwf	readBuffer@i^(0+128),w
  7685  0905  1803               	btfsc	3,0
  7686  0906  0008               	return
  7687                           
  7688                           ;eeprom.c: 81: {
  7689                           ;eeprom.c: 82: *(buf+i) = readByte(addr+i);
  7690  0907  0828               	movf	readBuffer@i^(0+128),w
  7691  0908  0724               	addwf	readBuffer@buf^(0+128),w
  7692  0909  00A6               	movwf	??_readBuffer^(0+128)
  7693  090A  0086               	movwf	6
  7694  090B  3001               	movlw	1	; select bank2/3
  7695  090C  0087               	movwf	7
  7696  090D  0827               	movf	readBuffer@addr^(0+128),w
  7697  090E  0728               	addwf	readBuffer@i^(0+128),w
  7698  090F  2114  3188         	fcall	_readByte
  7699  0911  0081               	movwf	1
  7700  0912  0AA8               	incf	readBuffer@i^(0+128),f
  7701  0913  2903               	goto	l7139
  7702  0914                     __end_of_readBuffer:	
  7703  0914                     __ptext11:	
  7704 ;; *************** function _readByte *****************
  7705 ;; Defined at:
  7706 ;;		line 52 in file "src/eeprom.c"
  7707 ;; Parameters:    Size  Location     Type
  7708 ;;  addr            1    wreg     unsigned char 
  7709 ;; Auto vars:     Size  Location     Type
  7710 ;;  addr            1    2[BANK1 ] unsigned char 
  7711 ;;  result          1    3[BANK1 ] unsigned char 
  7712 ;; Return value:  Size  Location     Type
  7713 ;;                  1    wreg      unsigned char 
  7714 ;; Registers used:
  7715 ;;		wreg, pclath, cstack
  7716 ;; Tracked objects:
  7717 ;;		On entry : 1F/1
  7718 ;;		On exit  : 1F/1
  7719 ;;		Unchanged: 0/0
  7720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7722 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7724 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7725 ;;Total ram usage:        2 bytes
  7726 ;; Hardware stack levels used:    1
  7727 ;; Hardware stack levels required when called:    5
  7728 ;; This function calls:
  7729 ;;		_DATAEE_ReadByte
  7730 ;; This function is called by:
  7731 ;;		_readBuffer
  7732 ;; This function uses a non-reentrant model
  7733 ;;
  7734                           
  7735                           
  7736                           ;psect for function _readByte
  7737  0914                     _readByte:	
  7738                           
  7739                           ;incstack = 0
  7740                           ; Regs used in _readByte: [wreg+pclath+cstack]
  7741                           ;readByte@addr stored from wreg
  7742  0914  00A2               	movwf	readByte@addr^(0+128)
  7743                           
  7744                           ;eeprom.c: 54: unsigned char result = DATAEE_ReadByte(0x7000 + addr);
  7745  0915  00A0               	movwf	DATAEE_ReadByte@bAdd^(0+128)
  7746  0916  3070               	movlw	112
  7747  0917  01A1               	clrf	(DATAEE_ReadByte@bAdd+1)^(0+128)
  7748  0918  07A1               	addwf	(DATAEE_ReadByte@bAdd+1)^(0+128),f
  7749  0919  211D               	fcall	_DATAEE_ReadByte
  7750  091A  0021               	movlb	1	; select bank1
  7751  091B  00A3               	movwf	readByte@result^(0+128)
  7752                           
  7753                           ;eeprom.c: 55: return result;
  7754  091C  0008               	return
  7755  091D                     __end_of_readByte:	
  7756  091D                     __ptext12:	
  7757 ;; *************** function _DATAEE_ReadByte *****************
  7758 ;; Defined at:
  7759 ;;		line 25 in file "src/eeprom.c"
  7760 ;; Parameters:    Size  Location     Type
  7761 ;;  bAdd            2    0[BANK1 ] unsigned int 
  7762 ;; Auto vars:     Size  Location     Type
  7763 ;;		None
  7764 ;; Return value:  Size  Location     Type
  7765 ;;                  1    wreg      unsigned char 
  7766 ;; Registers used:
  7767 ;;		wreg
  7768 ;; Tracked objects:
  7769 ;;		On entry : 1F/1
  7770 ;;		On exit  : 1F/11
  7771 ;;		Unchanged: 0/0
  7772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7773 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7776 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7777 ;;Total ram usage:        2 bytes
  7778 ;; Hardware stack levels used:    1
  7779 ;; Hardware stack levels required when called:    4
  7780 ;; This function calls:
  7781 ;;		Nothing
  7782 ;; This function is called by:
  7783 ;;		_readByte
  7784 ;; This function uses a non-reentrant model
  7785 ;;
  7786                           
  7787                           
  7788                           ;psect for function _DATAEE_ReadByte
  7789  091D                     _DATAEE_ReadByte:	
  7790                           
  7791                           ;eeprom.c: 27: NVMADRH = ((bAdd >> 8) & 0xFF);
  7792                           
  7793                           ;incstack = 0
  7794                           ; Regs used in _DATAEE_ReadByte: [wreg]
  7795  091D  0821               	movf	(DATAEE_ReadByte@bAdd^(0+128)+1),w
  7796  091E  0031               	movlb	17	; select bank17
  7797  091F  0092               	movwf	18	;volatile
  7798                           
  7799                           ;eeprom.c: 28: NVMADRL = (bAdd & 0xFF);
  7800  0920  0021               	movlb	1	; select bank1
  7801  0921  0820               	movf	DATAEE_ReadByte@bAdd^(0+128),w
  7802  0922  0031               	movlb	17	; select bank17
  7803  0923  0091               	movwf	17	;volatile
  7804                           
  7805                           ;eeprom.c: 29: NVMCON1bits.NVMREGS = 1;
  7806  0924  1715               	bsf	21,6	;volsfr
  7807                           
  7808                           ;eeprom.c: 30: NVMCON1bits.RD = 1;
  7809  0925  1415               	bsf	21,0	;volsfr
  7810                           
  7811                           ;eeprom.c: 31: __nop();
  7812  0926  0000               	nop
  7813                           
  7814                           ;eeprom.c: 32: __nop();
  7815  0927  0000               	nop
  7816                           
  7817                           ;eeprom.c: 34: return (NVMDATL);
  7818  0928  0031               	movlb	17	; select bank17
  7819  0929  0813               	movf	19,w	;volatile
  7820  092A  0008               	return
  7821  092B                     __end_of_DATAEE_ReadByte:	
  7822  092B                     PL66:	
  7823  092B  085E               	movf	initLed@j^(0+128),w
  7824  092C  00DB               	movwf	??_initLed^(0+128)
  7825  092D  302B               	movlw	(low ((_gLedPara| (0+512)+11)))& (0+255)
  7826  092E  35DB               	lslf	??_initLed^(0+128),f
  7827  092F  35DB               	lslf	??_initLed^(0+128),f
  7828  0930  075B               	addwf	??_initLed^(0+128),w
  7829  0931  00DC               	movwf	(??_initLed+1)^(0+128)
  7830  0932  085F               	movf	initLed@i^(0+128),w
  7831  0933  075C               	addwf	(??_initLed+1)^(0+128),w
  7832  0934  00DD               	movwf	(??_initLed+2)^(0+128)
  7833  0935  0086               	movwf	6
  7834  0936  0008               	return
  7835  0937                     __end_ofPL66:	
  7836  0937                     PL128:	
  7837  0937  0086               	movwf	6
  7838  0938  3002               	movlw	2	; select bank4/5
  7839  0939  0087               	movwf	7
  7840  093A  3065               	movlw	101
  7841  093B  0201               	subwf	1,w
  7842  093C  0008               	return
  7843  093D                     __end_ofPL128:	
  7844  093D                     __ptext43:	
  7845 ;; *************** function _initDynamic *****************
  7846 ;; Defined at:
  7847 ;;		line 269 in file "src/led.c"
  7848 ;; Parameters:    Size  Location     Type
  7849 ;;		None
  7850 ;; Auto vars:     Size  Location     Type
  7851 ;;  i               1   28[BANK1 ] unsigned char 
  7852 ;;  i               1   29[BANK1 ] unsigned char 
  7853 ;; Return value:  Size  Location     Type
  7854 ;;                  1    wreg      void 
  7855 ;; Registers used:
  7856 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7857 ;; Tracked objects:
  7858 ;;		On entry : 1F/0
  7859 ;;		On exit  : 1F/1
  7860 ;;		Unchanged: 0/0
  7861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7863 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7864 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7865 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  7866 ;;Total ram usage:        4 bytes
  7867 ;; Hardware stack levels used:    1
  7868 ;; Hardware stack levels required when called:    6
  7869 ;; This function calls:
  7870 ;;		___ftmul
  7871 ;;		___lwtoft
  7872 ;;		_updateDynamic
  7873 ;; This function is called by:
  7874 ;;		_DecodeDATA
  7875 ;;		_autoRun
  7876 ;;		_initLed
  7877 ;; This function uses a non-reentrant model
  7878 ;;
  7879                           
  7880                           
  7881                           ;psect for function _initDynamic
  7882  093D                     _initDynamic:	
  7883  093D                     l7401:	
  7884                           ;incstack = 0
  7885                           ; Regs used in _initDynamic: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7886                           
  7887                           
  7888                           ;led.c: 271: gDynPara.state = 0;
  7889  093D  0023               	movlb	3	; select bank3
  7890  093E  01BF               	clrf	(_gDynPara^(0+384)+31)	;volatile
  7891                           
  7892                           ;led.c: 272: gDynPara.num = 0;
  7893  093F  01C0               	clrf	(_gDynPara^(0+384)+32)	;volatile
  7894  0940  01C1               	clrf	((_gDynPara+1)^(0+384)+32)	;volatile
  7895                           
  7896                           ;led.c: 273: gLedRunPara.fPause = 0;
  7897  0941  0020               	movlb	0	; select bank0
  7898  0942  1249               	bcf	_gLedRunPara,4	;volatile
  7899                           
  7900                           ;led.c: 275: switch ( gLedRunPara.fDynamic )
  7901  0943  2ADE               	goto	l7669
  7902  0944                     l7405:	
  7903                           
  7904                           ;led.c: 278: gDynPara.fDyn = 0;
  7905  0944  30F0               	movlw	-16
  7906  0945  0023               	movlb	3	; select bank3
  7907  0946  05A0               	andwf	_gDynPara^(0+384),f	;volatile
  7908                           
  7909                           ;led.c: 279: gLedRunPara.nCurrentBrt[0] = 0;
  7910                           
  7911                           ;led.c: 280: gLedRunPara.nCurrentBrt[1] = 0;
  7912  0947  3186  26F2  3188   	fcall	PL12	;call to abstracted procedure
  7913                           
  7914                           ;led.c: 281: gLedRunPara.nCurrentBrt[2] = 250;
  7915  094A  30FA               	movlw	250
  7916  094B  00DA               	movwf	_gLedRunPara+17	;volatile
  7917  094C  01DB               	clrf	_gLedRunPara+18	;volatile
  7918                           
  7919                           ;led.c: 282: gLedRunPara.nCurrentBrt[3] = 200;
  7920                           
  7921                           ;led.c: 283: gDynPara.cnt = 500;
  7922  094D  3187  279D  3188   	fcall	PL114	;call to abstracted procedure
  7923  0950  2989               	goto	L13
  7924  0951                     l7417:	
  7925                           ;led.c: 284: break;
  7926                           
  7927                           
  7928                           ;led.c: 287: gDynPara.fDyn = 0x0C;
  7929  0951  0023               	movlb	3	; select bank3
  7930  0952  3187  2751  3188   	fcall	PL60	;call to abstracted procedure
  7931                           
  7932                           ;led.c: 288: gDynPara.fBrt = 0x04;
  7933                           
  7934                           ;led.c: 289: gDynPara.min[2] = 100;
  7935                           
  7936                           ;led.c: 290: gDynPara.max[2] = 212;
  7937                           
  7938                           ;led.c: 291: gDynPara.min[3] = 10;
  7939                           
  7940                           ;led.c: 292: gDynPara.max[3] = 100;
  7941  0955  3187  272F  3188   	fcall	PL44	;call to abstracted procedure
  7942                           
  7943                           ;led.c: 293: gLedRunPara.nCurrentBrt[0] = 0;
  7944                           
  7945                           ;led.c: 294: gLedRunPara.nCurrentBrt[1] = 0;
  7946  0958  3186  26F2  3188   	fcall	PL12	;call to abstracted procedure
  7947                           
  7948                           ;led.c: 295: gDynPara.delta[2] = 1.4;
  7949  095B  3187  2740  3188   	fcall	PL52	;call to abstracted procedure
  7950                           
  7951                           ;led.c: 296: gDynPara.delta[3] = 1.125;
  7952  095E  01BA               	clrf	(_gDynPara^(0+384)+26)	;volatile
  7953  095F  3090               	movlw	144
  7954  0960  00BB               	movwf	((_gDynPara+1)^(0+384)+26)	;volatile
  7955  0961  303F               	movlw	63
  7956  0962  00BC               	movwf	((_gDynPara+2)^(0+384)+26)	;volatile
  7957                           
  7958                           ;led.c: 297: gDynPara.cnt = 80;
  7959  0963  3050               	movlw	80
  7960  0964  00BD               	movwf	(_gDynPara^(0+384)+29)	;volatile
  7961  0965  01BE               	clrf	((_gDynPara+1)^(0+384)+29)	;volatile
  7962                           
  7963                           ;led.c: 298: break;
  7964  0966  2AEB               	goto	l7671
  7965  0967                     l7437:	
  7966                           
  7967                           ;led.c: 301: gDynPara.fDyn = 0x0F;
  7968  0967  300F               	movlw	15
  7969  0968  0023               	movlb	3	; select bank3
  7970                           
  7971                           ;led.c: 302: gDynPara.fBrt = 0x06;
  7972  0969  3192  2231  3188   	fcall	PL24	;call to abstracted procedure
  7973                           
  7974                           ;led.c: 303: gDynPara.min[0] = 0;
  7975                           
  7976                           ;led.c: 304: gDynPara.max[0] = 1000;
  7977                           
  7978                           ;led.c: 305: gDynPara.min[1] = 0;
  7979                           
  7980                           ;led.c: 306: gDynPara.max[1] = 500;
  7981                           
  7982                           ;led.c: 307: gDynPara.min[2] = 0;
  7983                           
  7984                           ;led.c: 308: gDynPara.max[2] = 1000;
  7985  096C  3191  21F8  3188   	fcall	PL2	;call to abstracted procedure
  7986                           
  7987                           ;led.c: 309: gDynPara.min[3] = 700;
  7988  096F  3192  222C  3188   	fcall	PL20	;call to abstracted procedure
  7989                           
  7990                           ;led.c: 310: gDynPara.max[3] = 1000;
  7991                           
  7992                           ;led.c: 311: gDynPara.delta[0] = 1;
  7993                           
  7994                           ;led.c: 312: gDynPara.delta[1] = 0.5;
  7995                           
  7996                           ;led.c: 313: gDynPara.delta[2] = 1;
  7997  0972  3192  221A  3188   	fcall	PL14	;call to abstracted procedure
  7998                           
  7999                           ;led.c: 314: gDynPara.delta[3] = 0.3;
  8000  0975  309A               	movlw	154
  8001  0976  00BA               	movwf	(_gDynPara^(0+384)+26)	;volatile
  8002  0977  3099               	movlw	153
  8003  0978  00BB               	movwf	((_gDynPara+1)^(0+384)+26)	;volatile
  8004  0979  303E               	movlw	62
  8005  097A  00BC               	movwf	((_gDynPara+2)^(0+384)+26)	;volatile
  8006                           
  8007                           ;led.c: 315: gDynPara.cnt = 1000;
  8008  097B  3003               	movlw	3
  8009  097C  00BE               	movwf	((_gDynPara+1)^(0+384)+29)	;volatile
  8010  097D  30E8               	movlw	232
  8011  097E  2989               	goto	L13
  8012  097F                     l7465:	
  8013                           ;led.c: 316: break;
  8014                           
  8015                           
  8016                           ;led.c: 319: gDynPara.fDyn = 0x01;
  8017  097F  0023               	movlb	3	; select bank3
  8018                           
  8019                           ;led.c: 320: gDynPara.fBrt = 0x00;
  8020                           
  8021                           ;led.c: 321: gDynPara.min[0] = 300;
  8022                           
  8023                           ;led.c: 322: gDynPara.max[0] = 700;
  8024                           
  8025                           ;led.c: 323: gLedRunPara.nCurrentBrt[1] = 0;
  8026                           
  8027                           ;led.c: 324: gLedRunPara.nCurrentBrt[2] = 1000;
  8028                           
  8029                           ;led.c: 325: gLedRunPara.nCurrentBrt[3] = 100;
  8030                           
  8031                           ;led.c: 326: gDynPara.delta[0] = 0.2;
  8032  0980  3186  26F8  3188   	fcall	PL16	;call to abstracted procedure
  8033  0983  00B2               	movwf	((_gDynPara+1)^(0+384)+17)	;volatile
  8034  0984  303E               	movlw	62
  8035  0985                     L14:	
  8036  0985  00B3               	movwf	((_gDynPara+2)^(0+384)+17)	;volatile
  8037  0986                     l7479:	
  8038                           
  8039                           ;led.c: 327: gDynPara.cnt = 2000;
  8040  0986  3007               	movlw	7
  8041  0987  00BE               	movwf	((_gDynPara+1)^(0+384)+29)	;volatile
  8042  0988  30D0               	movlw	208
  8043  0989                     L13:	
  8044  0989  00BD               	movwf	(_gDynPara^(0+384)+29)	;volatile
  8045                           
  8046                           ;led.c: 328: break;
  8047  098A  2AEB               	goto	l7671
  8048  098B                     l7481:	
  8049                           
  8050                           ;led.c: 331: gDynPara.fDyn = 0x0D;
  8051  098B  0023               	movlb	3	; select bank3
  8052                           
  8053                           ;led.c: 332: gDynPara.fBrt = 0x09;
  8054  098C  3192  224B  3188   	fcall	PL130	;call to abstracted procedure
  8055  098F  3890               	iorlw	144
  8056  0990  00A0               	movwf	_gDynPara^(0+384)	;volatile
  8057                           
  8058                           ;led.c: 333: gDynPara.min[0] = 0;
  8059                           
  8060                           ;led.c: 334: gDynPara.max[0] = 1000;
  8061  0991  3192  220C  3188   	fcall	PL4	;call to abstracted procedure
  8062                           
  8063                           ;led.c: 335: gDynPara.min[2] = 0;
  8064                           
  8065                           ;led.c: 336: gDynPara.max[2] = 1000;
  8066  0994  3187  2714  3188   	fcall	PL28	;call to abstracted procedure
  8067                           
  8068                           ;led.c: 337: gDynPara.min[3] = 500;
  8069                           
  8070                           ;led.c: 338: gDynPara.max[3] = 1000;
  8071  0997  23BA  3188         	fcall	PL36	;call to abstracted procedure
  8072                           
  8073                           ;led.c: 339: gLedRunPara.nCurrentBrt[1] = 250;
  8074  0999  30FA               	movlw	250
  8075  099A  0020               	movlb	0	; select bank0
  8076  099B  00D8               	movwf	_gLedRunPara+15	;volatile
  8077  099C  01D9               	clrf	_gLedRunPara+16	;volatile
  8078                           
  8079                           ;led.c: 340: gDynPara.delta[0] = 0.5;
  8080  099D  23F7  3188         	fcall	PL152	;call to abstracted procedure
  8081  099F  29B8               	goto	L17
  8082  09A0                     l7505:	
  8083                           ;led.c: 342: gDynPara.delta[3] = 0.25;
  8084                           
  8085                           ;led.c: 341: gDynPara.delta[2] = 0.5;
  8086                           
  8087                           
  8088                           ;led.c: 347: gDynPara.fDyn = 0x0E;
  8089  09A0  0023               	movlb	3	; select bank3
  8090  09A1  0820               	movf	_gDynPara^(0+384),w	;volatile
  8091  09A2  39F0               	andlw	-16
  8092  09A3  380E               	iorlw	14
  8093                           
  8094                           ;led.c: 348: gDynPara.fBrt = 0x08;
  8095  09A4  3192  2245  3188   	fcall	PL120	;call to abstracted procedure
  8096                           
  8097                           ;led.c: 349: gDynPara.min[1] = 0;
  8098                           
  8099                           ;led.c: 350: gDynPara.max[1] = 500;
  8100  09A7  3192  2213  3188   	fcall	PL8	;call to abstracted procedure
  8101                           
  8102                           ;led.c: 351: gDynPara.min[2] = 0;
  8103                           
  8104                           ;led.c: 352: gDynPara.max[2] = 1000;
  8105  09AA  3187  2714  3188   	fcall	PL28	;call to abstracted procedure
  8106                           
  8107                           ;led.c: 353: gDynPara.min[3] = 500;
  8108                           
  8109                           ;led.c: 354: gDynPara.max[3] = 1000;
  8110  09AD  23BA  3188         	fcall	PL36	;call to abstracted procedure
  8111                           
  8112                           ;led.c: 355: gLedRunPara.nCurrentBrt[0] = 0;
  8113  09AF  0020               	movlb	0	; select bank0
  8114  09B0  01D6               	clrf	_gLedRunPara+13	;volatile
  8115  09B1  01D7               	clrf	_gLedRunPara+14	;volatile
  8116                           
  8117                           ;led.c: 356: gDynPara.delta[1] = 0.25;
  8118  09B2  0023               	movlb	3	; select bank3
  8119  09B3  01B4               	clrf	(_gDynPara^(0+384)+20)	;volatile
  8120  09B4  3080               	movlw	128
  8121  09B5  00B5               	movwf	((_gDynPara+1)^(0+384)+20)	;volatile
  8122  09B6  303E               	movlw	62
  8123  09B7  00B6               	movwf	((_gDynPara+2)^(0+384)+20)	;volatile
  8124  09B8                     L17:	
  8125                           
  8126                           ;led.c: 357: gDynPara.delta[2] = 0.5;
  8127  09B8  01B7               	clrf	(_gDynPara^(0+384)+23)	;volatile
  8128  09B9  01B8               	clrf	((_gDynPara+1)^(0+384)+23)	;volatile
  8129  09BA  303F               	movlw	63
  8130  09BB  00B9               	movwf	((_gDynPara+2)^(0+384)+23)	;volatile
  8131  09BC  29F2               	goto	l7569
  8132  09BD                     l7529:	
  8133                           ;led.c: 358: gDynPara.delta[3] = 0.25;
  8134                           
  8135                           
  8136                           ;led.c: 363: gDynPara.fDyn = 0x07;
  8137  09BD  0023               	movlb	3	; select bank3
  8138                           
  8139                           ;led.c: 364: gDynPara.fBrt = 0x01;
  8140  09BE  3192  2236  3188   	fcall	PL94	;call to abstracted procedure
  8141  09C1  3810               	iorlw	16
  8142                           
  8143                           ;led.c: 365: gDynPara.min[0] = 0;
  8144                           
  8145                           ;led.c: 366: gDynPara.max[0] = 1000;
  8146                           
  8147                           ;led.c: 367: gDynPara.min[1] = 0;
  8148                           
  8149                           ;led.c: 368: gDynPara.max[1] = 500;
  8150                           
  8151                           ;led.c: 369: gDynPara.min[2] = 0;
  8152                           
  8153                           ;led.c: 370: gDynPara.max[2] = 1000;
  8154  09C2  3191  21F8  3188   	fcall	PL2	;call to abstracted procedure
  8155                           
  8156                           ;led.c: 371: gLedRunPara.nCurrentBrt[3] = 1000;
  8157  09C5  3003               	movlw	3
  8158  09C6  0020               	movlb	0	; select bank0
  8159  09C7  00DD               	movwf	_gLedRunPara+20	;volatile
  8160  09C8  30E8               	movlw	232
  8161  09C9  00DC               	movwf	_gLedRunPara+19	;volatile
  8162                           
  8163                           ;led.c: 372: gDynPara.delta[0] = 0.5;
  8164  09CA  23F7  3188         	fcall	PL152	;call to abstracted procedure
  8165                           
  8166                           ;led.c: 373: gDynPara.delta[0] = 0.25;
  8167  09CC  01B1               	clrf	(_gDynPara^(0+384)+17)	;volatile
  8168  09CD  3080               	movlw	128
  8169  09CE  00B2               	movwf	((_gDynPara+1)^(0+384)+17)	;volatile
  8170  09CF  303E               	movlw	62
  8171  09D0  00B3               	movwf	((_gDynPara+2)^(0+384)+17)	;volatile
  8172                           
  8173                           ;led.c: 374: gDynPara.delta[0] = 0.5;
  8174  09D1  01B1               	clrf	(_gDynPara^(0+384)+17)	;volatile
  8175  09D2  01B2               	clrf	((_gDynPara+1)^(0+384)+17)	;volatile
  8176  09D3  303F               	movlw	63
  8177  09D4  2985               	goto	L14
  8178  09D5                     l7553:	
  8179                           
  8180                           ;led.c: 379: gDynPara.fDyn = 0x09;
  8181  09D5  0023               	movlb	3	; select bank3
  8182  09D6  0820               	movf	_gDynPara^(0+384),w	;volatile
  8183  09D7  39F0               	andlw	-16
  8184  09D8  3809               	iorlw	9
  8185  09D9  00A0               	movwf	_gDynPara^(0+384)	;volatile
  8186                           
  8187                           ;led.c: 380: gDynPara.fBrt = 0x00;
  8188  09DA  300F               	movlw	-241
  8189  09DB  05A0               	andwf	_gDynPara^(0+384),f	;volatile
  8190                           
  8191                           ;led.c: 381: gDynPara.min[0] = 400;
  8192  09DC  3001               	movlw	1
  8193  09DD  00A2               	movwf	((_gDynPara+1)^(0+384)+1)	;volatile
  8194  09DE  3090               	movlw	144
  8195  09DF  00A1               	movwf	(_gDynPara^(0+384)+1)	;volatile
  8196                           
  8197                           ;led.c: 382: gDynPara.max[0] = 640;
  8198  09E0  3002               	movlw	2
  8199  09E1  00AA               	movwf	((_gDynPara+1)^(0+384)+9)	;volatile
  8200  09E2  3080               	movlw	128
  8201  09E3  00A9               	movwf	(_gDynPara^(0+384)+9)	;volatile
  8202                           
  8203                           ;led.c: 383: gDynPara.min[3] = 500;
  8204                           
  8205                           ;led.c: 384: gDynPara.max[3] = 1000;
  8206  09E4  23BA  3188         	fcall	PL36	;call to abstracted procedure
  8207                           
  8208                           ;led.c: 385: gLedRunPara.nCurrentBrt[1] = 0;
  8209  09E6  0020               	movlb	0	; select bank0
  8210  09E7  01D8               	clrf	_gLedRunPara+15	;volatile
  8211  09E8  01D9               	clrf	_gLedRunPara+16	;volatile
  8212                           
  8213                           ;led.c: 386: gLedRunPara.nCurrentBrt[2] = 0;
  8214  09E9  01DA               	clrf	_gLedRunPara+17	;volatile
  8215  09EA  01DB               	clrf	_gLedRunPara+18	;volatile
  8216                           
  8217                           ;led.c: 387: gDynPara.delta[0] = 0.12;
  8218  09EB  30C3               	movlw	195
  8219  09EC  0023               	movlb	3	; select bank3
  8220  09ED  00B1               	movwf	(_gDynPara^(0+384)+17)	;volatile
  8221  09EE  30F5               	movlw	245
  8222  09EF  00B2               	movwf	((_gDynPara+1)^(0+384)+17)	;volatile
  8223  09F0  303D               	movlw	61
  8224  09F1  00B3               	movwf	((_gDynPara+2)^(0+384)+17)	;volatile
  8225  09F2                     l7569:	
  8226                           
  8227                           ;led.c: 388: gDynPara.delta[3] = 0.25;
  8228  09F2  01BA               	clrf	(_gDynPara^(0+384)+26)	;volatile
  8229  09F3  3080               	movlw	128
  8230  09F4  00BB               	movwf	((_gDynPara+1)^(0+384)+26)	;volatile
  8231  09F5  303E               	movlw	62
  8232  09F6  00BC               	movwf	((_gDynPara+2)^(0+384)+26)	;volatile
  8233  09F7  2986               	goto	l7479
  8234  09F8                     l7573:	
  8235                           
  8236                           ;led.c: 393: gDynPara.fDyn = 0x04;
  8237  09F8  0023               	movlb	3	; select bank3
  8238                           
  8239                           ;led.c: 394: gDynPara.fBrt = 0x00;
  8240  09F9  23DB  3188         	fcall	PL72	;call to abstracted procedure
  8241                           
  8242                           ;led.c: 395: gDynPara.min[2] = 300;
  8243  09FB  3001               	movlw	1
  8244  09FC  00A6               	movwf	((_gDynPara+1)^(0+384)+5)	;volatile
  8245  09FD  302C               	movlw	44
  8246  09FE  00A5               	movwf	(_gDynPara^(0+384)+5)	;volatile
  8247                           
  8248                           ;led.c: 396: gDynPara.max[2] = 1000;
  8249  09FF  23C3               	fcall	PL50	;call to abstracted procedure
  8250                           
  8251                           ;led.c: 397: gLedRunPara.nCurrentBrt[0] = 0;
  8252                           
  8253                           ;led.c: 398: gLedRunPara.nCurrentBrt[1] = 0;
  8254  0A00  3186  26F2  3188   	fcall	PL12	;call to abstracted procedure
  8255                           
  8256                           ;led.c: 399: gLedRunPara.nCurrentBrt[3] = 0;
  8257  0A03  01DC               	clrf	_gLedRunPara+19	;volatile
  8258  0A04  01DD               	clrf	_gLedRunPara+20	;volatile
  8259                           
  8260                           ;led.c: 400: gDynPara.delta[2] = 0.35;
  8261  0A05  3033               	movlw	51
  8262  0A06  0023               	movlb	3	; select bank3
  8263  0A07  00B7               	movwf	(_gDynPara^(0+384)+23)	;volatile
  8264  0A08  30B3               	movlw	179
  8265  0A09  2A2F               	goto	L16
  8266  0A0A                     l7589:	
  8267                           
  8268                           ;led.c: 405: gDynPara.fDyn = 0x04;
  8269  0A0A  0023               	movlb	3	; select bank3
  8270                           
  8271                           ;led.c: 406: gDynPara.fBrt = 0x00;
  8272  0A0B  23DB               	fcall	PL72	;call to abstracted procedure
  8273                           
  8274                           ;led.c: 407: gDynPara.min[2] = 100;
  8275  0A0C  3064               	movlw	100
  8276  0A0D  00A5               	movwf	(_gDynPara^(0+384)+5)	;volatile
  8277  0A0E  01A6               	clrf	((_gDynPara+1)^(0+384)+5)	;volatile
  8278                           
  8279                           ;led.c: 408: gDynPara.max[2] = 400;
  8280  0A0F  3001               	movlw	1
  8281  0A10  00AE               	movwf	((_gDynPara+1)^(0+384)+13)	;volatile
  8282  0A11  3090               	movlw	144
  8283  0A12  00AD               	movwf	(_gDynPara^(0+384)+13)	;volatile
  8284                           
  8285                           ;led.c: 409: gLedRunPara.nCurrentBrt[0] = 0;
  8286                           
  8287                           ;led.c: 410: gLedRunPara.nCurrentBrt[1] = 0;
  8288  0A13  3186  26F2  3188   	fcall	PL12	;call to abstracted procedure
  8289                           
  8290                           ;led.c: 411: gLedRunPara.nCurrentBrt[3] = 0;
  8291  0A16  01DC               	clrf	_gLedRunPara+19	;volatile
  8292  0A17  01DD               	clrf	_gLedRunPara+20	;volatile
  8293                           
  8294                           ;led.c: 412: gDynPara.delta[2] = 0.15;
  8295  0A18  309A               	movlw	154
  8296  0A19  0023               	movlb	3	; select bank3
  8297  0A1A  00B7               	movwf	(_gDynPara^(0+384)+23)	;volatile
  8298  0A1B  3019               	movlw	25
  8299  0A1C  2A2F               	goto	L16
  8300  0A1D                     l7605:	
  8301                           
  8302                           ;led.c: 417: gDynPara.fDyn = 0x04;
  8303  0A1D  0023               	movlb	3	; select bank3
  8304                           
  8305                           ;led.c: 418: gDynPara.fBrt = 0x00;
  8306  0A1E  23DB  3188         	fcall	PL72	;call to abstracted procedure
  8307                           
  8308                           ;led.c: 419: gDynPara.min[2] = 400;
  8309  0A20  3001               	movlw	1
  8310  0A21  00A6               	movwf	((_gDynPara+1)^(0+384)+5)	;volatile
  8311  0A22  3090               	movlw	144
  8312  0A23  00A5               	movwf	(_gDynPara^(0+384)+5)	;volatile
  8313                           
  8314                           ;led.c: 420: gDynPara.max[2] = 1000;
  8315  0A24  23C3               	fcall	PL50	;call to abstracted procedure
  8316                           
  8317                           ;led.c: 421: gLedRunPara.nCurrentBrt[0] = 0;
  8318                           
  8319                           ;led.c: 422: gLedRunPara.nCurrentBrt[1] = 0;
  8320  0A25  3186  26F2  3188   	fcall	PL12	;call to abstracted procedure
  8321                           
  8322                           ;led.c: 423: gLedRunPara.nCurrentBrt[3] = 100;
  8323  0A28  3064               	movlw	100
  8324  0A29  00DC               	movwf	_gLedRunPara+19	;volatile
  8325  0A2A  01DD               	clrf	_gLedRunPara+20	;volatile
  8326                           
  8327                           ;led.c: 424: gDynPara.delta[2] = 0.3;
  8328  0A2B  309A               	movlw	154
  8329  0A2C  0023               	movlb	3	; select bank3
  8330  0A2D  00B7               	movwf	(_gDynPara^(0+384)+23)	;volatile
  8331  0A2E  3099               	movlw	153
  8332  0A2F                     L16:	
  8333  0A2F  00B8               	movwf	((_gDynPara+1)^(0+384)+23)	;volatile
  8334  0A30  303E               	movlw	62
  8335  0A31  00B9               	movwf	((_gDynPara+2)^(0+384)+23)	;volatile
  8336  0A32  2986               	goto	l7479
  8337  0A33                     l514:	
  8338                           ;led.c: 428: case 12:
  8339                           
  8340                           
  8341                           ;led.c: 429: if ( gLedPara.mPara.manualPara.fOn &&
  8342                           ;led.c: 430: ( ( gLedRunPara.nCurrentBrt[0] > 0 ) || ( gLedRunPara.nCurrentBrt[1] > 0 ) 
      +                          ) ||
  8343                           ;led.c: 431: ( gLedRunPara.nCurrentBrt[2] > 0 ) || ( gLedRunPara.nCurrentBrt[3] > 0 ) )
  8344  0A33  0024               	movlb	4	; select bank4
  8345  0A34  1C21               	btfss	(_gLedPara^(0+512)+1),0	;volatile
  8346  0A35  2A3F               	goto	l7625
  8347  0A36  0020               	movlb	0	; select bank0
  8348  0A37  0856               	movf	_gLedRunPara+13,w	;volatile
  8349  0A38  0457               	iorwf	_gLedRunPara+14,w	;volatile
  8350  0A39  1D03               	btfss	3,2
  8351  0A3A  2A48               	goto	l7629
  8352  0A3B  0858               	movf	_gLedRunPara+15,w	;volatile
  8353  0A3C  0459               	iorwf	_gLedRunPara+16,w	;volatile
  8354  0A3D  1D03               	btfss	3,2
  8355  0A3E  2A48               	goto	l7629
  8356  0A3F                     l7625:	
  8357  0A3F  0020               	movlb	0	; select bank0
  8358  0A40  085A               	movf	_gLedRunPara+17,w	;volatile
  8359  0A41  045B               	iorwf	_gLedRunPara+18,w	;volatile
  8360  0A42  1D03               	btfss	3,2
  8361  0A43  2A48               	goto	l7629
  8362  0A44  085C               	movf	_gLedRunPara+19,w	;volatile
  8363  0A45  045D               	iorwf	_gLedRunPara+20,w	;volatile
  8364  0A46  1903               	btfsc	3,2
  8365  0A47  2A9B               	goto	l7647
  8366  0A48                     l7629:	
  8367                           
  8368                           ;led.c: 432: {
  8369                           ;led.c: 433: for ( unsigned char i = 0; i < 4; i++ )
  8370  0A48  0021               	movlb	1	; select bank1
  8371  0A49  01BD               	clrf	initDynamic@i^(0+128)
  8372  0A4A                     l520:	
  8373                           
  8374                           ;led.c: 434: {
  8375                           ;led.c: 435: gLedPara.mPara.manualPara.fOn = 0;
  8376  0A4A  0024               	movlb	4	; select bank4
  8377  0A4B  1021               	bcf	(_gLedPara^(0+512)+1),0	;volatile
  8378                           
  8379                           ;led.c: 436: gLedRunPara.nTargetBrt[i] = 0;
  8380  0A4C  0021               	movlb	1	; select bank1
  8381  0A4D  353D               	lslf	initDynamic@i^(0+128),w
  8382  0A4E  23E9  3188         	fcall	PL92	;call to abstracted procedure
  8383                           
  8384                           ;led.c: 437: gDynPara.min[i] = 0;
  8385  0A50  353D               	lslf	initDynamic@i^(0+128),w
  8386  0A51  3EA1               	addlw	(low ((_gDynPara| (0+256)+1)))& (0+255)
  8387  0A52  23E2  3188         	fcall	PL90	;call to abstracted procedure
  8388                           
  8389                           ;led.c: 438: if ( gLedRunPara.nCurrentBrt[i] > 0 )
  8390  0A54  353D               	lslf	initDynamic@i^(0+128),w
  8391  0A55  3E56               	addlw	(low ((_gLedRunPara| 0+13)))& (0+255)
  8392  0A56  0086               	movwf	6
  8393  0A57  0187               	clrf	7
  8394  0A58  0016               	moviw fsr1++
  8395  0A59  0401               	iorwf	1,w
  8396  0A5A  1903               	btfsc	3,2
  8397  0A5B  2A8B               	goto	l7641
  8398                           
  8399                           ;led.c: 439: {
  8400                           ;led.c: 440: gDynPara.max[i] = gLedRunPara.nCurrentBrt[i];
  8401  0A5C  353D               	lslf	initDynamic@i^(0+128),w
  8402  0A5D  3E56               	addlw	(low ((_gLedRunPara| 0+13)))& (0+255)
  8403  0A5E  0086               	movwf	6
  8404  0A5F  0187               	clrf	7
  8405  0A60  353D               	lslf	initDynamic@i^(0+128),w
  8406  0A61  3EA9               	addlw	(low ((_gDynPara| (0+256)+9)))& (0+255)
  8407  0A62  0084               	movwf	4
  8408  0A63  3001               	movlw	1	; select bank3/4
  8409  0A64  0085               	movwf	5
  8410  0A65  3F40               	moviw [0]fsr1
  8411  0A66  3F80               	movwi [0]fsr0
  8412  0A67  3F41               	moviw [1]fsr1
  8413  0A68  3F81               	movwi [1]fsr0
  8414                           
  8415                           ;led.c: 441: gDynPara.delta[i] = 0.000032 * gLedRunPara.nCurrentBrt[i];
  8416  0A69  3038               	movlw	56
  8417  0A6A  00AB               	movwf	___ftmul@f1^(0+128)
  8418  0A6B  3006               	movlw	6
  8419  0A6C  00AC               	movwf	(___ftmul@f1+1)^(0+128)
  8420  0A6D  3038               	movlw	56
  8421  0A6E  00AD               	movwf	(___ftmul@f1+2)^(0+128)
  8422  0A6F  353D               	lslf	initDynamic@i^(0+128),w
  8423  0A70  3E56               	addlw	(low ((_gLedRunPara| 0+13)))& (0+255)
  8424  0A71  0086               	movwf	6
  8425  0A72  3F40               	moviw [0]fsr1
  8426  0A73  00A8               	movwf	___lwtoft@c^(0+128)
  8427  0A74  3F41               	moviw [1]fsr1
  8428  0A75  00A9               	movwf	(___lwtoft@c+1)^(0+128)
  8429  0A76  2348  3188         	fcall	___lwtoft
  8430  0A78  0828               	movf	?___lwtoft^(0+128),w
  8431  0A79  00AE               	movwf	___ftmul@f2^(0+128)
  8432  0A7A  0829               	movf	(?___lwtoft+1)^(0+128),w
  8433  0A7B  00AF               	movwf	(___ftmul@f2+1)^(0+128)
  8434  0A7C  082A               	movf	(?___lwtoft+2)^(0+128),w
  8435  0A7D  00B0               	movwf	(___ftmul@f2+2)^(0+128)
  8436  0A7E  22EC  3188         	fcall	___ftmul
  8437  0A80  2403  3188         	fcall	PL176	;call to abstracted procedure
  8438  0A82  3001               	movlw	1	; select bank3/4
  8439  0A83  0087               	movwf	7
  8440  0A84  082B               	movf	?___ftmul^(0+128),w
  8441  0A85  3FC0               	movwi [0]fsr1
  8442  0A86  082C               	movf	(?___ftmul+1)^(0+128),w
  8443  0A87  3FC1               	movwi [1]fsr1
  8444  0A88  082D               	movf	(?___ftmul+2)^(0+128),w
  8445  0A89  3FC2               	movwi [2]fsr1
  8446                           
  8447                           ;led.c: 442: }
  8448  0A8A  2A95               	goto	l7643
  8449  0A8B                     l7641:	
  8450                           
  8451                           ;led.c: 443: else
  8452                           ;led.c: 444: {
  8453                           ;led.c: 445: gDynPara.max[i] = 0;
  8454  0A8B  353D               	lslf	initDynamic@i^(0+128),w
  8455  0A8C  3EA9               	addlw	(low ((_gDynPara| (0+256)+9)))& (0+255)
  8456  0A8D  23E2  3188         	fcall	PL90	;call to abstracted procedure
  8457                           
  8458                           ;led.c: 446: gDynPara.delta[i] = 0;
  8459  0A8F  2403  3188         	fcall	PL176	;call to abstracted procedure
  8460  0A91  3000               	movlw	0
  8461  0A92  3FC0               	movwi [0]fsr1
  8462  0A93  3FC1               	movwi [1]fsr1
  8463  0A94  3FC2               	movwi [2]fsr1
  8464  0A95                     l7643:	
  8465  0A95  3004               	movlw	4
  8466  0A96  0ABD               	incf	initDynamic@i^(0+128),f
  8467  0A97  023D               	subwf	initDynamic@i^(0+128),w
  8468  0A98  1803               	btfsc	3,0
  8469  0A99  2AD2               	goto	l7659
  8470  0A9A  2A4A               	goto	l520
  8471  0A9B                     l7647:	
  8472                           
  8473                           ;led.c: 450: else
  8474                           ;led.c: 451: {
  8475                           ;led.c: 452: for ( unsigned char i = 0; i < 4; i++ )
  8476  0A9B  0021               	movlb	1	; select bank1
  8477  0A9C  01BC               	clrf	initDynamic@i_943^(0+128)
  8478  0A9D                     l525:	
  8479                           
  8480                           ;led.c: 453: {
  8481                           ;led.c: 454: gLedPara.mPara.manualPara.fOn = 1;
  8482  0A9D  0024               	movlb	4	; select bank4
  8483  0A9E  1421               	bsf	(_gLedPara^(0+512)+1),0	;volatile
  8484                           
  8485                           ;led.c: 455: gLedPara.mPara.manualPara.nBrt[i] = 1000;
  8486  0A9F  30E8               	movlw	232
  8487  0AA0  0021               	movlb	1	; select bank1
  8488  0AA1  00BA               	movwf	??_initDynamic^(0+128)
  8489  0AA2  3003               	movlw	3
  8490  0AA3  00BB               	movwf	(??_initDynamic^(0+128)+1)
  8491  0AA4  353C               	lslf	initDynamic@i_943^(0+128),w
  8492  0AA5  3E23               	addlw	(low ((_gLedPara| (0+512)+3)))& (0+255)
  8493  0AA6  0086               	movwf	6
  8494  0AA7  3002               	movlw	2	; select bank4/5
  8495  0AA8  0087               	movwf	7
  8496  0AA9  083A               	movf	??_initDynamic^(0+128),w
  8497  0AAA  3FC0               	movwi [0]fsr1
  8498  0AAB  083B               	movf	(??_initDynamic^(0+128)+1),w
  8499  0AAC  3FC1               	movwi [1]fsr1
  8500                           
  8501                           ;led.c: 456: gLedRunPara.nTargetBrt[i] = 1000;
  8502  0AAD  23FD  3188         	fcall	PL174	;call to abstracted procedure
  8503  0AAF  3E4E               	addlw	(low ((_gLedRunPara| 0+5)))& (0+255)
  8504  0AB0  0086               	movwf	6
  8505  0AB1  0187               	clrf	7
  8506  0AB2  083A               	movf	??_initDynamic^(0+128),w
  8507  0AB3  3FC0               	movwi [0]fsr1
  8508  0AB4  083B               	movf	(??_initDynamic^(0+128)+1),w
  8509  0AB5  3FC1               	movwi [1]fsr1
  8510                           
  8511                           ;led.c: 457: gDynPara.min[i] = 0;
  8512  0AB6  353C               	lslf	initDynamic@i_943^(0+128),w
  8513  0AB7  3EA1               	addlw	(low ((_gDynPara| (0+256)+1)))& (0+255)
  8514  0AB8  23E2  3188         	fcall	PL90	;call to abstracted procedure
  8515                           
  8516                           ;led.c: 458: gDynPara.max[i] = 1000;
  8517  0ABA  23FD  3188         	fcall	PL174	;call to abstracted procedure
  8518  0ABC  3EA9               	addlw	(low ((_gDynPara| (0+256)+9)))& (0+255)
  8519  0ABD  0086               	movwf	6
  8520  0ABE  083A               	movf	??_initDynamic^(0+128),w
  8521  0ABF  3FC0               	movwi [0]fsr1
  8522  0AC0  083B               	movf	(??_initDynamic^(0+128)+1),w
  8523  0AC1  3FC1               	movwi [1]fsr1
  8524                           
  8525                           ;led.c: 459: gDynPara.delta[i] = 0.000032 * 1000;
  8526  0AC2  083C               	movf	initDynamic@i_943^(0+128),w
  8527  0AC3  073C               	addwf	initDynamic@i_943^(0+128),w
  8528  0AC4  073C               	addwf	initDynamic@i_943^(0+128),w
  8529  0AC5  3EB1               	addlw	(low ((_gDynPara| (0+256)+17)))& (0+255)
  8530  0AC6  0086               	movwf	6
  8531  0AC7  3012               	movlw	18
  8532  0AC8  3FC0               	movwi [0]fsr1
  8533  0AC9  3003               	movlw	3
  8534  0ACA  3FC1               	movwi [1]fsr1
  8535  0ACB  303D               	movlw	61
  8536  0ACC  3FC2               	movwi [2]fsr1
  8537  0ACD  3004               	movlw	4
  8538  0ACE  0ABC               	incf	initDynamic@i_943^(0+128),f
  8539  0ACF  023C               	subwf	initDynamic@i_943^(0+128),w
  8540  0AD0  1C03               	skipc
  8541  0AD1  2A9D               	goto	l525
  8542  0AD2                     l7659:	
  8543                           
  8544                           ;led.c: 460: }
  8545                           ;led.c: 461: }
  8546                           ;led.c: 462: gDynPara.fDyn = 0;
  8547  0AD2  30F0               	movlw	-16
  8548  0AD3  0023               	movlb	3	; select bank3
  8549  0AD4  05A0               	andwf	_gDynPara^(0+384),f	;volatile
  8550                           
  8551                           ;led.c: 463: gDynPara.cnt = 31250;
  8552  0AD5  307A               	movlw	122
  8553  0AD6  00BE               	movwf	((_gDynPara+1)^(0+384)+29)	;volatile
  8554  0AD7  3012               	movlw	18
  8555  0AD8  00BD               	movwf	(_gDynPara^(0+384)+29)	;volatile
  8556                           
  8557                           ;led.c: 464: gLedRunPara.fSave = 1;
  8558  0AD9  0020               	movlb	0	; select bank0
  8559  0ADA  1549               	bsf	_gLedRunPara,2	;volatile
  8560                           
  8561                           ;led.c: 465: gLedRunPara.nSaveDelayCount = 3;
  8562  0ADB  3003               	movlw	3
  8563  0ADC  00CC               	movwf	_gLedRunPara+3	;volatile
  8564                           
  8565                           ;led.c: 466: break;
  8566  0ADD  2AEB               	goto	l7671
  8567  0ADE                     l7669:	
  8568  0ADE  084A               	movf	_gLedRunPara+1,w	;volatile
  8569                           
  8570                           ; Switch size 1, requested type "space"
  8571                           ; Number of cases is 12, Range of values is 1 to 12
  8572                           ; switch strategies available:
  8573                           ; Name         Instructions Cycles
  8574                           ; direct_byte           33     9 (fixed)
  8575                           ; simple_byte           37    19 (average)
  8576                           ; jumptable            263     9 (fixed)
  8577                           ;	Chosen strategy is direct_byte
  8578  0ADF  3EFF               	addlw	-1
  8579  0AE0  1C03               	skipc
  8580  0AE1  2AEB               	goto	l7671
  8581  0AE2  0084               	movwf	4
  8582  0AE3  300C               	movlw	12
  8583  0AE4  0204               	subwf	4,w
  8584  0AE5  1803               	skipnc
  8585  0AE6  2AEB               	goto	l7671
  8586  0AE7  3190               	movlp	high S8575
  8587  0AE8  3504               	lslf	4,w
  8588  0AE9  3E96               	addlw	low S8575
  8589  0AEA  0082               	movwf	2
  8590  0AEB                     l7671:	
  8591                           
  8592                           ;led.c: 470: updateDynamic();
  8593  0AEB  2B96               	ljmp	l7107
  8594  0AEC                     __end_of_initDynamic:	
  8595  0AEC                     __ptext46:	
  8596 ;; *************** function ___ftmul *****************
  8597 ;; Defined at:
  8598 ;;		line 62 in file "D:\Program Files\Microchip\xc8\v1.41\sources\common\ftmul.c"
  8599 ;; Parameters:    Size  Location     Type
  8600 ;;  f1              3   11[BANK1 ] float 
  8601 ;;  f2              3   14[BANK1 ] float 
  8602 ;; Auto vars:     Size  Location     Type
  8603 ;;  f3_as_produc    3   21[BANK1 ] unsigned um
  8604 ;;  sign            1   25[BANK1 ] unsigned char 
  8605 ;;  cntr            1   24[BANK1 ] unsigned char 
  8606 ;;  exp             1   20[BANK1 ] unsigned char 
  8607 ;; Return value:  Size  Location     Type
  8608 ;;                  3   11[BANK1 ] float 
  8609 ;; Registers used:
  8610 ;;		wreg, status,2, status,0, pclath, cstack
  8611 ;; Tracked objects:
  8612 ;;		On entry : 1F/1
  8613 ;;		On exit  : 1F/1
  8614 ;;		Unchanged: 0/0
  8615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8616 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  8617 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  8618 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8619 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0
  8620 ;;Total ram usage:       15 bytes
  8621 ;; Hardware stack levels used:    1
  8622 ;; Hardware stack levels required when called:    5
  8623 ;; This function calls:
  8624 ;;		___ftpack
  8625 ;; This function is called by:
  8626 ;;		_initDynamic
  8627 ;; This function uses a non-reentrant model
  8628 ;;
  8629                           
  8630                           
  8631                           ;psect for function ___ftmul
  8632  0AEC                     ___ftmul:	
  8633                           
  8634                           ;incstack = 0
  8635                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8636  0AEC  082B               	movf	___ftmul@f1^(0+128),w
  8637  0AED  00B1               	movwf	??___ftmul^(0+128)
  8638  0AEE  082C               	movf	(___ftmul@f1+1)^(0+128),w
  8639  0AEF  00B2               	movwf	(??___ftmul^(0+128)+1)
  8640  0AF0  082D               	movf	(___ftmul@f1+2)^(0+128),w
  8641  0AF1  00B3               	movwf	(??___ftmul^(0+128)+2)
  8642  0AF2  1003               	clrc
  8643  0AF3  0D32               	rlf	(??___ftmul^(0+128)+1),w
  8644  0AF4  0D33               	rlf	(??___ftmul^(0+128)+2),w
  8645  0AF5  00B4               	movwf	___ftmul@exp^(0+128)
  8646  0AF6  0834               	movf	___ftmul@exp^(0+128),w
  8647  0AF7  1D03               	btfss	3,2
  8648  0AF8  2AFA               	goto	l7145
  8649  0AF9  2C09               	ljmp	PL180	;call to abstracted procedure
  8650  0AFA                     l7145:	
  8651  0AFA  082E               	movf	___ftmul@f2^(0+128),w
  8652  0AFB  00B1               	movwf	??___ftmul^(0+128)
  8653  0AFC  082F               	movf	(___ftmul@f2+1)^(0+128),w
  8654  0AFD  00B2               	movwf	(??___ftmul^(0+128)+1)
  8655  0AFE  0830               	movf	(___ftmul@f2+2)^(0+128),w
  8656  0AFF  00B3               	movwf	(??___ftmul^(0+128)+2)
  8657  0B00  1003               	clrc
  8658  0B01  0D32               	rlf	(??___ftmul^(0+128)+1),w
  8659  0B02  0D33               	rlf	(??___ftmul^(0+128)+2),w
  8660  0B03  00B9               	movwf	___ftmul@sign^(0+128)
  8661  0B04  0839               	movf	___ftmul@sign^(0+128),w
  8662  0B05  1D03               	btfss	3,2
  8663  0B06  2B08               	goto	l7149
  8664  0B07  2C09               	ljmp	PL180	;call to abstracted procedure
  8665  0B08                     l7149:	
  8666  0B08  0839               	movf	___ftmul@sign^(0+128),w
  8667  0B09  3E7B               	addlw	123
  8668  0B0A  07B4               	addwf	___ftmul@exp^(0+128),f
  8669  0B0B  082D               	movf	(___ftmul@f1^(0+128)+2),w
  8670  0B0C  00B9               	movwf	___ftmul@sign^(0+128)
  8671  0B0D  0830               	movf	(___ftmul@f2^(0+128)+2),w
  8672  0B0E  06B9               	xorwf	___ftmul@sign^(0+128),f
  8673  0B0F  3080               	movlw	128
  8674  0B10  05B9               	andwf	___ftmul@sign^(0+128),f
  8675  0B11  30FF               	movlw	255
  8676  0B12  17AC               	bsf	(___ftmul@f1^(0+128)+1),7
  8677  0B13  17AF               	bsf	(___ftmul@f2^(0+128)+1),7
  8678  0B14  05AE               	andwf	___ftmul@f2^(0+128),f
  8679  0B15  05AF               	andwf	(___ftmul@f2+1)^(0+128),f
  8680  0B16  3007               	movlw	7
  8681  0B17  01B0               	clrf	(___ftmul@f2+2)^(0+128)
  8682  0B18  01B5               	clrf	___ftmul@f3_as_product^(0+128)
  8683  0B19  01B6               	clrf	(___ftmul@f3_as_product+1)^(0+128)
  8684  0B1A  01B7               	clrf	(___ftmul@f3_as_product+2)^(0+128)
  8685  0B1B  00B8               	movwf	___ftmul@cntr^(0+128)
  8686  0B1C                     l7167:	
  8687  0B1C  1C2B               	btfss	___ftmul@f1^(0+128),0
  8688  0B1D  2B20               	goto	l7171
  8689  0B1E  23F0  3188         	fcall	PL136	;call to abstracted procedure
  8690  0B20                     l7171:	
  8691  0B20  36AD               	lsrf	(___ftmul@f1+2)^(0+128),f
  8692  0B21  0CAC               	rrf	(___ftmul@f1+1)^(0+128),f
  8693  0B22  0CAB               	rrf	___ftmul@f1^(0+128),f
  8694  0B23  35AE               	lslf	___ftmul@f2^(0+128),f
  8695  0B24  0DAF               	rlf	(___ftmul@f2+1)^(0+128),f
  8696  0B25  0DB0               	rlf	(___ftmul@f2+2)^(0+128),f
  8697  0B26  0BB8               	decfsz	___ftmul@cntr^(0+128),f
  8698  0B27  2B1C               	goto	l7167
  8699  0B28  3009               	movlw	9
  8700  0B29  00B8               	movwf	___ftmul@cntr^(0+128)
  8701  0B2A                     l7179:	
  8702  0B2A  1C2B               	btfss	___ftmul@f1^(0+128),0
  8703  0B2B  2B2E               	goto	l7183
  8704  0B2C  23F0  3188         	fcall	PL136	;call to abstracted procedure
  8705  0B2E                     l7183:	
  8706  0B2E  36AD               	lsrf	(___ftmul@f1+2)^(0+128),f
  8707  0B2F  0CAC               	rrf	(___ftmul@f1+1)^(0+128),f
  8708  0B30  0CAB               	rrf	___ftmul@f1^(0+128),f
  8709  0B31  36B7               	lsrf	(___ftmul@f3_as_product+2)^(0+128),f
  8710  0B32  0CB6               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
  8711  0B33  0CB5               	rrf	___ftmul@f3_as_product^(0+128),f
  8712  0B34  0BB8               	decfsz	___ftmul@cntr^(0+128),f
  8713  0B35  2B2A               	goto	l7179
  8714  0B36  0835               	movf	___ftmul@f3_as_product^(0+128),w
  8715  0B37  00A0               	movwf	___ftpack@arg^(0+128)
  8716  0B38  0836               	movf	(___ftmul@f3_as_product+1)^(0+128),w
  8717  0B39  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  8718  0B3A  0837               	movf	(___ftmul@f3_as_product+2)^(0+128),w
  8719  0B3B  00A2               	movwf	(___ftpack@arg+2)^(0+128)
  8720  0B3C  0834               	movf	___ftmul@exp^(0+128),w
  8721  0B3D  00A3               	movwf	___ftpack@exp^(0+128)
  8722  0B3E  0839               	movf	___ftmul@sign^(0+128),w
  8723  0B3F  00A4               	movwf	___ftpack@sign^(0+128)
  8724  0B40  2358               	fcall	___ftpack
  8725  0B41  0820               	movf	?___ftpack^(0+128),w
  8726  0B42  00AB               	movwf	?___ftmul^(0+128)
  8727  0B43  0821               	movf	(?___ftpack+1)^(0+128),w
  8728  0B44  00AC               	movwf	(?___ftmul+1)^(0+128)
  8729  0B45  0822               	movf	(?___ftpack+2)^(0+128),w
  8730  0B46  00AD               	movwf	(?___ftmul+2)^(0+128)
  8731  0B47  0008               	return
  8732  0B48                     __end_of___ftmul:	
  8733  0B48                     __ptext45:	
  8734 ;; *************** function ___lwtoft *****************
  8735 ;; Defined at:
  8736 ;;		line 28 in file "D:\Program Files\Microchip\xc8\v1.41\sources\common\lwtoft.c"
  8737 ;; Parameters:    Size  Location     Type
  8738 ;;  c               2    8[BANK1 ] unsigned int 
  8739 ;; Auto vars:     Size  Location     Type
  8740 ;;		None
  8741 ;; Return value:  Size  Location     Type
  8742 ;;                  3    8[BANK1 ] float 
  8743 ;; Registers used:
  8744 ;;		wreg, status,2, status,0, pclath, cstack
  8745 ;; Tracked objects:
  8746 ;;		On entry : 1F/1
  8747 ;;		On exit  : 1F/1
  8748 ;;		Unchanged: 0/0
  8749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8750 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8753 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8754 ;;Total ram usage:        3 bytes
  8755 ;; Hardware stack levels used:    1
  8756 ;; Hardware stack levels required when called:    5
  8757 ;; This function calls:
  8758 ;;		___ftpack
  8759 ;; This function is called by:
  8760 ;;		_initDynamic
  8761 ;; This function uses a non-reentrant model
  8762 ;;
  8763                           
  8764                           
  8765                           ;psect for function ___lwtoft
  8766  0B48                     ___lwtoft:	
  8767                           
  8768                           ;incstack = 0
  8769                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  8770  0B48  0828               	movf	___lwtoft@c^(0+128),w
  8771  0B49  00A0               	movwf	___ftpack@arg^(0+128)
  8772  0B4A  0829               	movf	(___lwtoft@c+1)^(0+128),w
  8773  0B4B  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  8774  0B4C  308E               	movlw	142
  8775  0B4D  01A2               	clrf	(___ftpack@arg+2)^(0+128)
  8776  0B4E  00A3               	movwf	___ftpack@exp^(0+128)
  8777  0B4F  01A4               	clrf	___ftpack@sign^(0+128)
  8778  0B50  2358               	fcall	___ftpack
  8779  0B51  0820               	movf	?___ftpack^(0+128),w
  8780  0B52  00A8               	movwf	?___lwtoft^(0+128)
  8781  0B53  0821               	movf	(?___ftpack+1)^(0+128),w
  8782  0B54  00A9               	movwf	(?___lwtoft+1)^(0+128)
  8783  0B55  0822               	movf	(?___ftpack+2)^(0+128),w
  8784  0B56  00AA               	movwf	(?___lwtoft+2)^(0+128)
  8785  0B57  0008               	return
  8786  0B58                     __end_of___lwtoft:	
  8787  0B58                     __ptext47:	
  8788 ;; *************** function ___ftpack *****************
  8789 ;; Defined at:
  8790 ;;		line 62 in file "D:\Program Files\Microchip\xc8\v1.41\sources\common\float.c"
  8791 ;; Parameters:    Size  Location     Type
  8792 ;;  arg             3    0[BANK1 ] unsigned um
  8793 ;;  exp             1    3[BANK1 ] unsigned char 
  8794 ;;  sign            1    4[BANK1 ] unsigned char 
  8795 ;; Auto vars:     Size  Location     Type
  8796 ;;		None
  8797 ;; Return value:  Size  Location     Type
  8798 ;;                  3    0[BANK1 ] float 
  8799 ;; Registers used:
  8800 ;;		wreg, status,2, status,0
  8801 ;; Tracked objects:
  8802 ;;		On entry : 1F/1
  8803 ;;		On exit  : 1F/1
  8804 ;;		Unchanged: 0/0
  8805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8806 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  8807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8808 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8809 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  8810 ;;Total ram usage:        8 bytes
  8811 ;; Hardware stack levels used:    1
  8812 ;; Hardware stack levels required when called:    4
  8813 ;; This function calls:
  8814 ;;		Nothing
  8815 ;; This function is called by:
  8816 ;;		___ftmul
  8817 ;;		___lwtoft
  8818 ;; This function uses a non-reentrant model
  8819 ;;
  8820                           
  8821                           
  8822                           ;psect for function ___ftpack
  8823  0B58                     ___ftpack:	
  8824                           
  8825                           ;incstack = 0
  8826                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  8827  0B58  0823               	movf	___ftpack@exp^(0+128),w
  8828  0B59  1903               	btfsc	3,2
  8829  0B5A  2B60               	goto	l1181
  8830  0B5B  0822               	movf	(___ftpack@arg+2)^(0+128),w
  8831  0B5C  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
  8832  0B5D  0420               	iorwf	___ftpack@arg^(0+128),w
  8833  0B5E  1D03               	skipz
  8834  0B5F  2B68               	goto	l6999
  8835  0B60                     l1181:	
  8836  0B60  01A0               	clrf	?___ftpack^(0+128)
  8837  0B61  01A1               	clrf	(?___ftpack+1)^(0+128)
  8838  0B62  01A2               	clrf	(?___ftpack+2)^(0+128)
  8839  0B63  0008               	return
  8840  0B64                     l6997:	
  8841  0B64  0AA3               	incf	___ftpack@exp^(0+128),f
  8842  0B65  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
  8843  0B66  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
  8844  0B67  0CA0               	rrf	___ftpack@arg^(0+128),f
  8845  0B68                     l6999:	
  8846  0B68  30FE               	movlw	254
  8847  0B69  0522               	andwf	(___ftpack@arg+2)^(0+128),w
  8848  0B6A  1903               	btfsc	3,2
  8849  0B6B  2B76               	goto	l7003
  8850  0B6C  2B64               	goto	l6997
  8851  0B6D                     l7001:	
  8852  0B6D  0AA3               	incf	___ftpack@exp^(0+128),f
  8853  0B6E  0AA0               	incf	___ftpack@arg^(0+128),f
  8854  0B6F  1903               	skipnz
  8855  0B70  0AA1               	incf	(___ftpack@arg+1)^(0+128),f
  8856  0B71  1903               	skipnz
  8857  0B72  0AA2               	incf	(___ftpack@arg+2)^(0+128),f
  8858  0B73  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
  8859  0B74  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
  8860  0B75  0CA0               	rrf	___ftpack@arg^(0+128),f
  8861  0B76                     l7003:	
  8862  0B76  30FF               	movlw	255
  8863  0B77  0522               	andwf	(___ftpack@arg+2)^(0+128),w
  8864  0B78  1903               	btfsc	3,2
  8865  0B79  2B83               	goto	l7007
  8866  0B7A  2B6D               	goto	l7001
  8867  0B7B                     l7009:	
  8868  0B7B  3002               	movlw	2
  8869  0B7C  0223               	subwf	___ftpack@exp^(0+128),w
  8870  0B7D  1C03               	btfss	3,0
  8871  0B7E  2B85               	goto	l1193
  8872  0B7F  03A3               	decf	___ftpack@exp^(0+128),f
  8873  0B80  35A0               	lslf	___ftpack@arg^(0+128),f
  8874  0B81  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
  8875  0B82  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
  8876  0B83                     l7007:	
  8877  0B83  1FA1               	btfss	(___ftpack@arg+1)^(0+128),7
  8878  0B84  2B7B               	goto	l7009
  8879  0B85                     l1193:	
  8880  0B85  1C23               	btfss	___ftpack@exp^(0+128),0
  8881  0B86  13A1               	bcf	(___ftpack@arg^(0+128)+1),7
  8882  0B87  36A3               	lsrf	___ftpack@exp^(0+128),f
  8883  0B88  0823               	movf	___ftpack@exp^(0+128),w
  8884  0B89  00A7               	movwf	(??___ftpack^(0+128)+2)
  8885  0B8A  01A6               	clrf	(??___ftpack^(0+128)+1)
  8886  0B8B  01A5               	clrf	??___ftpack^(0+128)
  8887  0B8C  0825               	movf	??___ftpack^(0+128),w
  8888  0B8D  04A0               	iorwf	___ftpack@arg^(0+128),f
  8889  0B8E  0826               	movf	(??___ftpack+1)^(0+128),w
  8890  0B8F  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
  8891  0B90  0827               	movf	(??___ftpack+2)^(0+128),w
  8892  0B91  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
  8893  0B92  0824               	movf	___ftpack@sign^(0+128),w
  8894  0B93  1D03               	btfss	3,2
  8895  0B94  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
  8896  0B95  0008               	return
  8897  0B96                     __end_of___ftpack:	
  8898  0B96                     __ptext44:	
  8899 ;; *************** function _updateDynamic *****************
  8900 ;; Defined at:
  8901 ;;		line 251 in file "src/led.c"
  8902 ;; Parameters:    Size  Location     Type
  8903 ;;		None
  8904 ;; Auto vars:     Size  Location     Type
  8905 ;;  i               1    2[BANK1 ] unsigned char 
  8906 ;; Return value:  Size  Location     Type
  8907 ;;                  1    wreg      void 
  8908 ;; Registers used:
  8909 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  8910 ;; Tracked objects:
  8911 ;;		On entry : 1C/3
  8912 ;;		On exit  : 1F/1
  8913 ;;		Unchanged: 0/0
  8914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8916 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8917 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  8918 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8919 ;;Total ram usage:        3 bytes
  8920 ;; Hardware stack levels used:    1
  8921 ;; Hardware stack levels required when called:    4
  8922 ;; This function calls:
  8923 ;;		Nothing
  8924 ;; This function is called by:
  8925 ;;		_initDynamic
  8926 ;; This function uses a non-reentrant model
  8927 ;;
  8928                           
  8929                           
  8930                           ;psect for function _updateDynamic
  8931  0B96                     _updateDynamic:	
  8932  0B96                     l7107:	
  8933                           ;incstack = 0
  8934                           ; Regs used in _updateDynamic: [wreg-fsr1h+status,2+status,0]
  8935                           
  8936                           
  8937                           ;led.c: 253: for ( unsigned char i = 0; i < 4; i++ )
  8938  0B96  0021               	movlb	1	; select bank1
  8939  0B97  01A2               	clrf	updateDynamic@i^(0+128)
  8940  0B98                     l7113:	
  8941                           
  8942                           ;led.c: 254: {
  8943                           ;led.c: 255: if ( gDynPara.fDyn & ( 1 << i ) )
  8944  0B98  0023               	movlb	3	; select bank3
  8945  0B99  0820               	movf	_gDynPara^(0+384),w	;volatile
  8946  0B9A  23C8  3188         	fcall	PL58	;call to abstracted procedure
  8947  0B9C  1903               	btfsc	3,2
  8948  0B9D  2BAD               	goto	l7121
  8949                           
  8950                           ;led.c: 256: {
  8951                           ;led.c: 257: if ( gDynPara.fBrt & ( 1 << i ) )
  8952  0B9E  0023               	movlb	3	; select bank3
  8953  0B9F  0E20               	swapf	_gDynPara^(0+384),w	;volatile
  8954  0BA0  23C8  3188         	fcall	PL58	;call to abstracted procedure
  8955  0BA2  1903               	btfsc	3,2
  8956  0BA3  2BA7               	goto	l7119
  8957                           
  8958                           ;led.c: 258: {
  8959                           ;led.c: 259: gLedRunPara.nCurrentBrt[i] = gDynPara.min[i];
  8960  0BA4  3522               	lslf	updateDynamic@i^(0+128),w
  8961  0BA5  3EA1               	addlw	(low ((_gDynPara| (0+256)+1)))& (0+255)
  8962  0BA6  2BA9               	goto	L52
  8963  0BA7                     l7119:	
  8964                           ;led.c: 260: }
  8965                           
  8966                           
  8967                           ;led.c: 261: else
  8968                           ;led.c: 262: {
  8969                           ;led.c: 263: gLedRunPara.nCurrentBrt[i] = gDynPara.max[i];
  8970  0BA7  3522               	lslf	updateDynamic@i^(0+128),w
  8971  0BA8  3EA9               	addlw	(low ((_gDynPara| (0+256)+9)))& (0+255)
  8972  0BA9                     L52:	
  8973  0BA9  23D5  3188         	fcall	PL64	;call to abstracted procedure
  8974  0BAB  23B3  3188         	fcall	PL22	;call to abstracted procedure
  8975  0BAD                     l7121:	
  8976  0BAD  3004               	movlw	4
  8977  0BAE  0AA2               	incf	updateDynamic@i^(0+128),f
  8978  0BAF  0222               	subwf	updateDynamic@i^(0+128),w
  8979  0BB0  1803               	btfsc	3,0
  8980  0BB1  0008               	return
  8981  0BB2  2B98               	goto	l7113
  8982  0BB3                     __end_of_updateDynamic:	
  8983  0BB3                     PL22:	
  8984  0BB3  0084               	movwf	4
  8985  0BB4  0185               	clrf	5
  8986  0BB5  3F40               	moviw [0]fsr1
  8987  0BB6  3F80               	movwi [0]fsr0
  8988  0BB7  3F41               	moviw [1]fsr1
  8989  0BB8  3F81               	movwi [1]fsr0
  8990  0BB9  0008               	return
  8991  0BBA                     __end_ofPL22:	
  8992  0BBA                     PL36:	
  8993  0BBA  3001               	movlw	1
  8994  0BBB  00A8               	movwf	((_gDynPara+1)^(0+384)+7)	;volatile
  8995  0BBC  30F4               	movlw	244
  8996  0BBD  00A7               	movwf	(_gDynPara^(0+384)+7)	;volatile
  8997  0BBE  3003               	movlw	3
  8998  0BBF  00B0               	movwf	((_gDynPara+1)^(0+384)+15)	;volatile
  8999  0BC0  30E8               	movlw	232
  9000  0BC1  00AF               	movwf	(_gDynPara^(0+384)+15)	;volatile
  9001  0BC2  0008               	return
  9002  0BC3                     __end_ofPL36:	
  9003  0BC3                     PL50:	
  9004  0BC3  3003               	movlw	3
  9005  0BC4  00AE               	movwf	((_gDynPara+1)^(0+384)+13)	;volatile
  9006  0BC5  30E8               	movlw	232
  9007  0BC6  00AD               	movwf	(_gDynPara^(0+384)+13)	;volatile
  9008  0BC7  0008               	return
  9009  0BC8                     __end_ofPL50:	
  9010  0BC8                     PL58:	
  9011  0BC8  390F               	andlw	15
  9012  0BC9  0021               	movlb	1	; select bank1
  9013  0BCA  00A0               	movwf	??_updateDynamic^(0+128)
  9014  0BCB  3001               	movlw	1
  9015  0BCC  00A1               	movwf	(??_updateDynamic+1)^(0+128)
  9016  0BCD  0A22               	incf	updateDynamic@i^(0+128),w
  9017  0BCE  2BD0               	goto	u6094
  9018  0BCF                     u6095:	
  9019  0BCF  35A1               	lslf	(??_updateDynamic+1)^(0+128),f
  9020  0BD0                     u6094:	
  9021  0BD0  0B89               	decfsz	9,f
  9022  0BD1  2BCF               	goto	u6095
  9023  0BD2  0821               	movf	(??_updateDynamic+1)^(0+128),w
  9024  0BD3  0520               	andwf	??_updateDynamic^(0+128),w
  9025  0BD4  0008               	return
  9026  0BD5                     __end_ofPL58:	
  9027  0BD5                     PL64:	
  9028  0BD5  0086               	movwf	6
  9029  0BD6  3001               	movlw	1	; select bank3/4
  9030  0BD7  0087               	movwf	7
  9031  0BD8  3522               	lslf	updateDynamic@i^(0+128),w
  9032  0BD9  3E56               	addlw	(low ((_gLedRunPara| 0+13)))& (0+255)
  9033  0BDA  0008               	return
  9034  0BDB                     __end_ofPL64:	
  9035  0BDB                     PL72:	
  9036  0BDB  0820               	movf	_gDynPara^(0+384),w	;volatile
  9037  0BDC  39F0               	andlw	-16
  9038  0BDD  3804               	iorlw	4
  9039  0BDE  00A0               	movwf	_gDynPara^(0+384)	;volatile
  9040  0BDF  300F               	movlw	-241
  9041  0BE0  05A0               	andwf	_gDynPara^(0+384),f	;volatile
  9042  0BE1  0008               	return
  9043  0BE2                     __end_ofPL72:	
  9044  0BE2                     PL90:	
  9045  0BE2  0086               	movwf	6
  9046  0BE3  3001               	movlw	1	; select bank3/4
  9047  0BE4  0087               	movwf	7
  9048  0BE5  3000               	movlw	0
  9049  0BE6  3FC0               	movwi [0]fsr1
  9050  0BE7  3FC1               	movwi [1]fsr1
  9051  0BE8  0008               	return
  9052  0BE9                     __end_ofPL90:	
  9053  0BE9                     PL92:	
  9054  0BE9  3E4E               	addlw	(low ((_gLedRunPara| 0+5)))& (0+255)
  9055  0BEA  0086               	movwf	6
  9056  0BEB  3000               	movlw	0
  9057  0BEC  0187               	clrf	7
  9058  0BED  3FC0               	movwi [0]fsr1
  9059  0BEE  3FC1               	movwi [1]fsr1
  9060  0BEF  0008               	return
  9061  0BF0                     __end_ofPL92:	
  9062  0BF0                     PL136:	
  9063  0BF0  082E               	movf	___ftmul@f2^(0+128),w
  9064  0BF1  07B5               	addwf	___ftmul@f3_as_product^(0+128),f
  9065  0BF2  082F               	movf	(___ftmul@f2+1)^(0+128),w
  9066  0BF3  3DB6               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
  9067  0BF4  0830               	movf	(___ftmul@f2+2)^(0+128),w
  9068  0BF5  3DB7               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
  9069  0BF6  0008               	return
  9070  0BF7                     __end_ofPL136:	
  9071  0BF7                     PL152:	
  9072  0BF7  0023               	movlb	3	; select bank3
  9073  0BF8  01B1               	clrf	(_gDynPara^(0+384)+17)	;volatile
  9074  0BF9  01B2               	clrf	((_gDynPara+1)^(0+384)+17)	;volatile
  9075  0BFA  303F               	movlw	63
  9076  0BFB  00B3               	movwf	((_gDynPara+2)^(0+384)+17)	;volatile
  9077  0BFC  0008               	return
  9078  0BFD                     __end_ofPL152:	
  9079  0BFD                     PL174:	
  9080  0BFD  30E8               	movlw	232
  9081  0BFE  00BA               	movwf	??_initDynamic^(0+128)
  9082  0BFF  3003               	movlw	3
  9083  0C00  00BB               	movwf	(??_initDynamic^(0+128)+1)
  9084  0C01  353C               	lslf	initDynamic@i_943^(0+128),w
  9085  0C02  0008               	return
  9086  0C03                     __end_ofPL174:	
  9087  0C03                     PL176:	
  9088  0C03  083D               	movf	initDynamic@i^(0+128),w
  9089  0C04  073D               	addwf	initDynamic@i^(0+128),w
  9090  0C05  073D               	addwf	initDynamic@i^(0+128),w
  9091  0C06  3EB1               	addlw	(low ((_gDynPara| (0+256)+17)))& (0+255)
  9092  0C07  0086               	movwf	6
  9093  0C08  0008               	return
  9094  0C09                     __end_ofPL176:	
  9095  0C09                     PL180:	
  9096  0C09  01AB               	clrf	?___ftmul^(0+128)
  9097  0C0A  01AC               	clrf	(?___ftmul+1)^(0+128)
  9098  0C0B  01AD               	clrf	(?___ftmul+2)^(0+128)
  9099  0C0C  0008               	return
  9100  0C0D                     __end_ofPL180:	
  9101                           
  9102                           	psect	text19
  9103  146E                     __ptext19:	
  9104 ;; *************** function _autoRun *****************
  9105 ;; Defined at:
  9106 ;;		line 52 in file "src/led.c"
  9107 ;; Parameters:    Size  Location     Type
  9108 ;;		None
  9109 ;; Auto vars:     Size  Location     Type
  9110 ;;  k               1   43[BANK2 ] unsigned char 
  9111 ;;  dt              4   32[BANK2 ] unsigned long 
  9112 ;;  st              2   39[BANK2 ] unsigned int 
  9113 ;;  et              2   37[BANK2 ] unsigned int 
  9114 ;;  duration        2   25[BANK2 ] unsigned int 
  9115 ;;  dbrt            1   24[BANK2 ] unsigned char 
  9116 ;;  auto_dyn_end    2   30[BANK2 ] unsigned int 
  9117 ;;  auto_dyn_sta    2   28[BANK2 ] unsigned int 
  9118 ;;  val            16    0[BANK2 ] unsigned char [4][4]
  9119 ;;  tr              8   16[BANK2 ] unsigned int [4]
  9120 ;;  ct              2   41[BANK2 ] unsigned int 
  9121 ;;  i               1   44[BANK2 ] unsigned char 
  9122 ;;  j               1   36[BANK2 ] unsigned char 
  9123 ;;  sec             1   27[BANK2 ] unsigned char 
  9124 ;; Return value:  Size  Location     Type
  9125 ;;                  1    wreg      void 
  9126 ;; Registers used:
  9127 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9128 ;; Tracked objects:
  9129 ;;		On entry : 1F/0
  9130 ;;		On exit  : 18/0
  9131 ;;		Unchanged: 0/0
  9132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9134 ;;      Locals:         0       0       0      45       0       0       0       0       0       0       0       0       
      +0       0
  9135 ;;      Temps:          0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
  9136 ;;      Totals:         0       0      11      45       0       0       0       0       0       0       0       0       
      +0       0
  9137 ;;Total ram usage:       56 bytes
  9138 ;; Hardware stack levels used:    1
  9139 ;; Hardware stack levels required when called:    7
  9140 ;; This function calls:
  9141 ;;		___lldiv
  9142 ;;		___lmul
  9143 ;;		___wmul
  9144 ;;		_initDynamic
  9145 ;;		_updatePWM
  9146 ;; This function is called by:
  9147 ;;		_main
  9148 ;; This function uses a non-reentrant model
  9149 ;;
  9150                           
  9151                           
  9152                           ;psect for function _autoRun
  9153  146E                     _autoRun:	
  9154                           
  9155                           ;led.c: 54: unsigned char i, j;
  9156                           ;led.c: 55: unsigned int ct = gCurrentTime.datetime.hour * 60u + gCurrentTime.datetime.m
      +                          inute;
  9157                           
  9158                           ;incstack = 0
  9159                           ; Regs used in _autoRun: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9160  146E  0844               	movf	_gCurrentTime+4,w	;volatile
  9161  146F  26FE  3194         	fcall	PL32	;call to abstracted procedure
  9162  1471  263D  3194         	fcall	___wmul
  9163  1473  0821               	movf	(?___wmul+1)^(0+128),w
  9164  1474  0022               	movlb	2	; select bank2
  9165  1475  00CA               	movwf	(autoRun@ct+1)^(0+256)
  9166  1476  0021               	movlb	1	; select bank1
  9167  1477  0820               	movf	?___wmul^(0+128),w
  9168  1478  0022               	movlb	2	; select bank2
  9169  1479  00C9               	movwf	autoRun@ct^(0+256)
  9170  147A  0020               	movlb	0	; select bank0
  9171  147B  0845               	movf	_gCurrentTime+5,w	;volatile
  9172  147C  0022               	movlb	2	; select bank2
  9173  147D  07C9               	addwf	autoRun@ct^(0+256),f
  9174  147E  1803               	skipnc
  9175  147F  0ACA               	incf	(autoRun@ct+1)^(0+256),f
  9176                           
  9177                           ;led.c: 57: if( gLedPara.aPara.autoPara.autoDynamic.enable_week > 0x80 )
  9178  1480  3081               	movlw	129
  9179  1481  0024               	movlb	4	; select bank4
  9180  1482  024B               	subwf	(_gLedPara^(0+512)+43),w	;volatile
  9181  1483  1C03               	skipc
  9182  1484  2CE4               	goto	l8283
  9183                           
  9184                           ;led.c: 58: {
  9185                           ;led.c: 60: if( (gLedPara.aPara.autoPara.autoDynamic.enable_week & (1<<gCurrentTime.date
      +                          time.wk)) != 0x00 )
  9186  1485  3001               	movlw	1
  9187  1486  0021               	movlb	1	; select bank1
  9188  1487  00BE               	movwf	??_autoRun^(0+128)
  9189  1488  0020               	movlb	0	; select bank0
  9190  1489  0A43               	incf	_gCurrentTime+3,w	;volatile
  9191  148A  0021               	movlb	1	; select bank1
  9192  148B  2C8D               	goto	u7504
  9193  148C                     u7505:	
  9194  148C  35BE               	lslf	??_autoRun^(0+128),f
  9195  148D                     u7504:	
  9196  148D  0B89               	decfsz	9,f
  9197  148E  2C8C               	goto	u7505
  9198  148F  083E               	movf	??_autoRun^(0+128),w
  9199  1490  0024               	movlb	4	; select bank4
  9200  1491  054B               	andwf	(_gLedPara^(0+512)+43),w	;volatile
  9201  1492  1903               	btfsc	3,2
  9202  1493  2CE4               	goto	l8283
  9203                           
  9204                           ;led.c: 61: {
  9205                           ;led.c: 73: unsigned int auto_dyn_start = gLedPara.aPara.autoPara.autoDynamic.dynamicPer
      +                          iod.start.hour * 60u + gLedPara.aPara.autoPara.autoDynamic.dynamicPeriod.start.minute;
  9206  1494  084C               	movf	(_gLedPara^(0+512)+44),w	;volatile
  9207  1495  26FE  3194         	fcall	PL32	;call to abstracted procedure
  9208  1497  263D  3194         	fcall	___wmul
  9209  1499  0821               	movf	(?___wmul+1)^(0+128),w
  9210  149A  0022               	movlb	2	; select bank2
  9211  149B  00BD               	movwf	(autoRun@auto_dyn_start+1)^(0+256)
  9212  149C  0021               	movlb	1	; select bank1
  9213  149D  0820               	movf	?___wmul^(0+128),w
  9214  149E  0022               	movlb	2	; select bank2
  9215  149F  00BC               	movwf	autoRun@auto_dyn_start^(0+256)
  9216  14A0  0024               	movlb	4	; select bank4
  9217  14A1  084D               	movf	(_gLedPara^(0+512)+45),w	;volatile
  9218  14A2  0022               	movlb	2	; select bank2
  9219  14A3  07BC               	addwf	autoRun@auto_dyn_start^(0+256),f
  9220  14A4  1803               	skipnc
  9221  14A5  0ABD               	incf	(autoRun@auto_dyn_start+1)^(0+256),f
  9222                           
  9223                           ;led.c: 74: unsigned int auto_dyn_end = gLedPara.aPara.autoPara.autoDynamic.dynamicPerio
      +                          d.end.hour * 60u + gLedPara.aPara.autoPara.autoDynamic.dynamicPeriod.end.minute;
  9224  14A6  0024               	movlb	4	; select bank4
  9225  14A7  084E               	movf	(_gLedPara^(0+512)+46),w	;volatile
  9226  14A8  26FE  3194         	fcall	PL32	;call to abstracted procedure
  9227  14AA  263D  3194         	fcall	___wmul
  9228  14AC  0821               	movf	(?___wmul+1)^(0+128),w
  9229  14AD  0022               	movlb	2	; select bank2
  9230  14AE  00BF               	movwf	(autoRun@auto_dyn_end+1)^(0+256)
  9231  14AF  0021               	movlb	1	; select bank1
  9232  14B0  0820               	movf	?___wmul^(0+128),w
  9233  14B1  0022               	movlb	2	; select bank2
  9234  14B2  00BE               	movwf	autoRun@auto_dyn_end^(0+256)
  9235  14B3  0024               	movlb	4	; select bank4
  9236  14B4  084F               	movf	(_gLedPara^(0+512)+47),w	;volatile
  9237  14B5  0022               	movlb	2	; select bank2
  9238  14B6  07BE               	addwf	autoRun@auto_dyn_end^(0+256),f
  9239  14B7  1803               	skipnc
  9240  14B8  0ABF               	incf	(autoRun@auto_dyn_end+1)^(0+256),f
  9241                           
  9242                           ;led.c: 75: if( auto_dyn_end >= auto_dyn_start )
  9243  14B9  083D               	movf	(autoRun@auto_dyn_start+1)^(0+256),w
  9244  14BA  023F               	subwf	(autoRun@auto_dyn_end+1)^(0+256),w
  9245  14BB  1D03               	skipz
  9246  14BC  2CBF               	goto	u7525
  9247  14BD  083C               	movf	autoRun@auto_dyn_start^(0+256),w
  9248  14BE  023E               	subwf	autoRun@auto_dyn_end^(0+256),w
  9249  14BF                     u7525:	
  9250                           
  9251                           ;led.c: 76: {
  9252                           ;led.c: 77: if( ct >= auto_dyn_start && ct < auto_dyn_end )
  9253  14BF  083D               	movf	(autoRun@auto_dyn_start+1)^(0+256),w
  9254  14C0  1C03               	skipc
  9255  14C1  2CDC               	goto	L5
  9256  14C2  024A               	subwf	(autoRun@ct+1)^(0+256),w
  9257  14C3  1D03               	skipz
  9258  14C4  2CC7               	goto	u7535
  9259  14C5  083C               	movf	autoRun@auto_dyn_start^(0+256),w
  9260  14C6  0249               	subwf	autoRun@ct^(0+256),w
  9261  14C7                     u7535:	
  9262  14C7  1C03               	skipc
  9263  14C8  2CE4               	goto	l8283
  9264  14C9                     L3:	
  9265  14C9  083F               	movf	(autoRun@auto_dyn_end+1)^(0+256),w
  9266  14CA  024A               	subwf	(autoRun@ct+1)^(0+256),w
  9267  14CB  1D03               	skipz
  9268  14CC  2CCF               	goto	u7545
  9269  14CD  083E               	movf	autoRun@auto_dyn_end^(0+256),w
  9270  14CE  0249               	subwf	autoRun@ct^(0+256),w
  9271  14CF                     u7545:	
  9272  14CF  1803               	skipnc
  9273  14D0  2CE4               	goto	l8283
  9274  14D1                     l8263:	
  9275                           
  9276                           ;led.c: 78: {
  9277                           ;led.c: 79: if( gLedRunPara.fDynamic != gLedPara.aPara.autoPara.autoDynamic.dynamicMode 
      +                          )
  9278  14D1  0020               	movlb	0	; select bank0
  9279  14D2  084A               	movf	_gLedRunPara+1,w	;volatile
  9280  14D3  0024               	movlb	4	; select bank4
  9281  14D4  0650               	xorwf	(_gLedPara^(0+512)+48),w	;volatile
  9282  14D5  1903               	skipnz
  9283  14D6  0008               	return
  9284                           
  9285                           ;led.c: 80: {
  9286                           ;led.c: 81: gLedRunPara.fDynamic = gLedPara.aPara.autoPara.autoDynamic.dynamicMode;
  9287  14D7  0850               	movf	(_gLedPara^(0+512)+48),w	;volatile
  9288  14D8  0020               	movlb	0	; select bank0
  9289  14D9  00CA               	movwf	_gLedRunPara+1	;volatile
  9290                           
  9291                           ;led.c: 82: initDynamic();
  9292  14DA  3189  293D         	ljmp	l7401
  9293  14DC                     L5:	
  9294                           ;led.c: 87: else
  9295                           ;led.c: 88: {
  9296                           ;led.c: 89: if( ct >= auto_dyn_start || ct < auto_dyn_end )
  9297                           
  9298  14DC  024A               	subwf	(autoRun@ct+1)^(0+256),w
  9299  14DD  1D03               	skipz
  9300  14DE  2CE1               	goto	u7565
  9301  14DF  083C               	movf	autoRun@auto_dyn_start^(0+256),w
  9302  14E0  0249               	subwf	autoRun@ct^(0+256),w
  9303  14E1                     u7565:	
  9304  14E1  1803               	skipnc
  9305  14E2  2CD1               	goto	l8263
  9306  14E3  2CC9               	goto	L3
  9307  14E4                     l8283:	
  9308                           ;led.c: 90: {
  9309                           ;led.c: 91: if( gLedRunPara.fDynamic != gLedPara.aPara.autoPara.autoDynamic.dynamicMode 
      +                          )
  9310                           
  9311                           
  9312                           ;led.c: 97: }
  9313                           ;led.c: 98: }
  9314                           ;led.c: 99: }
  9315                           ;led.c: 100: }
  9316                           ;led.c: 101: gLedRunPara.fDynamic = 0;
  9317  14E4  0020               	movlb	0	; select bank0
  9318  14E5  01CA               	clrf	_gLedRunPara+1	;volatile
  9319                           
  9320                           ;led.c: 102: unsigned char sec = gCurrentTime.datetime.second;
  9321  14E6  0846               	movf	_gCurrentTime+6,w	;volatile
  9322  14E7  0022               	movlb	2	; select bank2
  9323  14E8  00BB               	movwf	autoRun@sec^(0+256)
  9324                           
  9325                           ;led.c: 103: unsigned int tr[4];
  9326                           ;led.c: 104: tr[0] = gLedPara.aPara.autoPara.sunrise.start.hour * 60u + gLedPara.aPara.a
      +                          utoPara.sunrise.start.minute;
  9327  14E9  0024               	movlb	4	; select bank4
  9328  14EA  083B               	movf	(_gLedPara^(0+512)+27),w	;volatile
  9329  14EB  26FE  3194         	fcall	PL32	;call to abstracted procedure
  9330  14ED  263D  3194         	fcall	___wmul
  9331  14EF  0821               	movf	(?___wmul+1)^(0+128),w
  9332  14F0  0022               	movlb	2	; select bank2
  9333  14F1  00B1               	movwf	(autoRun@tr+1)^(0+256)
  9334  14F2  0021               	movlb	1	; select bank1
  9335  14F3  0820               	movf	?___wmul^(0+128),w
  9336  14F4  0022               	movlb	2	; select bank2
  9337  14F5  00B0               	movwf	autoRun@tr^(0+256)
  9338  14F6  0024               	movlb	4	; select bank4
  9339  14F7  083C               	movf	(_gLedPara^(0+512)+28),w	;volatile
  9340  14F8  0022               	movlb	2	; select bank2
  9341  14F9  07B0               	addwf	autoRun@tr^(0+256),f
  9342  14FA  1803               	skipnc
  9343  14FB  0AB1               	incf	(autoRun@tr+1)^(0+256),f
  9344                           
  9345                           ;led.c: 105: tr[1] = gLedPara.aPara.autoPara.sunrise.end.hour * 60u + gLedPara.aPara.aut
      +                          oPara.sunrise.end.minute;
  9346  14FC  0024               	movlb	4	; select bank4
  9347  14FD  083E               	movf	(_gLedPara^(0+512)+30),w	;volatile
  9348  14FE  0021               	movlb	1	; select bank1
  9349  14FF  00BE               	movwf	??_autoRun^(0+128)
  9350  1500  01BF               	clrf	(??_autoRun^(0+128)+1)
  9351  1501  0024               	movlb	4	; select bank4
  9352  1502  083D               	movf	(_gLedPara^(0+512)+29),w	;volatile
  9353  1503  26FE  3194         	fcall	PL32	;call to abstracted procedure
  9354  1505  263D  3194         	fcall	___wmul
  9355  1507  2715  3194         	fcall	PL54	;call to abstracted procedure
  9356  1509  00B2               	movwf	(autoRun@tr^(0+256)+2)
  9357  150A  0021               	movlb	1	; select bank1
  9358  150B  0841               	movf	(??_autoRun+3)^(0+128),w
  9359  150C  0022               	movlb	2	; select bank2
  9360  150D  00B3               	movwf	((autoRun@tr+1)^(0+256)+2)
  9361                           
  9362                           ;led.c: 106: tr[2] = gLedPara.aPara.autoPara.sunset.start.hour * 60u + gLedPara.aPara.au
      +                          toPara.sunset.start.minute;
  9363  150E  0024               	movlb	4	; select bank4
  9364  150F  0844               	movf	(_gLedPara^(0+512)+36),w	;volatile
  9365  1510  0021               	movlb	1	; select bank1
  9366  1511  00BE               	movwf	??_autoRun^(0+128)
  9367  1512  01BF               	clrf	(??_autoRun^(0+128)+1)
  9368  1513  0024               	movlb	4	; select bank4
  9369  1514  0843               	movf	(_gLedPara^(0+512)+35),w	;volatile
  9370  1515  26FE  3194         	fcall	PL32	;call to abstracted procedure
  9371  1517  263D  3194         	fcall	___wmul
  9372  1519  2715  3194         	fcall	PL54	;call to abstracted procedure
  9373  151B  00B4               	movwf	(autoRun@tr^(0+256)+4)
  9374  151C  0021               	movlb	1	; select bank1
  9375  151D  0841               	movf	(??_autoRun+3)^(0+128),w
  9376  151E  0022               	movlb	2	; select bank2
  9377  151F  00B5               	movwf	((autoRun@tr+1)^(0+256)+4)
  9378                           
  9379                           ;led.c: 107: tr[3] = gLedPara.aPara.autoPara.sunset.end.hour * 60u + gLedPara.aPara.auto
      +                          Para.sunset.end.minute;
  9380  1520  0024               	movlb	4	; select bank4
  9381  1521  0846               	movf	(_gLedPara^(0+512)+38),w	;volatile
  9382  1522  0021               	movlb	1	; select bank1
  9383  1523  00BE               	movwf	??_autoRun^(0+128)
  9384  1524  01BF               	clrf	(??_autoRun^(0+128)+1)
  9385  1525  0024               	movlb	4	; select bank4
  9386  1526  0845               	movf	(_gLedPara^(0+512)+37),w	;volatile
  9387  1527  26FE  3194         	fcall	PL32	;call to abstracted procedure
  9388  1529  263D  3194         	fcall	___wmul
  9389  152B  2715               	fcall	PL54	;call to abstracted procedure
  9390  152C  00B6               	movwf	(autoRun@tr^(0+256)+6)
  9391  152D  0021               	movlb	1	; select bank1
  9392  152E  0841               	movf	(??_autoRun+3)^(0+128),w
  9393  152F  0022               	movlb	2	; select bank2
  9394  1530  00B7               	movwf	((autoRun@tr+1)^(0+256)+6)
  9395                           
  9396                           ;led.c: 108: unsigned char val[4][4];
  9397                           ;led.c: 109: for ( i = 0; i < 4; i++ )
  9398  1531  01CC               	clrf	autoRun@i^(0+256)
  9399  1532                     l8301:	
  9400                           
  9401                           ;led.c: 110: {
  9402                           ;led.c: 111: val[0][i] = gLedPara.aPara.autoPara.moonlight[i];
  9403  1532  084C               	movf	autoRun@i^(0+256),w
  9404  1533  3E20               	addlw	(low (autoRun@val| (0+256)))& (0+255)
  9405  1534  0086               	movwf	6
  9406  1535  3001               	movlw	1	; select bank2/3
  9407  1536  0087               	movwf	7
  9408  1537  084C               	movf	autoRun@i^(0+256),w
  9409  1538  3E47               	addlw	(low ((_gLedPara| (0+512)+39)))& (0+255)
  9410  1539  319F  27D4  3194   	fcall	PL124	;call to abstracted procedure
  9411                           
  9412                           ;led.c: 112: val[1][i] = gLedPara.aPara.autoPara.daylight[i];
  9413  153C  084C               	movf	autoRun@i^(0+256),w
  9414  153D  3E04               	addlw	4
  9415                           
  9416                           ;led.c: 113: val[2][i] = gLedPara.aPara.autoPara.daylight[i];
  9417  153E  272A  3194         	fcall	PL100	;call to abstracted procedure
  9418  1540  3E08               	addlw	8
  9419                           
  9420                           ;led.c: 114: val[3][i] = gLedPara.aPara.autoPara.moonlight[i];
  9421  1541  272A  3194         	fcall	PL100	;call to abstracted procedure
  9422  1543  3E0C               	addlw	12
  9423  1544  3E20               	addlw	(low (autoRun@val| (0+256)))& (0+255)
  9424  1545  0086               	movwf	6
  9425  1546  084C               	movf	autoRun@i^(0+256),w
  9426  1547  3E47               	addlw	(low ((_gLedPara| (0+512)+39)))& (0+255)
  9427  1548  0084               	movwf	4
  9428  1549  0800               	movf	0,w
  9429  154A  0081               	movwf	1
  9430  154B  3004               	movlw	4
  9431  154C  0ACC               	incf	autoRun@i^(0+256),f
  9432  154D  024C               	subwf	autoRun@i^(0+256),w
  9433  154E  1C03               	skipc
  9434  154F  2D32               	goto	l8301
  9435                           
  9436                           ;led.c: 115: }
  9437                           ;led.c: 116: for ( i = 0; i < 4; i++ )
  9438  1550  01CC               	clrf	autoRun@i^(0+256)
  9439  1551                     l8313:	
  9440                           
  9441                           ;led.c: 117: {
  9442                           ;led.c: 118: j = ( i + 1 ) % 4;
  9443  1551  084C               	movf	autoRun@i^(0+256),w
  9444  1552  3E01               	addlw	1
  9445  1553  00C4               	movwf	autoRun@j^(0+256)
  9446  1554  3003               	movlw	3
  9447  1555  05C4               	andwf	autoRun@j^(0+256),f
  9448                           
  9449                           ;led.c: 119: unsigned int st = tr[i];
  9450  1556  354C               	lslf	autoRun@i^(0+256),w
  9451  1557  3E30               	addlw	(low (autoRun@tr| (0+256)))& (0+255)
  9452  1558  0086               	movwf	6
  9453  1559  3001               	movlw	1	; select bank2/3
  9454  155A  0087               	movwf	7
  9455  155B  3F40               	moviw [0]fsr1
  9456  155C  00C7               	movwf	autoRun@st^(0+256)
  9457  155D  3F41               	moviw [1]fsr1
  9458  155E  00C8               	movwf	(autoRun@st+1)^(0+256)
  9459                           
  9460                           ;led.c: 120: unsigned int et = tr[j];
  9461  155F  3544               	lslf	autoRun@j^(0+256),w
  9462  1560  3E30               	addlw	(low (autoRun@tr| (0+256)))& (0+255)
  9463  1561  0086               	movwf	6
  9464  1562  3F40               	moviw [0]fsr1
  9465  1563  00C5               	movwf	autoRun@et^(0+256)
  9466  1564  3F41               	moviw [1]fsr1
  9467  1565  00C6               	movwf	(autoRun@et+1)^(0+256)
  9468                           
  9469                           ;led.c: 121: unsigned int duration;
  9470                           ;led.c: 122: unsigned long dt;
  9471                           ;led.c: 123: unsigned char dbrt;
  9472                           ;led.c: 124: if ( et >= st )
  9473  1566  0848               	movf	(autoRun@st+1)^(0+256),w
  9474  1567  0246               	subwf	(autoRun@et+1)^(0+256),w
  9475  1568  1D03               	skipz
  9476  1569  2D6C               	goto	u7605
  9477  156A  0847               	movf	autoRun@st^(0+256),w
  9478  156B  0245               	subwf	autoRun@et^(0+256),w
  9479  156C                     u7605:	
  9480                           
  9481                           ;led.c: 125: {
  9482                           ;led.c: 126: if ( ct >= st && ct < et )
  9483  156C  0848               	movf	(autoRun@st+1)^(0+256),w
  9484  156D  1C03               	skipc
  9485  156E  2D8A               	goto	L6
  9486  156F  024A               	subwf	(autoRun@ct+1)^(0+256),w
  9487  1570  1D03               	skipz
  9488  1571  2D74               	goto	u7615
  9489  1572  0847               	movf	autoRun@st^(0+256),w
  9490  1573  0249               	subwf	autoRun@ct^(0+256),w
  9491  1574                     u7615:	
  9492  1574  1C03               	skipc
  9493  1575  2E37               	goto	l8365
  9494  1576  0846               	movf	(autoRun@et+1)^(0+256),w
  9495  1577  024A               	subwf	(autoRun@ct+1)^(0+256),w
  9496  1578  1D03               	skipz
  9497  1579  2D7C               	goto	u7625
  9498  157A  0845               	movf	autoRun@et^(0+256),w
  9499  157B  0249               	subwf	autoRun@ct^(0+256),w
  9500  157C                     u7625:	
  9501  157C  1803               	skipnc
  9502  157D  2E37               	goto	l8365
  9503                           
  9504                           ;led.c: 127: {
  9505                           ;led.c: 128: duration = et - st;
  9506  157E  0846               	movf	(autoRun@et+1)^(0+256),w
  9507  157F  273C  3194         	fcall	PL112	;call to abstracted procedure
  9508                           
  9509                           ;led.c: 129: dt = ( ct - st ) * 60ul + sec;
  9510  1581  0847               	movf	autoRun@st^(0+256),w
  9511  1582                     L8:	
  9512  1582  0249               	subwf	autoRun@ct^(0+256),w
  9513  1583  0021               	movlb	1	; select bank1
  9514  1584  00A0               	movwf	___lmul@multiplier^(0+128)
  9515  1585  0022               	movlb	2	; select bank2
  9516  1586  0848               	movf	(autoRun@st+1)^(0+256),w
  9517  1587  3B4A               	subwfb	(autoRun@ct+1)^(0+256),w
  9518  1588  0021               	movlb	1	; select bank1
  9519  1589  2DB6               	goto	L4
  9520  158A                     L6:	
  9521                           ;led.c: 136: else
  9522                           ;led.c: 137: {
  9523                           ;led.c: 138: if ( ct >= st || ct < et )
  9524                           
  9525                           ;led.c: 130: }
  9526                           
  9527  158A  024A               	subwf	(autoRun@ct+1)^(0+256),w
  9528  158B  1D03               	skipz
  9529  158C  2D8F               	goto	u7635
  9530  158D  0847               	movf	autoRun@st^(0+256),w
  9531  158E  0249               	subwf	autoRun@ct^(0+256),w
  9532  158F                     u7635:	
  9533  158F  0846               	movf	(autoRun@et+1)^(0+256),w
  9534  1590  1803               	skipnc
  9535  1591  2D9A               	goto	L7
  9536  1592  024A               	subwf	(autoRun@ct+1)^(0+256),w
  9537  1593  1D03               	skipz
  9538  1594  2D97               	goto	u7645
  9539  1595  0845               	movf	autoRun@et^(0+256),w
  9540  1596  0249               	subwf	autoRun@ct^(0+256),w
  9541  1597                     u7645:	
  9542  1597  1803               	skipnc
  9543  1598  2E37               	goto	l8365
  9544                           
  9545                           ;led.c: 139: {
  9546                           ;led.c: 140: duration = 1440u - st + et;
  9547  1599  0846               	movf	(autoRun@et+1)^(0+256),w
  9548  159A                     L7:	
  9549  159A  273C  3194         	fcall	PL112	;call to abstracted procedure
  9550  159C  30A0               	movlw	160
  9551  159D  07B9               	addwf	autoRun@duration^(0+256),f
  9552  159E  3005               	movlw	5
  9553  159F  3DBA               	addwfc	(autoRun@duration+1)^(0+256),f
  9554                           
  9555                           ;led.c: 141: if ( ct >= st )
  9556  15A0  0848               	movf	(autoRun@st+1)^(0+256),w
  9557  15A1  024A               	subwf	(autoRun@ct+1)^(0+256),w
  9558  15A2  1D03               	skipz
  9559  15A3  2DA6               	goto	u7655
  9560  15A4  0847               	movf	autoRun@st^(0+256),w
  9561  15A5  0249               	subwf	autoRun@ct^(0+256),w
  9562  15A6                     u7655:	
  9563                           
  9564                           ;led.c: 145: else
  9565                           ;led.c: 146: {
  9566                           ;led.c: 147: dt = ( 1440u - st + ct ) * 60ul + sec;
  9567  15A6  0847               	movf	autoRun@st^(0+256),w
  9568  15A7  1803               	btfsc	3,0
  9569  15A8  2D82               	goto	L8
  9570  15A9  0249               	subwf	autoRun@ct^(0+256),w
  9571  15AA  0021               	movlb	1	; select bank1
  9572  15AB  00BE               	movwf	??_autoRun^(0+128)
  9573  15AC  0022               	movlb	2	; select bank2
  9574  15AD  0848               	movf	(autoRun@st+1)^(0+256),w
  9575  15AE  3B4A               	subwfb	(autoRun@ct+1)^(0+256),w
  9576  15AF  0021               	movlb	1	; select bank1
  9577  15B0  00BF               	movwf	(??_autoRun+1)^(0+128)
  9578  15B1  083E               	movf	??_autoRun^(0+128),w
  9579  15B2  3EA0               	addlw	160
  9580  15B3  00A0               	movwf	___lmul@multiplier^(0+128)
  9581  15B4  3005               	movlw	5
  9582  15B5  3D3F               	addwfc	(??_autoRun+1)^(0+128),w
  9583  15B6                     L4:	
  9584  15B6  00A1               	movwf	(___lmul@multiplier+1)^(0+128)
  9585  15B7  303C               	movlw	60
  9586  15B8  01A2               	clrf	(___lmul@multiplier+2)^(0+128)
  9587  15B9  01A3               	clrf	(___lmul@multiplier+3)^(0+128)
  9588  15BA  00A4               	movwf	___lmul@multiplicand^(0+128)
  9589  15BB  01A5               	clrf	(___lmul@multiplicand+1)^(0+128)
  9590  15BC  01A6               	clrf	(___lmul@multiplicand+2)^(0+128)
  9591  15BD  01A7               	clrf	(___lmul@multiplicand+3)^(0+128)
  9592  15BE  2652  3194         	fcall	___lmul
  9593  15C0  0823               	movf	(?___lmul+3)^(0+128),w
  9594  15C1  0022               	movlb	2	; select bank2
  9595  15C2  00C3               	movwf	(autoRun@dt+3)^(0+256)
  9596  15C3  0021               	movlb	1	; select bank1
  9597  15C4  0822               	movf	(?___lmul+2)^(0+128),w
  9598  15C5  0022               	movlb	2	; select bank2
  9599  15C6  00C2               	movwf	(autoRun@dt+2)^(0+256)
  9600  15C7  0021               	movlb	1	; select bank1
  9601  15C8  0821               	movf	(?___lmul+1)^(0+128),w
  9602  15C9  0022               	movlb	2	; select bank2
  9603  15CA  00C1               	movwf	(autoRun@dt+1)^(0+256)
  9604  15CB  0021               	movlb	1	; select bank1
  9605  15CC  0820               	movf	?___lmul^(0+128),w
  9606  15CD  0022               	movlb	2	; select bank2
  9607  15CE  00C0               	movwf	autoRun@dt^(0+256)
  9608  15CF  083B               	movf	autoRun@sec^(0+256),w
  9609  15D0  07C0               	addwf	autoRun@dt^(0+256),f
  9610  15D1  3001               	movlw	1
  9611  15D2  1803               	skipnc
  9612  15D3  07C1               	addwf	(autoRun@dt+1)^(0+256),f
  9613  15D4  1803               	skipnc
  9614  15D5  07C2               	addwf	(autoRun@dt+2)^(0+256),f
  9615  15D6  1803               	skipnc
  9616  15D7  07C3               	addwf	(autoRun@dt+3)^(0+256),f
  9617                           
  9618                           ;led.c: 153: }
  9619                           ;led.c: 154: }
  9620                           ;led.c: 155: for ( unsigned char k = 0; k < 4; k++ )
  9621  15D8  01CB               	clrf	autoRun@k^(0+256)
  9622  15D9                     l8351:	
  9623                           
  9624                           ;led.c: 156: {
  9625                           ;led.c: 157: if ( val[j][k] >= val[i][k] )
  9626  15D9  0844               	movf	autoRun@j^(0+256),w
  9627  15DA  26B6  3194         	fcall	PL6	;call to abstracted procedure
  9628  15DC  3001               	movlw	1	; select bank2/3
  9629  15DD  0087               	movwf	7
  9630  15DE  0022               	movlb	2	; select bank2
  9631  15DF  084C               	movf	autoRun@i^(0+256),w
  9632  15E0  26F0  3194         	fcall	PL26	;call to abstracted procedure
  9633  15E2  3001               	movlw	1	; select bank2/3
  9634  15E3  0085               	movwf	5
  9635  15E4  0800               	movf	0,w
  9636  15E5  0201               	subwf	1,w
  9637  15E6  1C03               	skipc
  9638  15E7  2E0A               	goto	l8357
  9639                           
  9640                           ;led.c: 158: {
  9641                           ;led.c: 159: dbrt = val[j][k] - val[i][k];
  9642  15E8  0022               	movlb	2	; select bank2
  9643  15E9  0844               	movf	autoRun@j^(0+256),w
  9644  15EA  26B6  3194         	fcall	PL6	;call to abstracted procedure
  9645  15EC  0022               	movlb	2	; select bank2
  9646  15ED  084C               	movf	autoRun@i^(0+256),w
  9647  15EE  26F0  3194         	fcall	PL26	;call to abstracted procedure
  9648                           
  9649                           ;led.c: 160: gLedRunPara.nCurrentBrt[k] = val[i][k] * 10u + dbrt * dt / ( duration * 6u 
      +                          );
  9650  15F0  26EA  3194         	fcall	PL18	;call to abstracted procedure
  9651  15F2  26B6  3194         	fcall	PL6	;call to abstracted procedure
  9652  15F4  2744  3194         	fcall	PL142	;call to abstracted procedure
  9653  15F6  263D  3194         	fcall	___wmul
  9654  15F8  2705  3194         	fcall	PL46	;call to abstracted procedure
  9655  15FA  263D  3194         	fcall	___wmul
  9656  15FC  26C4  3194         	fcall	PL10	;call to abstracted procedure
  9657  15FE  2652  3194         	fcall	___lmul
  9658  1600  2733  3194         	fcall	PL102	;call to abstracted procedure
  9659  1602  2677  3194         	fcall	___lldiv
  9660  1604  082C               	movf	?___lldiv^(0+128),w
  9661  1605  0741               	addwf	(??_autoRun+3)^(0+128),w
  9662  1606  00C7               	movwf	(??_autoRun+9)^(0+128)
  9663  1607  082D               	movf	(?___lldiv+1)^(0+128),w
  9664  1608  3D42               	addwfc	(??_autoRun+4)^(0+128),w
  9665  1609  2E2F               	goto	L51
  9666  160A                     l8357:	
  9667                           ;led.c: 161: }
  9668                           
  9669                           
  9670                           ;led.c: 162: else
  9671                           ;led.c: 163: {
  9672                           ;led.c: 164: dbrt = val[i][k] - val[j][k];
  9673  160A  0022               	movlb	2	; select bank2
  9674  160B  084C               	movf	autoRun@i^(0+256),w
  9675  160C  26B6  3194         	fcall	PL6	;call to abstracted procedure
  9676  160E  3001               	movlw	1	; select bank2/3
  9677  160F  0087               	movwf	7
  9678  1610  0022               	movlb	2	; select bank2
  9679  1611  0844               	movf	autoRun@j^(0+256),w
  9680  1612  26F0  3194         	fcall	PL26	;call to abstracted procedure
  9681  1614  3001               	movlw	1	; select bank2/3
  9682  1615  0085               	movwf	5
  9683                           
  9684                           ;led.c: 165: gLedRunPara.nCurrentBrt[k] = val[i][k] * 10u - dbrt * dt / ( duration * 6u 
      +                          );
  9685  1616  26EA  3194         	fcall	PL18	;call to abstracted procedure
  9686  1618  26B6  3194         	fcall	PL6	;call to abstracted procedure
  9687  161A  2744  3194         	fcall	PL142	;call to abstracted procedure
  9688  161C  263D  3194         	fcall	___wmul
  9689  161E  2705  3194         	fcall	PL46	;call to abstracted procedure
  9690  1620  263D  3194         	fcall	___wmul
  9691  1622  26C4  3194         	fcall	PL10	;call to abstracted procedure
  9692  1624  2652  3194         	fcall	___lmul
  9693  1626  2733  3194         	fcall	PL102	;call to abstracted procedure
  9694  1628  2677  3194         	fcall	___lldiv
  9695  162A  082C               	movf	?___lldiv^(0+128),w
  9696  162B  0241               	subwf	(??_autoRun+3)^(0+128),w
  9697  162C  00C7               	movwf	(??_autoRun+9)^(0+128)
  9698  162D  082D               	movf	(?___lldiv+1)^(0+128),w
  9699  162E  3B42               	subwfb	(??_autoRun+4)^(0+128),w
  9700  162F                     L51:	
  9701  162F  271E  3194         	fcall	PL68	;call to abstracted procedure
  9702  1631  0022               	movlb	2	; select bank2
  9703  1632  3004               	movlw	4
  9704  1633  0ACB               	incf	autoRun@k^(0+256),f
  9705  1634  024B               	subwf	autoRun@k^(0+256),w
  9706  1635  1C03               	skipc
  9707  1636  2DD9               	goto	l8351
  9708  1637                     l8365:	
  9709  1637  3004               	movlw	4
  9710  1638  0ACC               	incf	autoRun@i^(0+256),f
  9711  1639  024C               	subwf	autoRun@i^(0+256),w
  9712  163A  1C03               	skipc
  9713  163B  2D51               	goto	l8313
  9714                           
  9715                           ;led.c: 166: }
  9716                           ;led.c: 167: }
  9717                           ;led.c: 168: }
  9718                           ;led.c: 169: updatePWM();
  9719  163C  2F79               	ljmp	l7689
  9720  163D                     __end_of_autoRun:	
  9721  163D                     __ptext20:	
  9722 ;; *************** function ___wmul *****************
  9723 ;; Defined at:
  9724 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v1.41\sources\common\Umul16.c"
  9725 ;; Parameters:    Size  Location     Type
  9726 ;;  multiplier      2    0[BANK1 ] unsigned int 
  9727 ;;  multiplicand    2    2[BANK1 ] unsigned int 
  9728 ;; Auto vars:     Size  Location     Type
  9729 ;;  product         2    4[BANK1 ] unsigned int 
  9730 ;; Return value:  Size  Location     Type
  9731 ;;                  2    0[BANK1 ] unsigned int 
  9732 ;; Registers used:
  9733 ;;		wreg, status,2, status,0
  9734 ;; Tracked objects:
  9735 ;;		On entry : 1F/1
  9736 ;;		On exit  : 1F/1
  9737 ;;		Unchanged: 0/0
  9738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9739 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9740 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9742 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  9743 ;;Total ram usage:        6 bytes
  9744 ;; Hardware stack levels used:    1
  9745 ;; Hardware stack levels required when called:    4
  9746 ;; This function calls:
  9747 ;;		Nothing
  9748 ;; This function is called by:
  9749 ;;		_autoRun
  9750 ;; This function uses a non-reentrant model
  9751 ;;
  9752                           
  9753                           
  9754                           ;psect for function ___wmul
  9755  163D                     ___wmul:	
  9756                           
  9757                           ;incstack = 0
  9758                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9759  163D  01A4               	clrf	___wmul@product^(0+128)
  9760  163E  01A5               	clrf	(___wmul@product+1)^(0+128)
  9761  163F                     l7705:	
  9762  163F  1C20               	btfss	___wmul@multiplier^(0+128),0
  9763  1640  2E45               	goto	l7709
  9764  1641  0822               	movf	___wmul@multiplicand^(0+128),w
  9765  1642  07A4               	addwf	___wmul@product^(0+128),f
  9766  1643  0823               	movf	(___wmul@multiplicand+1)^(0+128),w
  9767  1644  3DA5               	addwfc	(___wmul@product+1)^(0+128),f
  9768  1645                     l7709:	
  9769  1645  35A2               	lslf	___wmul@multiplicand^(0+128),f
  9770  1646  0DA3               	rlf	(___wmul@multiplicand+1)^(0+128),f
  9771  1647  36A1               	lsrf	(___wmul@multiplier+1)^(0+128),f
  9772  1648  0CA0               	rrf	___wmul@multiplier^(0+128),f
  9773  1649  0820               	movf	___wmul@multiplier^(0+128),w
  9774  164A  0421               	iorwf	(___wmul@multiplier+1)^(0+128),w
  9775  164B  1D03               	btfss	3,2
  9776  164C  2E3F               	goto	l7705
  9777  164D  0825               	movf	(___wmul@product+1)^(0+128),w
  9778  164E  00A1               	movwf	(?___wmul+1)^(0+128)
  9779  164F  0824               	movf	___wmul@product^(0+128),w
  9780  1650  00A0               	movwf	?___wmul^(0+128)
  9781  1651  0008               	return
  9782  1652                     __end_of___wmul:	
  9783  1652                     __ptext21:	
  9784 ;; *************** function ___lmul *****************
  9785 ;; Defined at:
  9786 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v1.41\sources\common\Umul32.c"
  9787 ;; Parameters:    Size  Location     Type
  9788 ;;  multiplier      4    0[BANK1 ] unsigned long 
  9789 ;;  multiplicand    4    4[BANK1 ] unsigned long 
  9790 ;; Auto vars:     Size  Location     Type
  9791 ;;  product         4    8[BANK1 ] unsigned long 
  9792 ;; Return value:  Size  Location     Type
  9793 ;;                  4    0[BANK1 ] unsigned long 
  9794 ;; Registers used:
  9795 ;;		wreg, status,2, status,0
  9796 ;; Tracked objects:
  9797 ;;		On entry : 1F/1
  9798 ;;		On exit  : 1F/1
  9799 ;;		Unchanged: 0/0
  9800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9801 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  9802 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  9803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9804 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0
  9805 ;;Total ram usage:       12 bytes
  9806 ;; Hardware stack levels used:    1
  9807 ;; Hardware stack levels required when called:    4
  9808 ;; This function calls:
  9809 ;;		Nothing
  9810 ;; This function is called by:
  9811 ;;		_autoRun
  9812 ;; This function uses a non-reentrant model
  9813 ;;
  9814                           
  9815                           
  9816                           ;psect for function ___lmul
  9817  1652                     ___lmul:	
  9818                           
  9819                           ;incstack = 0
  9820                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  9821  1652  01A8               	clrf	___lmul@product^(0+128)
  9822  1653  01A9               	clrf	(___lmul@product+1)^(0+128)
  9823  1654  01AA               	clrf	(___lmul@product+2)^(0+128)
  9824  1655  01AB               	clrf	(___lmul@product+3)^(0+128)
  9825  1656                     l1036:	
  9826  1656  1C20               	btfss	___lmul@multiplier^(0+128),0
  9827  1657  2E60               	goto	l7723
  9828  1658  0824               	movf	___lmul@multiplicand^(0+128),w
  9829  1659  07A8               	addwf	___lmul@product^(0+128),f
  9830  165A  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
  9831  165B  3DA9               	addwfc	(___lmul@product+1)^(0+128),f
  9832  165C  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
  9833  165D  3DAA               	addwfc	(___lmul@product+2)^(0+128),f
  9834  165E  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
  9835  165F  3DAB               	addwfc	(___lmul@product+3)^(0+128),f
  9836  1660                     l7723:	
  9837  1660  35A4               	lslf	___lmul@multiplicand^(0+128),f
  9838  1661  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
  9839  1662  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
  9840  1663  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
  9841  1664  36A3               	lsrf	(___lmul@multiplier+3)^(0+128),f
  9842  1665  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
  9843  1666  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
  9844  1667  0CA0               	rrf	___lmul@multiplier^(0+128),f
  9845  1668  0823               	movf	(___lmul@multiplier+3)^(0+128),w
  9846  1669  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
  9847  166A  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
  9848  166B  0420               	iorwf	___lmul@multiplier^(0+128),w
  9849  166C  1D03               	skipz
  9850  166D  2E56               	goto	l1036
  9851  166E  082B               	movf	(___lmul@product+3)^(0+128),w
  9852  166F  00A3               	movwf	(?___lmul+3)^(0+128)
  9853  1670  082A               	movf	(___lmul@product+2)^(0+128),w
  9854  1671  00A2               	movwf	(?___lmul+2)^(0+128)
  9855  1672  0829               	movf	(___lmul@product+1)^(0+128),w
  9856  1673  00A1               	movwf	(?___lmul+1)^(0+128)
  9857  1674  0828               	movf	___lmul@product^(0+128),w
  9858  1675  00A0               	movwf	?___lmul^(0+128)
  9859  1676  0008               	return
  9860  1677                     __end_of___lmul:	
  9861  1677                     __ptext22:	
  9862 ;; *************** function ___lldiv *****************
  9863 ;; Defined at:
  9864 ;;		line 6 in file "D:\Program Files\Microchip\xc8\v1.41\sources\common\lldiv.c"
  9865 ;; Parameters:    Size  Location     Type
  9866 ;;  divisor         4   12[BANK1 ] unsigned long 
  9867 ;;  dividend        4   16[BANK1 ] unsigned long 
  9868 ;; Auto vars:     Size  Location     Type
  9869 ;;  quotient        4   20[BANK1 ] unsigned long 
  9870 ;;  counter         1   24[BANK1 ] unsigned char 
  9871 ;; Return value:  Size  Location     Type
  9872 ;;                  4   12[BANK1 ] unsigned long 
  9873 ;; Registers used:
  9874 ;;		wreg, status,2, status,0
  9875 ;; Tracked objects:
  9876 ;;		On entry : 1F/1
  9877 ;;		On exit  : 1F/1
  9878 ;;		Unchanged: 0/0
  9879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9880 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  9881 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  9882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9883 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0
  9884 ;;Total ram usage:       13 bytes
  9885 ;; Hardware stack levels used:    1
  9886 ;; Hardware stack levels required when called:    4
  9887 ;; This function calls:
  9888 ;;		Nothing
  9889 ;; This function is called by:
  9890 ;;		_autoRun
  9891 ;; This function uses a non-reentrant model
  9892 ;;
  9893                           
  9894                           
  9895                           ;psect for function ___lldiv
  9896  1677                     ___lldiv:	
  9897                           
  9898                           ;incstack = 0
  9899                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  9900  1677  01B4               	clrf	___lldiv@quotient^(0+128)
  9901  1678  01B5               	clrf	(___lldiv@quotient+1)^(0+128)
  9902  1679  01B6               	clrf	(___lldiv@quotient+2)^(0+128)
  9903  167A  01B7               	clrf	(___lldiv@quotient+3)^(0+128)
  9904  167B  082F               	movf	(___lldiv@divisor+3)^(0+128),w
  9905  167C  042E               	iorwf	(___lldiv@divisor+2)^(0+128),w
  9906  167D  042D               	iorwf	(___lldiv@divisor+1)^(0+128),w
  9907  167E  042C               	iorwf	___lldiv@divisor^(0+128),w
  9908  167F  1903               	skipnz
  9909  1680  2EAD               	goto	l7753
  9910  1681  01B8               	clrf	___lldiv@counter^(0+128)
  9911  1682                     L9:	
  9912  1682  0AB8               	incf	___lldiv@counter^(0+128),f
  9913  1683  1BAF               	btfsc	(___lldiv@divisor+3)^(0+128),7
  9914  1684  2E8A               	goto	l7741
  9915  1685  35AC               	lslf	___lldiv@divisor^(0+128),f
  9916  1686  0DAD               	rlf	(___lldiv@divisor+1)^(0+128),f
  9917  1687  0DAE               	rlf	(___lldiv@divisor+2)^(0+128),f
  9918  1688  0DAF               	rlf	(___lldiv@divisor+3)^(0+128),f
  9919  1689  2E82               	goto	L9
  9920  168A                     l7741:	
  9921  168A  35B4               	lslf	___lldiv@quotient^(0+128),f
  9922  168B  0DB5               	rlf	(___lldiv@quotient+1)^(0+128),f
  9923  168C  0DB6               	rlf	(___lldiv@quotient+2)^(0+128),f
  9924  168D  0DB7               	rlf	(___lldiv@quotient+3)^(0+128),f
  9925  168E  082F               	movf	(___lldiv@divisor+3)^(0+128),w
  9926  168F  0233               	subwf	(___lldiv@dividend+3)^(0+128),w
  9927  1690  1D03               	skipz
  9928  1691  2E9C               	goto	u6515
  9929  1692  082E               	movf	(___lldiv@divisor+2)^(0+128),w
  9930  1693  0232               	subwf	(___lldiv@dividend+2)^(0+128),w
  9931  1694  1D03               	skipz
  9932  1695  2E9C               	goto	u6515
  9933  1696  082D               	movf	(___lldiv@divisor+1)^(0+128),w
  9934  1697  0231               	subwf	(___lldiv@dividend+1)^(0+128),w
  9935  1698  1D03               	skipz
  9936  1699  2E9C               	goto	u6515
  9937  169A  082C               	movf	___lldiv@divisor^(0+128),w
  9938  169B  0230               	subwf	___lldiv@dividend^(0+128),w
  9939  169C                     u6515:	
  9940  169C  1C03               	skipc
  9941  169D  2EA7               	goto	l7749
  9942  169E  082C               	movf	___lldiv@divisor^(0+128),w
  9943  169F  02B0               	subwf	___lldiv@dividend^(0+128),f
  9944  16A0  082D               	movf	(___lldiv@divisor+1)^(0+128),w
  9945  16A1  3BB1               	subwfb	(___lldiv@dividend+1)^(0+128),f
  9946  16A2  082E               	movf	(___lldiv@divisor+2)^(0+128),w
  9947  16A3  3BB2               	subwfb	(___lldiv@dividend+2)^(0+128),f
  9948  16A4  082F               	movf	(___lldiv@divisor+3)^(0+128),w
  9949  16A5  3BB3               	subwfb	(___lldiv@dividend+3)^(0+128),f
  9950  16A6  1434               	bsf	___lldiv@quotient^(0+128),0
  9951  16A7                     l7749:	
  9952  16A7  36AF               	lsrf	(___lldiv@divisor+3)^(0+128),f
  9953  16A8  0CAE               	rrf	(___lldiv@divisor+2)^(0+128),f
  9954  16A9  0CAD               	rrf	(___lldiv@divisor+1)^(0+128),f
  9955  16AA  0CAC               	rrf	___lldiv@divisor^(0+128),f
  9956  16AB  0BB8               	decfsz	___lldiv@counter^(0+128),f
  9957  16AC  2E8A               	goto	l7741
  9958  16AD                     l7753:	
  9959  16AD  0837               	movf	(___lldiv@quotient+3)^(0+128),w
  9960  16AE  00AF               	movwf	(?___lldiv+3)^(0+128)
  9961  16AF  0836               	movf	(___lldiv@quotient+2)^(0+128),w
  9962  16B0  00AE               	movwf	(?___lldiv+2)^(0+128)
  9963  16B1  0835               	movf	(___lldiv@quotient+1)^(0+128),w
  9964  16B2  00AD               	movwf	(?___lldiv+1)^(0+128)
  9965  16B3  0834               	movf	___lldiv@quotient^(0+128),w
  9966  16B4  00AC               	movwf	?___lldiv^(0+128)
  9967  16B5  0008               	return
  9968  16B6                     __end_of___lldiv:	
  9969  16B6                     PL6:	
  9970  16B6  0021               	movlb	1	; select bank1
  9971  16B7  00BE               	movwf	??_autoRun^(0+128)
  9972  16B8  3020               	movlw	(low (autoRun@val| (0+256)))& (0+255)
  9973  16B9  35BE               	lslf	??_autoRun^(0+128),f
  9974  16BA  35BE               	lslf	??_autoRun^(0+128),f
  9975  16BB  073E               	addwf	??_autoRun^(0+128),w
  9976  16BC  00BF               	movwf	(??_autoRun+1)^(0+128)
  9977  16BD  0022               	movlb	2	; select bank2
  9978  16BE  084B               	movf	autoRun@k^(0+256),w
  9979  16BF  0021               	movlb	1	; select bank1
  9980  16C0  073F               	addwf	(??_autoRun+1)^(0+128),w
  9981  16C1  00C0               	movwf	(??_autoRun+2)^(0+128)
  9982  16C2  0086               	movwf	6
  9983  16C3  0008               	return
  9984  16C4                     __end_ofPL6:	
  9985  16C4                     PL10:	
  9986  16C4  0820               	movf	?___wmul^(0+128),w
  9987  16C5  00C3               	movwf	(??_autoRun+5)^(0+128)
  9988  16C6  0821               	movf	(?___wmul+1)^(0+128),w
  9989  16C7  00C4               	movwf	((??_autoRun+5)^(0+128)+1)
  9990  16C8  01C5               	clrf	((??_autoRun+5)^(0+128)+2)
  9991  16C9  01C6               	clrf	((??_autoRun+5)^(0+128)+3)
  9992  16CA  0846               	movf	(??_autoRun+8)^(0+128),w
  9993  16CB  00AF               	movwf	(___lldiv@divisor+3)^(0+128)
  9994  16CC  0845               	movf	(??_autoRun+7)^(0+128),w
  9995  16CD  00AE               	movwf	(___lldiv@divisor+2)^(0+128)
  9996  16CE  0844               	movf	(??_autoRun+6)^(0+128),w
  9997  16CF  00AD               	movwf	(___lldiv@divisor+1)^(0+128)
  9998  16D0  0843               	movf	(??_autoRun+5)^(0+128),w
  9999  16D1  00AC               	movwf	___lldiv@divisor^(0+128)
 10000  16D2  0022               	movlb	2	; select bank2
 10001  16D3  0838               	movf	autoRun@dbrt^(0+256),w
 10002  16D4  0021               	movlb	1	; select bank1
 10003  16D5  00A0               	movwf	___lmul@multiplier^(0+128)
 10004  16D6  01A1               	clrf	(___lmul@multiplier+1)^(0+128)
 10005  16D7  01A2               	clrf	(___lmul@multiplier+2)^(0+128)
 10006  16D8  01A3               	clrf	(___lmul@multiplier+3)^(0+128)
 10007  16D9  0022               	movlb	2	; select bank2
 10008  16DA  0843               	movf	(autoRun@dt+3)^(0+256),w
 10009  16DB  0021               	movlb	1	; select bank1
 10010  16DC  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
 10011  16DD  0022               	movlb	2	; select bank2
 10012  16DE  0842               	movf	(autoRun@dt+2)^(0+256),w
 10013  16DF  0021               	movlb	1	; select bank1
 10014  16E0  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
 10015  16E1  0022               	movlb	2	; select bank2
 10016  16E2  0841               	movf	(autoRun@dt+1)^(0+256),w
 10017  16E3  0021               	movlb	1	; select bank1
 10018  16E4  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
 10019  16E5  0022               	movlb	2	; select bank2
 10020  16E6  0840               	movf	autoRun@dt^(0+256),w
 10021  16E7  0021               	movlb	1	; select bank1
 10022  16E8  00A4               	movwf	___lmul@multiplicand^(0+128)
 10023  16E9  0008               	return
 10024  16EA                     __end_ofPL10:	
 10025  16EA                     PL18:	
 10026  16EA  0800               	movf	0,w
 10027  16EB  0201               	subwf	1,w
 10028  16EC  0022               	movlb	2	; select bank2
 10029  16ED  00B8               	movwf	autoRun@dbrt^(0+256)
 10030  16EE  084C               	movf	autoRun@i^(0+256),w
 10031  16EF  0008               	return
 10032  16F0                     __end_ofPL18:	
 10033  16F0                     PL26:	
 10034  16F0  0021               	movlb	1	; select bank1
 10035  16F1  00C1               	movwf	(??_autoRun+3)^(0+128)
 10036  16F2  3020               	movlw	(low (autoRun@val| (0+256)))& (0+255)
 10037  16F3  35C1               	lslf	(??_autoRun+3)^(0+128),f
 10038  16F4  35C1               	lslf	(??_autoRun+3)^(0+128),f
 10039  16F5  0741               	addwf	(??_autoRun+3)^(0+128),w
 10040  16F6  00C2               	movwf	(??_autoRun+4)^(0+128)
 10041  16F7  0022               	movlb	2	; select bank2
 10042  16F8  084B               	movf	autoRun@k^(0+256),w
 10043  16F9  0021               	movlb	1	; select bank1
 10044  16FA  0742               	addwf	(??_autoRun+4)^(0+128),w
 10045  16FB  00C3               	movwf	(??_autoRun+5)^(0+128)
 10046  16FC  0084               	movwf	4
 10047  16FD  0008               	return
 10048  16FE                     __end_ofPL26:	
 10049  16FE                     PL32:	
 10050  16FE  0021               	movlb	1	; select bank1
 10051  16FF  00A0               	movwf	___wmul@multiplier^(0+128)
 10052  1700  303C               	movlw	60
 10053  1701  01A1               	clrf	(___wmul@multiplier+1)^(0+128)
 10054  1702  00A2               	movwf	___wmul@multiplicand^(0+128)
 10055  1703  01A3               	clrf	(___wmul@multiplicand+1)^(0+128)
 10056  1704  0008               	return
 10057  1705                     __end_ofPL32:	
 10058  1705                     PL46:	
 10059  1705  0820               	movf	?___wmul^(0+128),w
 10060  1706  00C1               	movwf	(??_autoRun+3)^(0+128)
 10061  1707  0821               	movf	(?___wmul+1)^(0+128),w
 10062  1708  00C2               	movwf	((??_autoRun+3)^(0+128)+1)
 10063  1709  3006               	movlw	6
 10064  170A  00A2               	movwf	___wmul@multiplicand^(0+128)
 10065  170B  01A3               	clrf	(___wmul@multiplicand+1)^(0+128)
 10066  170C  0022               	movlb	2	; select bank2
 10067  170D  083A               	movf	(autoRun@duration+1)^(0+256),w
 10068  170E  0021               	movlb	1	; select bank1
 10069  170F  00A1               	movwf	(___wmul@multiplier+1)^(0+128)
 10070  1710  0022               	movlb	2	; select bank2
 10071  1711  0839               	movf	autoRun@duration^(0+256),w
 10072  1712  0021               	movlb	1	; select bank1
 10073  1713  00A0               	movwf	___wmul@multiplier^(0+128)
 10074  1714  0008               	return
 10075  1715                     __end_ofPL46:	
 10076  1715                     PL54:	
 10077  1715  083E               	movf	??_autoRun^(0+128),w
 10078  1716  0720               	addwf	?___wmul^(0+128),w
 10079  1717  00C0               	movwf	(??_autoRun+2)^(0+128)
 10080  1718  083F               	movf	(??_autoRun+1)^(0+128),w
 10081  1719  3D21               	addwfc	(?___wmul+1)^(0+128),w
 10082  171A  00C1               	movwf	(??_autoRun+3)^(0+128)
 10083  171B  0840               	movf	(??_autoRun+2)^(0+128),w
 10084  171C  0022               	movlb	2	; select bank2
 10085  171D  0008               	return
 10086  171E                     __end_ofPL54:	
 10087  171E                     PL68:	
 10088  171E  00C8               	movwf	(??_autoRun+10)^(0+128)
 10089  171F  0022               	movlb	2	; select bank2
 10090  1720  354B               	lslf	autoRun@k^(0+256),w
 10091  1721  3E56               	addlw	(low ((_gLedRunPara| 0+13)))& (0+255)
 10092  1722  0086               	movwf	6
 10093  1723  0187               	clrf	7
 10094  1724  0021               	movlb	1	; select bank1
 10095  1725  0847               	movf	(??_autoRun+9)^(0+128),w
 10096  1726  3FC0               	movwi [0]fsr1
 10097  1727  0848               	movf	((??_autoRun+9)^(0+128)+1),w
 10098  1728  3FC1               	movwi [1]fsr1
 10099  1729  0008               	return
 10100  172A                     __end_ofPL68:	
 10101  172A                     PL100:	
 10102  172A  3E20               	addlw	(low (autoRun@val| (0+256)))& (0+255)
 10103  172B  0086               	movwf	6
 10104  172C  084C               	movf	autoRun@i^(0+256),w
 10105  172D  3E3F               	addlw	(low ((_gLedPara| (0+512)+31)))& (0+255)
 10106  172E  0084               	movwf	4
 10107  172F  0800               	movf	0,w
 10108  1730  0081               	movwf	1
 10109  1731  084C               	movf	autoRun@i^(0+256),w
 10110  1732  0008               	return
 10111  1733                     __end_ofPL100:	
 10112  1733                     PL102:	
 10113  1733  0823               	movf	(?___lmul+3)^(0+128),w
 10114  1734  00B3               	movwf	(___lldiv@dividend+3)^(0+128)
 10115  1735  0822               	movf	(?___lmul+2)^(0+128),w
 10116  1736  00B2               	movwf	(___lldiv@dividend+2)^(0+128)
 10117  1737  0821               	movf	(?___lmul+1)^(0+128),w
 10118  1738  00B1               	movwf	(___lldiv@dividend+1)^(0+128)
 10119  1739  0820               	movf	?___lmul^(0+128),w
 10120  173A  00B0               	movwf	___lldiv@dividend^(0+128)
 10121  173B  0008               	return
 10122  173C                     __end_ofPL102:	
 10123  173C                     PL112:	
 10124  173C  00BA               	movwf	(autoRun@duration+1)^(0+256)
 10125  173D  0845               	movf	autoRun@et^(0+256),w
 10126  173E  00B9               	movwf	autoRun@duration^(0+256)
 10127  173F  0847               	movf	autoRun@st^(0+256),w
 10128  1740  02B9               	subwf	autoRun@duration^(0+256),f
 10129  1741  0848               	movf	(autoRun@st+1)^(0+256),w
 10130  1742  3BBA               	subwfb	(autoRun@duration+1)^(0+256),f
 10131  1743  0008               	return
 10132  1744                     __end_ofPL112:	
 10133  1744                     PL142:	
 10134  1744  0801               	movf	1,w
 10135  1745  00A0               	movwf	___wmul@multiplier^(0+128)
 10136  1746  300A               	movlw	10
 10137  1747  01A1               	clrf	(___wmul@multiplier+1)^(0+128)
 10138  1748  00A2               	movwf	___wmul@multiplicand^(0+128)
 10139  1749  01A3               	clrf	(___wmul@multiplicand+1)^(0+128)
 10140  174A  0008               	return
 10141  174B                     __end_ofPL142:	
 10142  174B                     __ptext17:	
 10143 ;; *************** function _turnOffLed *****************
 10144 ;; Defined at:
 10145 ;;		line 205 in file "src/led.c"
 10146 ;; Parameters:    Size  Location     Type
 10147 ;;		None
 10148 ;; Auto vars:     Size  Location     Type
 10149 ;;		None
 10150 ;; Return value:  Size  Location     Type
 10151 ;;                  1    wreg      void 
 10152 ;; Registers used:
 10153 ;;		wreg, status,2, status,0, pclath, cstack
 10154 ;; Tracked objects:
 10155 ;;		On entry : 1F/0
 10156 ;;		On exit  : 1F/6
 10157 ;;		Unchanged: 0/0
 10158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10162 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10163 ;;Total ram usage:        0 bytes
 10164 ;; Hardware stack levels used:    1
 10165 ;; Hardware stack levels required when called:    5
 10166 ;; This function calls:
 10167 ;;		_PWM1_LoadDutyValue
 10168 ;;		_PWM2_LoadDutyValue
 10169 ;;		_PWM3_LoadDutyValue
 10170 ;;		_PWM4_LoadDutyValue
 10171 ;; This function is called by:
 10172 ;;		_findDeviceFlash
 10173 ;; This function uses a non-reentrant model
 10174 ;;
 10175                           
 10176                           
 10177                           ;psect for function _turnOffLed
 10178  174B                     _turnOffLed:	
 10179                           
 10180                           ;led.c: 207: PWM1_LoadDutyValue(0);
 10181                           
 10182                           ;incstack = 0
 10183                           ; Regs used in _turnOffLed: [wreg+status,2+status,0+pclath+cstack]
 10184  174B  0021               	movlb	1	; select bank1
 10185  174C  01A0               	clrf	PWM1_LoadDutyValue@dutyValue^(0+128)
 10186  174D  01A1               	clrf	(PWM1_LoadDutyValue@dutyValue+1)^(0+128)
 10187  174E  27A0  3194         	fcall	_PWM1_LoadDutyValue
 10188                           
 10189                           ;led.c: 208: PWM2_LoadDutyValue(0);
 10190  1750  0021               	movlb	1	; select bank1
 10191  1751  01A0               	clrf	PWM2_LoadDutyValue@dutyValue^(0+128)
 10192  1752  01A1               	clrf	(PWM2_LoadDutyValue@dutyValue+1)^(0+128)
 10193  1753  27B0  3194         	fcall	_PWM2_LoadDutyValue
 10194                           
 10195                           ;led.c: 209: PWM3_LoadDutyValue(0);
 10196  1755  0021               	movlb	1	; select bank1
 10197  1756  01A0               	clrf	PWM3_LoadDutyValue@dutyValue^(0+128)
 10198  1757  01A1               	clrf	(PWM3_LoadDutyValue@dutyValue+1)^(0+128)
 10199  1758  27C0  3194         	fcall	_PWM3_LoadDutyValue
 10200                           
 10201                           ;led.c: 210: PWM4_LoadDutyValue(0);
 10202  175A  0021               	movlb	1	; select bank1
 10203  175B  01A0               	clrf	PWM4_LoadDutyValue@dutyValue^(0+128)
 10204  175C  01A1               	clrf	(PWM4_LoadDutyValue@dutyValue+1)^(0+128)
 10205  175D  2FD0               	ljmp	l7099
 10206  175E                     __end_of_turnOffLed:	
 10207  175E                     __ptext18:	
 10208 ;; *************** function _turnMaxLed *****************
 10209 ;; Defined at:
 10210 ;;		line 194 in file "src/led.c"
 10211 ;; Parameters:    Size  Location     Type
 10212 ;;		None
 10213 ;; Auto vars:     Size  Location     Type
 10214 ;;		None
 10215 ;; Return value:  Size  Location     Type
 10216 ;;                  1    wreg      void 
 10217 ;; Registers used:
 10218 ;;		wreg, status,2, status,0, pclath, cstack
 10219 ;; Tracked objects:
 10220 ;;		On entry : 1F/0
 10221 ;;		On exit  : 1F/6
 10222 ;;		Unchanged: 0/0
 10223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10227 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10228 ;;Total ram usage:        0 bytes
 10229 ;; Hardware stack levels used:    1
 10230 ;; Hardware stack levels required when called:    5
 10231 ;; This function calls:
 10232 ;;		_PWM1_LoadDutyValue
 10233 ;;		_PWM2_LoadDutyValue
 10234 ;;		_PWM3_LoadDutyValue
 10235 ;;		_PWM4_LoadDutyValue
 10236 ;; This function is called by:
 10237 ;;		_findDeviceFlash
 10238 ;; This function uses a non-reentrant model
 10239 ;;
 10240                           
 10241                           
 10242                           ;psect for function _turnMaxLed
 10243  175E                     _turnMaxLed:	
 10244  175E                     l7691:	
 10245                           ;incstack = 0
 10246                           ; Regs used in _turnMaxLed: [wreg+status,2+status,0+pclath+cstack]
 10247                           
 10248                           
 10249                           ;led.c: 196: PWM1_LoadDutyValue(1000);
 10250  175E  30E8               	movlw	232
 10251  175F  0021               	movlb	1	; select bank1
 10252  1760  00A0               	movwf	PWM1_LoadDutyValue@dutyValue^(0+128)
 10253  1761  3003               	movlw	3
 10254  1762  00A1               	movwf	(PWM1_LoadDutyValue@dutyValue^(0+128)+1)
 10255  1763  27A0  3194         	fcall	_PWM1_LoadDutyValue
 10256                           
 10257                           ;led.c: 197: PWM2_LoadDutyValue(1000);
 10258  1765  30E8               	movlw	232
 10259  1766  0021               	movlb	1	; select bank1
 10260  1767  00A0               	movwf	PWM2_LoadDutyValue@dutyValue^(0+128)
 10261  1768  3003               	movlw	3
 10262  1769  00A1               	movwf	(PWM2_LoadDutyValue@dutyValue^(0+128)+1)
 10263  176A  27B0  3194         	fcall	_PWM2_LoadDutyValue
 10264                           
 10265                           ;led.c: 198: PWM3_LoadDutyValue(1000);
 10266  176C  30E8               	movlw	232
 10267  176D  0021               	movlb	1	; select bank1
 10268  176E  00A0               	movwf	PWM3_LoadDutyValue@dutyValue^(0+128)
 10269  176F  3003               	movlw	3
 10270  1770  00A1               	movwf	(PWM3_LoadDutyValue@dutyValue^(0+128)+1)
 10271  1771  27C0  3194         	fcall	_PWM3_LoadDutyValue
 10272                           
 10273                           ;led.c: 199: PWM4_LoadDutyValue(1000);
 10274  1773  30E8               	movlw	232
 10275  1774  0021               	movlb	1	; select bank1
 10276  1775  00A0               	movwf	PWM4_LoadDutyValue@dutyValue^(0+128)
 10277  1776  3003               	movlw	3
 10278  1777  00A1               	movwf	(PWM4_LoadDutyValue@dutyValue^(0+128)+1)
 10279  1778  2FD0               	ljmp	l7099
 10280  1779                     __end_of_turnMaxLed:	
 10281  1779                     __ptext36:	
 10282 ;; *************** function _updatePWM *****************
 10283 ;; Defined at:
 10284 ;;		line 8 in file "src/led.c"
 10285 ;; Parameters:    Size  Location     Type
 10286 ;;		None
 10287 ;; Auto vars:     Size  Location     Type
 10288 ;;		None
 10289 ;; Return value:  Size  Location     Type
 10290 ;;                  1    wreg      void 
 10291 ;; Registers used:
 10292 ;;		wreg, status,2, status,0, pclath, cstack
 10293 ;; Tracked objects:
 10294 ;;		On entry : 1C/2
 10295 ;;		On exit  : 1F/6
 10296 ;;		Unchanged: 0/0
 10297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10302 ;;Total ram usage:        0 bytes
 10303 ;; Hardware stack levels used:    1
 10304 ;; Hardware stack levels required when called:    5
 10305 ;; This function calls:
 10306 ;;		_PWM1_LoadDutyValue
 10307 ;;		_PWM2_LoadDutyValue
 10308 ;;		_PWM3_LoadDutyValue
 10309 ;;		_PWM4_LoadDutyValue
 10310 ;; This function is called by:
 10311 ;;		_DecodeDATA
 10312 ;;		_autoRun
 10313 ;; This function uses a non-reentrant model
 10314 ;;
 10315                           
 10316                           
 10317                           ;psect for function _updatePWM
 10318  1779                     _updatePWM:	
 10319  1779                     l7689:	
 10320                           ;incstack = 0
 10321                           ; Regs used in _updatePWM: [wreg+status,2+status,0+pclath+cstack]
 10322                           
 10323                           
 10324                           ;led.c: 10: PWM1_LoadDutyValue(gLedRunPara.nCurrentBrt[0]);
 10325  1779  0020               	movlb	0	; select bank0
 10326  177A  0857               	movf	_gLedRunPara+14,w	;volatile
 10327  177B  0021               	movlb	1	; select bank1
 10328  177C  00A1               	movwf	(PWM1_LoadDutyValue@dutyValue+1)^(0+128)
 10329  177D  0020               	movlb	0	; select bank0
 10330  177E  0856               	movf	_gLedRunPara+13,w	;volatile
 10331  177F  0021               	movlb	1	; select bank1
 10332  1780  00A0               	movwf	PWM1_LoadDutyValue@dutyValue^(0+128)
 10333  1781  27A0  3194         	fcall	_PWM1_LoadDutyValue
 10334                           
 10335                           ;led.c: 11: PWM2_LoadDutyValue(gLedRunPara.nCurrentBrt[1]);
 10336  1783  0020               	movlb	0	; select bank0
 10337  1784  0859               	movf	_gLedRunPara+16,w	;volatile
 10338  1785  0021               	movlb	1	; select bank1
 10339  1786  00A1               	movwf	(PWM2_LoadDutyValue@dutyValue+1)^(0+128)
 10340  1787  0020               	movlb	0	; select bank0
 10341  1788  0858               	movf	_gLedRunPara+15,w	;volatile
 10342  1789  0021               	movlb	1	; select bank1
 10343  178A  00A0               	movwf	PWM2_LoadDutyValue@dutyValue^(0+128)
 10344  178B  27B0  3194         	fcall	_PWM2_LoadDutyValue
 10345                           
 10346                           ;led.c: 12: PWM3_LoadDutyValue(gLedRunPara.nCurrentBrt[2]);
 10347  178D  0020               	movlb	0	; select bank0
 10348  178E  085B               	movf	_gLedRunPara+18,w	;volatile
 10349  178F  0021               	movlb	1	; select bank1
 10350  1790  00A1               	movwf	(PWM3_LoadDutyValue@dutyValue+1)^(0+128)
 10351  1791  0020               	movlb	0	; select bank0
 10352  1792  085A               	movf	_gLedRunPara+17,w	;volatile
 10353  1793  0021               	movlb	1	; select bank1
 10354  1794  00A0               	movwf	PWM3_LoadDutyValue@dutyValue^(0+128)
 10355  1795  27C0  3194         	fcall	_PWM3_LoadDutyValue
 10356                           
 10357                           ;led.c: 13: PWM4_LoadDutyValue(gLedRunPara.nCurrentBrt[3]);
 10358  1797  0020               	movlb	0	; select bank0
 10359  1798  085D               	movf	_gLedRunPara+20,w	;volatile
 10360  1799  0021               	movlb	1	; select bank1
 10361  179A  00A1               	movwf	(PWM4_LoadDutyValue@dutyValue+1)^(0+128)
 10362  179B  0020               	movlb	0	; select bank0
 10363  179C  085C               	movf	_gLedRunPara+19,w	;volatile
 10364  179D  0021               	movlb	1	; select bank1
 10365  179E  00A0               	movwf	PWM4_LoadDutyValue@dutyValue^(0+128)
 10366  179F  2FD0               	ljmp	l7099
 10367  17A0                     __end_of_updatePWM:	
 10368  17A0                     __ptext40:	
 10369 ;; *************** function _PWM1_LoadDutyValue *****************
 10370 ;; Defined at:
 10371 ;;		line 21 in file "src/pwm.c"
 10372 ;; Parameters:    Size  Location     Type
 10373 ;;  dutyValue       2    0[BANK1 ] unsigned int 
 10374 ;; Auto vars:     Size  Location     Type
 10375 ;;		None
 10376 ;; Return value:  Size  Location     Type
 10377 ;;                  1    wreg      void 
 10378 ;; Registers used:
 10379 ;;		wreg
 10380 ;; Tracked objects:
 10381 ;;		On entry : 1F/1
 10382 ;;		On exit  : 1F/5
 10383 ;;		Unchanged: 0/0
 10384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10385 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 10386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10388 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 10389 ;;Total ram usage:        2 bytes
 10390 ;; Hardware stack levels used:    1
 10391 ;; Hardware stack levels required when called:    4
 10392 ;; This function calls:
 10393 ;;		Nothing
 10394 ;; This function is called by:
 10395 ;;		_updatePWM
 10396 ;;		_turnMaxLed
 10397 ;;		_turnOffLed
 10398 ;; This function uses a non-reentrant model
 10399 ;;
 10400                           
 10401                           
 10402                           ;psect for function _PWM1_LoadDutyValue
 10403  17A0                     _PWM1_LoadDutyValue:	
 10404                           
 10405                           ;pwm.c: 23: dutyValue &= 0x03FF;
 10406                           
 10407                           ;incstack = 0
 10408                           ; Regs used in _PWM1_LoadDutyValue: [wreg]
 10409  17A0  30FF               	movlw	255
 10410  17A1  05A0               	andwf	PWM1_LoadDutyValue@dutyValue^(0+128),f
 10411  17A2  3003               	movlw	3
 10412  17A3  05A1               	andwf	(PWM1_LoadDutyValue@dutyValue+1)^(0+128),f
 10413                           
 10414                           ;pwm.c: 26: if(CCP1CONbits.CCP1FMT)
 10415  17A4  0025               	movlb	5	; select bank5
 10416  17A5  1E13               	btfss	19,4	;volatile
 10417  17A6  2FAE               	goto	l7081
 10418                           
 10419                           ;pwm.c: 27: {
 10420                           ;pwm.c: 28: dutyValue <<= 6;
 10421  17A7  3006               	movlw	6
 10422  17A8  0021               	movlb	1	; select bank1
 10423  17A9                     u6025:	
 10424  17A9  35A0               	lslf	PWM1_LoadDutyValue@dutyValue^(0+128),f
 10425  17AA  0DA1               	rlf	(PWM1_LoadDutyValue@dutyValue+1)^(0+128),f
 10426  17AB  0B89               	decfsz	9,f
 10427  17AC  2FA9               	goto	u6025
 10428                           
 10429                           ;pwm.c: 29: CCPR1H = dutyValue >> 8;
 10430                           
 10431                           ;pwm.c: 30: CCPR1L = dutyValue;
 10432                           
 10433                           ;pwm.c: 31: }
 10434  17AD  2FF0               	ljmp	PL104	;call to abstracted procedure
 10435  17AE                     l7081:	
 10436                           
 10437                           ;pwm.c: 32: else
 10438                           ;pwm.c: 33: {
 10439                           ;pwm.c: 34: CCPR1H = dutyValue >> 8;
 10440  17AE  0021               	movlb	1	; select bank1
 10441                           
 10442                           ;pwm.c: 35: CCPR1L = dutyValue;
 10443  17AF  2FF0               	ljmp	PL104	;call to abstracted procedure
 10444  17B0                     __end_of_PWM1_LoadDutyValue:	
 10445  17B0                     __ptext39:	
 10446 ;; *************** function _PWM2_LoadDutyValue *****************
 10447 ;; Defined at:
 10448 ;;		line 56 in file "src/pwm.c"
 10449 ;; Parameters:    Size  Location     Type
 10450 ;;  dutyValue       2    0[BANK1 ] unsigned int 
 10451 ;; Auto vars:     Size  Location     Type
 10452 ;;		None
 10453 ;; Return value:  Size  Location     Type
 10454 ;;                  1    wreg      void 
 10455 ;; Registers used:
 10456 ;;		wreg
 10457 ;; Tracked objects:
 10458 ;;		On entry : 1F/1
 10459 ;;		On exit  : 1F/5
 10460 ;;		Unchanged: 0/0
 10461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10462 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 10463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10465 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 10466 ;;Total ram usage:        2 bytes
 10467 ;; Hardware stack levels used:    1
 10468 ;; Hardware stack levels required when called:    4
 10469 ;; This function calls:
 10470 ;;		Nothing
 10471 ;; This function is called by:
 10472 ;;		_updatePWM
 10473 ;;		_turnMaxLed
 10474 ;;		_turnOffLed
 10475 ;; This function uses a non-reentrant model
 10476 ;;
 10477                           
 10478                           
 10479                           ;psect for function _PWM2_LoadDutyValue
 10480  17B0                     _PWM2_LoadDutyValue:	
 10481                           
 10482                           ;pwm.c: 58: dutyValue &= 0x03FF;
 10483                           
 10484                           ;incstack = 0
 10485                           ; Regs used in _PWM2_LoadDutyValue: [wreg]
 10486  17B0  30FF               	movlw	255
 10487  17B1  05A0               	andwf	PWM2_LoadDutyValue@dutyValue^(0+128),f
 10488  17B2  3003               	movlw	3
 10489  17B3  05A1               	andwf	(PWM2_LoadDutyValue@dutyValue+1)^(0+128),f
 10490                           
 10491                           ;pwm.c: 61: if(CCP2CONbits.CCP2FMT)
 10492  17B4  0025               	movlb	5	; select bank5
 10493  17B5  1E17               	btfss	23,4	;volatile
 10494  17B6  2FBE               	goto	l7089
 10495                           
 10496                           ;pwm.c: 62: {
 10497                           ;pwm.c: 63: dutyValue <<= 6;
 10498  17B7  3006               	movlw	6
 10499  17B8  0021               	movlb	1	; select bank1
 10500  17B9                     u6045:	
 10501  17B9  35A0               	lslf	PWM2_LoadDutyValue@dutyValue^(0+128),f
 10502  17BA  0DA1               	rlf	(PWM2_LoadDutyValue@dutyValue+1)^(0+128),f
 10503  17BB  0B89               	decfsz	9,f
 10504  17BC  2FB9               	goto	u6045
 10505                           
 10506                           ;pwm.c: 64: CCPR2H = dutyValue >> 8;
 10507                           
 10508                           ;pwm.c: 65: CCPR2L = dutyValue;
 10509                           
 10510                           ;pwm.c: 66: }
 10511  17BD  2FE0               	ljmp	PL96	;call to abstracted procedure
 10512  17BE                     l7089:	
 10513                           
 10514                           ;pwm.c: 67: else
 10515                           ;pwm.c: 68: {
 10516                           ;pwm.c: 69: CCPR2H = dutyValue >> 8;
 10517  17BE  0021               	movlb	1	; select bank1
 10518                           
 10519                           ;pwm.c: 70: CCPR2L = dutyValue;
 10520  17BF  2FE0               	ljmp	PL96	;call to abstracted procedure
 10521  17C0                     __end_of_PWM2_LoadDutyValue:	
 10522  17C0                     __ptext38:	
 10523 ;; *************** function _PWM3_LoadDutyValue *****************
 10524 ;; Defined at:
 10525 ;;		line 91 in file "src/pwm.c"
 10526 ;; Parameters:    Size  Location     Type
 10527 ;;  dutyValue       2    0[BANK1 ] unsigned int 
 10528 ;; Auto vars:     Size  Location     Type
 10529 ;;		None
 10530 ;; Return value:  Size  Location     Type
 10531 ;;                  1    wreg      void 
 10532 ;; Registers used:
 10533 ;;		wreg
 10534 ;; Tracked objects:
 10535 ;;		On entry : 1F/1
 10536 ;;		On exit  : 1F/6
 10537 ;;		Unchanged: 0/0
 10538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10539 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 10540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10542 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 10543 ;;Total ram usage:        2 bytes
 10544 ;; Hardware stack levels used:    1
 10545 ;; Hardware stack levels required when called:    4
 10546 ;; This function calls:
 10547 ;;		Nothing
 10548 ;; This function is called by:
 10549 ;;		_updatePWM
 10550 ;;		_turnMaxLed
 10551 ;;		_turnOffLed
 10552 ;; This function uses a non-reentrant model
 10553 ;;
 10554                           
 10555                           
 10556                           ;psect for function _PWM3_LoadDutyValue
 10557  17C0                     _PWM3_LoadDutyValue:	
 10558                           
 10559                           ;pwm.c: 93: dutyValue &= 0x03FF;
 10560                           
 10561                           ;incstack = 0
 10562                           ; Regs used in _PWM3_LoadDutyValue: [wreg]
 10563  17C0  30FF               	movlw	255
 10564  17C1  05A0               	andwf	PWM3_LoadDutyValue@dutyValue^(0+128),f
 10565  17C2  3003               	movlw	3
 10566  17C3  05A1               	andwf	(PWM3_LoadDutyValue@dutyValue+1)^(0+128),f
 10567                           
 10568                           ;pwm.c: 96: if(CCP3CONbits.CCP3FMT)
 10569  17C4  0026               	movlb	6	; select bank6
 10570  17C5  1E13               	btfss	19,4	;volatile
 10571  17C6  2FCE               	goto	l7097
 10572                           
 10573                           ;pwm.c: 97: {
 10574                           ;pwm.c: 98: dutyValue <<= 6;
 10575  17C7  3006               	movlw	6
 10576  17C8  0021               	movlb	1	; select bank1
 10577  17C9                     u6065:	
 10578  17C9  35A0               	lslf	PWM3_LoadDutyValue@dutyValue^(0+128),f
 10579  17CA  0DA1               	rlf	(PWM3_LoadDutyValue@dutyValue+1)^(0+128),f
 10580  17CB  0B89               	decfsz	9,f
 10581  17CC  2FC9               	goto	u6065
 10582                           
 10583                           ;pwm.c: 99: CCPR3H = dutyValue >> 8;
 10584                           
 10585                           ;pwm.c: 100: CCPR3L = dutyValue;
 10586                           
 10587                           ;pwm.c: 101: }
 10588  17CD  2FE8               	ljmp	PL98	;call to abstracted procedure
 10589  17CE                     l7097:	
 10590                           
 10591                           ;pwm.c: 102: else
 10592                           ;pwm.c: 103: {
 10593                           ;pwm.c: 104: CCPR3H = dutyValue >> 8;
 10594  17CE  0021               	movlb	1	; select bank1
 10595                           
 10596                           ;pwm.c: 105: CCPR3L = dutyValue;
 10597  17CF  2FE8               	ljmp	PL98	;call to abstracted procedure
 10598  17D0                     __end_of_PWM3_LoadDutyValue:	
 10599  17D0                     __ptext37:	
 10600 ;; *************** function _PWM4_LoadDutyValue *****************
 10601 ;; Defined at:
 10602 ;;		line 126 in file "src/pwm.c"
 10603 ;; Parameters:    Size  Location     Type
 10604 ;;  dutyValue       2    0[BANK1 ] unsigned int 
 10605 ;; Auto vars:     Size  Location     Type
 10606 ;;		None
 10607 ;; Return value:  Size  Location     Type
 10608 ;;                  1    wreg      void 
 10609 ;; Registers used:
 10610 ;;		wreg
 10611 ;; Tracked objects:
 10612 ;;		On entry : 1F/1
 10613 ;;		On exit  : 1F/6
 10614 ;;		Unchanged: 0/0
 10615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10616 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 10617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10619 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 10620 ;;Total ram usage:        2 bytes
 10621 ;; Hardware stack levels used:    1
 10622 ;; Hardware stack levels required when called:    4
 10623 ;; This function calls:
 10624 ;;		Nothing
 10625 ;; This function is called by:
 10626 ;;		_updatePWM
 10627 ;;		_turnMaxLed
 10628 ;;		_turnOffLed
 10629 ;; This function uses a non-reentrant model
 10630 ;;
 10631                           
 10632                           
 10633                           ;psect for function _PWM4_LoadDutyValue
 10634  17D0                     _PWM4_LoadDutyValue:	
 10635  17D0                     l7099:	
 10636                           ;incstack = 0
 10637                           ; Regs used in _PWM4_LoadDutyValue: [wreg]
 10638                           
 10639                           
 10640                           ;pwm.c: 128: dutyValue &= 0x03FF;
 10641  17D0  30FF               	movlw	255
 10642  17D1  05A0               	andwf	PWM4_LoadDutyValue@dutyValue^(0+128),f
 10643  17D2  3003               	movlw	3
 10644  17D3  05A1               	andwf	(PWM4_LoadDutyValue@dutyValue+1)^(0+128),f
 10645                           
 10646                           ;pwm.c: 131: if(CCP4CONbits.CCP4FMT)
 10647  17D4  0026               	movlb	6	; select bank6
 10648  17D5  1E17               	btfss	23,4	;volatile
 10649  17D6  2FDE               	goto	l7105
 10650                           
 10651                           ;pwm.c: 132: {
 10652                           ;pwm.c: 133: dutyValue <<= 6;
 10653  17D7  3006               	movlw	6
 10654  17D8  0021               	movlb	1	; select bank1
 10655  17D9                     u6085:	
 10656  17D9  35A0               	lslf	PWM4_LoadDutyValue@dutyValue^(0+128),f
 10657  17DA  0DA1               	rlf	(PWM4_LoadDutyValue@dutyValue+1)^(0+128),f
 10658  17DB  0B89               	decfsz	9,f
 10659  17DC  2FD9               	goto	u6085
 10660                           
 10661                           ;pwm.c: 134: CCPR4H = dutyValue >> 8;
 10662                           
 10663                           ;pwm.c: 135: CCPR4L = dutyValue;
 10664                           
 10665                           ;pwm.c: 136: }
 10666  17DD  2FF8               	ljmp	PL108	;call to abstracted procedure
 10667  17DE                     l7105:	
 10668                           
 10669                           ;pwm.c: 137: else
 10670                           ;pwm.c: 138: {
 10671                           ;pwm.c: 139: CCPR4H = dutyValue >> 8;
 10672  17DE  0021               	movlb	1	; select bank1
 10673                           
 10674                           ;pwm.c: 140: CCPR4L = dutyValue;
 10675  17DF  2FF8               	ljmp	PL108	;call to abstracted procedure
 10676  17E0                     __end_of_PWM4_LoadDutyValue:	
 10677  17E0                     PL96:	
 10678  17E0  0821               	movf	(PWM2_LoadDutyValue@dutyValue^(0+128)+1),w
 10679  17E1  0025               	movlb	5	; select bank5
 10680  17E2  0096               	movwf	22	;volatile
 10681  17E3  0021               	movlb	1	; select bank1
 10682  17E4  0820               	movf	PWM2_LoadDutyValue@dutyValue^(0+128),w
 10683  17E5  0025               	movlb	5	; select bank5
 10684  17E6  0095               	movwf	21	;volatile
 10685  17E7  0008               	return
 10686  17E8                     __end_ofPL96:	
 10687  17E8                     PL98:	
 10688  17E8  0821               	movf	(PWM3_LoadDutyValue@dutyValue^(0+128)+1),w
 10689  17E9  0026               	movlb	6	; select bank6
 10690  17EA  0092               	movwf	18	;volatile
 10691  17EB  0021               	movlb	1	; select bank1
 10692  17EC  0820               	movf	PWM3_LoadDutyValue@dutyValue^(0+128),w
 10693  17ED  0026               	movlb	6	; select bank6
 10694  17EE  0091               	movwf	17	;volatile
 10695  17EF  0008               	return
 10696  17F0                     __end_ofPL98:	
 10697  17F0                     PL104:	
 10698  17F0  0821               	movf	(PWM1_LoadDutyValue@dutyValue^(0+128)+1),w
 10699  17F1  0025               	movlb	5	; select bank5
 10700  17F2  0092               	movwf	18	;volatile
 10701  17F3  0021               	movlb	1	; select bank1
 10702  17F4  0820               	movf	PWM1_LoadDutyValue@dutyValue^(0+128),w
 10703  17F5  0025               	movlb	5	; select bank5
 10704  17F6  0091               	movwf	17	;volatile
 10705  17F7  0008               	return
 10706  17F8                     __end_ofPL104:	
 10707  17F8                     PL108:	
 10708  17F8  0821               	movf	(PWM4_LoadDutyValue@dutyValue^(0+128)+1),w
 10709  17F9  0026               	movlb	6	; select bank6
 10710  17FA  0096               	movwf	22	;volatile
 10711  17FB  0021               	movlb	1	; select bank1
 10712  17FC  0820               	movf	PWM4_LoadDutyValue@dutyValue^(0+128),w
 10713  17FD  0026               	movlb	6	; select bank6
 10714  17FE  0095               	movwf	21	;volatile
 10715  17FF  0008               	return
 10716  1800                     __end_ofPL108:	
 10717                           
 10718                           	psect	text25
 10719  1D8F                     __ptext25:	
 10720 ;; *************** function _SYSTEM_Initialize *****************
 10721 ;; Defined at:
 10722 ;;		line 57 in file "src/comman.c"
 10723 ;; Parameters:    Size  Location     Type
 10724 ;;		None
 10725 ;; Auto vars:     Size  Location     Type
 10726 ;;		None
 10727 ;; Return value:  Size  Location     Type
 10728 ;;                  1    wreg      void 
 10729 ;; Registers used:
 10730 ;;		wreg, status,2, status,0, pclath, cstack
 10731 ;; Tracked objects:
 10732 ;;		On entry : B1F/0
 10733 ;;		On exit  : 1F/1
 10734 ;;		Unchanged: 0/0
 10735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10740 ;;Total ram usage:        0 bytes
 10741 ;; Hardware stack levels used:    1
 10742 ;; Hardware stack levels required when called:    5
 10743 ;; This function calls:
 10744 ;;		_EUSART_Initialize
 10745 ;;		_OSCILLATOR_Initialize
 10746 ;;		_PIN_MANAGER_Initialize
 10747 ;;		_PWM1_Initialize
 10748 ;;		_PWM2_Initialize
 10749 ;;		_PWM3_Initialize
 10750 ;;		_PWM4_Initialize
 10751 ;;		_TMR0_Initialize
 10752 ;;		_TMR2_Initialize
 10753 ;; This function is called by:
 10754 ;;		_main
 10755 ;; This function uses a non-reentrant model
 10756 ;;
 10757                           
 10758                           
 10759                           ;psect for function _SYSTEM_Initialize
 10760  1D8F                     _SYSTEM_Initialize:	
 10761                           
 10762                           ;comman.c: 59: PIN_MANAGER_Initialize();
 10763                           
 10764                           ;incstack = 0
 10765                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10766  1D8F  25AA  319D         	fcall	_PIN_MANAGER_Initialize
 10767                           
 10768                           ;comman.c: 60: OSCILLATOR_Initialize();
 10769  1D91  25A0  319D         	fcall	_OSCILLATOR_Initialize
 10770                           
 10771                           ;comman.c: 61: PWM1_Initialize();
 10772  1D93  25EE  319D         	fcall	_PWM1_Initialize
 10773                           
 10774                           ;comman.c: 62: PWM2_Initialize();
 10775  1D95  25F8  319D         	fcall	_PWM2_Initialize
 10776                           
 10777                           ;comman.c: 63: PWM4_Initialize();
 10778  1D97  260C  319D         	fcall	_PWM4_Initialize
 10779                           
 10780                           ;comman.c: 64: PWM3_Initialize();
 10781  1D99  2601  319D         	fcall	_PWM3_Initialize
 10782                           
 10783                           ;comman.c: 65: TMR2_Initialize();
 10784  1D9B  2617  319D         	fcall	_TMR2_Initialize
 10785                           
 10786                           ;comman.c: 66: TMR0_Initialize();
 10787  1D9D  2631  319D         	fcall	_TMR0_Initialize
 10788                           
 10789                           ;comman.c: 67: EUSART_Initialize();
 10790  1D9F  2E21               	ljmp	l7197
 10791  1DA0                     __end_of_SYSTEM_Initialize:	
 10792  1DA0                     __ptext33:	
 10793 ;; *************** function _OSCILLATOR_Initialize *****************
 10794 ;; Defined at:
 10795 ;;		line 41 in file "src/comman.c"
 10796 ;; Parameters:    Size  Location     Type
 10797 ;;		None
 10798 ;; Auto vars:     Size  Location     Type
 10799 ;;		None
 10800 ;; Return value:  Size  Location     Type
 10801 ;;                  1    wreg      void 
 10802 ;; Registers used:
 10803 ;;		wreg, status,2
 10804 ;; Tracked objects:
 10805 ;;		On entry : 0/0
 10806 ;;		On exit  : 1F/12
 10807 ;;		Unchanged: 0/0
 10808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10813 ;;Total ram usage:        0 bytes
 10814 ;; Hardware stack levels used:    1
 10815 ;; Hardware stack levels required when called:    4
 10816 ;; This function calls:
 10817 ;;		Nothing
 10818 ;; This function is called by:
 10819 ;;		_SYSTEM_Initialize
 10820 ;; This function uses a non-reentrant model
 10821 ;;
 10822                           
 10823                           
 10824                           ;psect for function _OSCILLATOR_Initialize
 10825  1DA0                     _OSCILLATOR_Initialize:	
 10826                           
 10827                           ;comman.c: 44: OSCCON1 = 0x60;
 10828                           
 10829                           ;incstack = 0
 10830                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 10831  1DA0  3060               	movlw	96
 10832  1DA1  0032               	movlb	18	; select bank18
 10833  1DA2  0099               	movwf	25	;volatile
 10834                           
 10835                           ;comman.c: 46: OSCCON3 = 0x00;
 10836  1DA3  019B               	clrf	27	;volatile
 10837                           
 10838                           ;comman.c: 48: OSCEN = 0x48;
 10839  1DA4  3048               	movlw	72
 10840  1DA5  009D               	movwf	29	;volatile
 10841                           
 10842                           ;comman.c: 50: OSCFRQ = 0x06;
 10843  1DA6  3006               	movlw	6
 10844  1DA7  009F               	movwf	31	;volatile
 10845                           
 10846                           ;comman.c: 52: OSCTUNE = 0x00;
 10847  1DA8  019E               	clrf	30	;volatile
 10848  1DA9  0008               	return
 10849  1DAA                     __end_of_OSCILLATOR_Initialize:	
 10850  1DAA                     __ptext32:	
 10851 ;; *************** function _PIN_MANAGER_Initialize *****************
 10852 ;; Defined at:
 10853 ;;		line 3 in file "src/pin.c"
 10854 ;; Parameters:    Size  Location     Type
 10855 ;;		None
 10856 ;; Auto vars:     Size  Location     Type
 10857 ;;  state           1    0[BANK1 ] unsigned char 
 10858 ;; Return value:  Size  Location     Type
 10859 ;;                  1    wreg      void 
 10860 ;; Registers used:
 10861 ;;		wreg, status,2, status,0
 10862 ;; Tracked objects:
 10863 ;;		On entry : B1F/0
 10864 ;;		On exit  : 0/0
 10865 ;;		Unchanged: 0/0
 10866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10868 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 10869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10870 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 10871 ;;Total ram usage:        1 bytes
 10872 ;; Hardware stack levels used:    1
 10873 ;; Hardware stack levels required when called:    4
 10874 ;; This function calls:
 10875 ;;		Nothing
 10876 ;; This function is called by:
 10877 ;;		_SYSTEM_Initialize
 10878 ;; This function uses a non-reentrant model
 10879 ;;
 10880                           
 10881                           
 10882                           ;psect for function _PIN_MANAGER_Initialize
 10883  1DAA                     _PIN_MANAGER_Initialize:	
 10884                           
 10885                           ;pin.c: 8: LATA = 0x00;
 10886                           
 10887                           ;incstack = 0
 10888                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0]
 10889  1DAA  0022               	movlb	2	; select bank2
 10890  1DAB  018C               	clrf	12	;volatile
 10891                           
 10892                           ;pin.c: 9: LATB = 0xD0;
 10893  1DAC  30D0               	movlw	208
 10894  1DAD  008D               	movwf	13	;volatile
 10895                           
 10896                           ;pin.c: 10: LATC = 0x00;
 10897  1DAE  018E               	clrf	14	;volatile
 10898                           
 10899                           ;pin.c: 15: TRISA = 0x37;
 10900  1DAF  3037               	movlw	55
 10901  1DB0  0021               	movlb	1	; select bank1
 10902  1DB1  008C               	movwf	12	;volatile
 10903                           
 10904                           ;pin.c: 16: TRISB = 0x00;
 10905  1DB2  018D               	clrf	13	;volatile
 10906                           
 10907                           ;pin.c: 17: TRISC = 0x05;
 10908  1DB3  3005               	movlw	5
 10909  1DB4  008E               	movwf	14	;volatile
 10910                           
 10911                           ;pin.c: 22: ANSELC = 0x00;
 10912  1DB5  0023               	movlb	3	; select bank3
 10913  1DB6  018E               	clrf	14	;volatile
 10914                           
 10915                           ;pin.c: 23: ANSELB = 0x00;
 10916  1DB7  018D               	clrf	13	;volatile
 10917                           
 10918                           ;pin.c: 24: ANSELA = 0x00;
 10919  1DB8  018C               	clrf	12	;volatile
 10920                           
 10921                           ;pin.c: 29: WPUB = 0x00;
 10922  1DB9  0024               	movlb	4	; select bank4
 10923  1DBA  018D               	clrf	13	;volatile
 10924                           
 10925                           ;pin.c: 30: WPUA = 0x06;
 10926  1DBB  3006               	movlw	6
 10927  1DBC  008C               	movwf	12	;volatile
 10928                           
 10929                           ;pin.c: 31: WPUC = 0x00;
 10930  1DBD  018E               	clrf	14	;volatile
 10931                           
 10932                           ;pin.c: 36: ODCONA = 0x00;
 10933  1DBE  0025               	movlb	5	; select bank5
 10934  1DBF  018C               	clrf	12	;volatile
 10935                           
 10936                           ;pin.c: 37: ODCONB = 0x00;
 10937  1DC0  018D               	clrf	13	;volatile
 10938                           
 10939                           ;pin.c: 38: ODCONC = 0x00;
 10940  1DC1  018E               	clrf	14	;volatile
 10941                           
 10942                           ;pin.c: 40: unsigned char state = GIE;
 10943  1DC2  3000               	movlw	0
 10944  1DC3  1B8B               	btfsc	11,7	;volatile
 10945  1DC4  3001               	movlw	1
 10946  1DC5  0021               	movlb	1	; select bank1
 10947  1DC6  00A0               	movwf	PIN_MANAGER_Initialize@state^(0+128)
 10948                           
 10949                           ;pin.c: 41: GIE = 0;
 10950  1DC7  138B               	bcf	11,7	;volatile
 10951                           
 10952                           ;pin.c: 42: PPSLOCK = 0x55;
 10953                           
 10954                           ;pin.c: 43: PPSLOCK = 0xAA;
 10955  1DC8  263C  319D         	fcall	PL156	;call to abstracted procedure
 10956                           
 10957                           ;pin.c: 44: PPSLOCKbits.PPSLOCKED = 0x00;
 10958  1DCA  100F               	bcf	15,0	;volatile
 10959                           
 10960                           ;pin.c: 46: RXPPSbits.RXPPS = 0x12;
 10961  1DCB  0824               	movf	36,w	;volatile
 10962  1DCC  39E0               	andlw	-32
 10963  1DCD  3812               	iorlw	18
 10964  1DCE  00A4               	movwf	36	;volatile
 10965                           
 10966                           ;pin.c: 47: RB4PPSbits.RB4PPS = 0x14;
 10967  1DCF  003D               	movlb	29	; select bank29
 10968  1DD0  081C               	movf	28,w	;volatile
 10969  1DD1  39E0               	andlw	-32
 10970  1DD2  3814               	iorlw	20
 10971  1DD3  009C               	movwf	28	;volatile
 10972                           
 10973                           ;pin.c: 48: RC4PPSbits.RC4PPS = 0x0D;
 10974  1DD4  0824               	movf	36,w	;volatile
 10975  1DD5  39E0               	andlw	-32
 10976  1DD6  380D               	iorlw	13
 10977  1DD7  00A4               	movwf	36	;volatile
 10978                           
 10979                           ;pin.c: 49: RC3PPSbits.RC3PPS = 0x0E;
 10980  1DD8  0823               	movf	35,w	;volatile
 10981  1DD9  39E0               	andlw	-32
 10982  1DDA  380E               	iorlw	14
 10983  1DDB  00A3               	movwf	35	;volatile
 10984                           
 10985                           ;pin.c: 50: RC6PPSbits.RC6PPS = 0x0F;
 10986  1DDC  0826               	movf	38,w	;volatile
 10987  1DDD  39E0               	andlw	-32
 10988  1DDE  380F               	iorlw	15
 10989  1DDF  00A6               	movwf	38	;volatile
 10990                           
 10991                           ;pin.c: 51: RC5PPSbits.RC5PPS = 0x0C;
 10992  1DE0  0825               	movf	37,w	;volatile
 10993  1DE1  39E0               	andlw	-32
 10994  1DE2  380C               	iorlw	12
 10995  1DE3  00A5               	movwf	37	;volatile
 10996                           
 10997                           ;pin.c: 53: PPSLOCK = 0x55;
 10998                           
 10999                           ;pin.c: 54: PPSLOCK = 0xAA;
 11000  1DE4  263C  319D         	fcall	PL156	;call to abstracted procedure
 11001                           
 11002                           ;pin.c: 55: PPSLOCKbits.PPSLOCKED = 0x01;
 11003  1DE6  140F               	bsf	15,0	;volatile
 11004                           
 11005                           ;pin.c: 57: GIE = state;
 11006  1DE7  0021               	movlb	1	; select bank1
 11007  1DE8  1C20               	btfss	PIN_MANAGER_Initialize@state^(0+128),0
 11008  1DE9  2DEC               	goto	u6220
 11009  1DEA  178B               	bsf	11,7	;volatile
 11010  1DEB  0008               	return
 11011  1DEC                     u6220:	
 11012  1DEC  138B               	bcf	11,7	;volatile
 11013  1DED  0008               	return
 11014  1DEE                     __end_of_PIN_MANAGER_Initialize:	
 11015  1DEE                     __ptext31:	
 11016 ;; *************** function _PWM1_Initialize *****************
 11017 ;; Defined at:
 11018 ;;		line 4 in file "src/pwm.c"
 11019 ;; Parameters:    Size  Location     Type
 11020 ;;		None
 11021 ;; Auto vars:     Size  Location     Type
 11022 ;;		None
 11023 ;; Return value:  Size  Location     Type
 11024 ;;                  1    wreg      void 
 11025 ;; Registers used:
 11026 ;;		wreg, status,2, status,0
 11027 ;; Tracked objects:
 11028 ;;		On entry : 1F/12
 11029 ;;		On exit  : 1F/5
 11030 ;;		Unchanged: 0/0
 11031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11035 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11036 ;;Total ram usage:        0 bytes
 11037 ;; Hardware stack levels used:    1
 11038 ;; Hardware stack levels required when called:    4
 11039 ;; This function calls:
 11040 ;;		Nothing
 11041 ;; This function is called by:
 11042 ;;		_SYSTEM_Initialize
 11043 ;; This function uses a non-reentrant model
 11044 ;;
 11045                           
 11046                           
 11047                           ;psect for function _PWM1_Initialize
 11048  1DEE                     _PWM1_Initialize:	
 11049                           
 11050                           ;pwm.c: 9: CCP1CON = 0x9F;
 11051                           
 11052                           ;incstack = 0
 11053                           ; Regs used in _PWM1_Initialize: [wreg+status,2+status,0]
 11054  1DEE  309F               	movlw	159
 11055  1DEF  0025               	movlb	5	; select bank5
 11056  1DF0  0093               	movwf	19	;volatile
 11057                           
 11058                           ;pwm.c: 12: CCPR1H = 0x00;
 11059  1DF1  0192               	clrf	18	;volatile
 11060                           
 11061                           ;pwm.c: 15: CCPR1L = 0x00;
 11062  1DF2  0191               	clrf	17	;volatile
 11063                           
 11064                           ;pwm.c: 18: CCPTMRSbits.C1TSEL = 0x1;
 11065  1DF3  081F               	movf	31,w	;volatile
 11066  1DF4  39FC               	andlw	-4
 11067  1DF5  3801               	iorlw	1
 11068  1DF6  009F               	movwf	31	;volatile
 11069  1DF7  0008               	return
 11070  1DF8                     __end_of_PWM1_Initialize:	
 11071  1DF8                     __ptext30:	
 11072 ;; *************** function _PWM2_Initialize *****************
 11073 ;; Defined at:
 11074 ;;		line 39 in file "src/pwm.c"
 11075 ;; Parameters:    Size  Location     Type
 11076 ;;		None
 11077 ;; Auto vars:     Size  Location     Type
 11078 ;;		None
 11079 ;; Return value:  Size  Location     Type
 11080 ;;                  1    wreg      void 
 11081 ;; Registers used:
 11082 ;;		wreg, status,2, status,0
 11083 ;; Tracked objects:
 11084 ;;		On entry : 1F/5
 11085 ;;		On exit  : 1F/5
 11086 ;;		Unchanged: 0/0
 11087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11092 ;;Total ram usage:        0 bytes
 11093 ;; Hardware stack levels used:    1
 11094 ;; Hardware stack levels required when called:    4
 11095 ;; This function calls:
 11096 ;;		Nothing
 11097 ;; This function is called by:
 11098 ;;		_SYSTEM_Initialize
 11099 ;; This function uses a non-reentrant model
 11100 ;;
 11101                           
 11102                           
 11103                           ;psect for function _PWM2_Initialize
 11104  1DF8                     _PWM2_Initialize:	
 11105                           
 11106                           ;pwm.c: 44: CCP2CON = 0x9F;
 11107                           
 11108                           ;incstack = 0
 11109                           ; Regs used in _PWM2_Initialize: [wreg+status,2+status,0]
 11110  1DF8  309F               	movlw	159
 11111  1DF9  0097               	movwf	23	;volatile
 11112                           
 11113                           ;pwm.c: 47: CCPR2H = 0x00;
 11114  1DFA  0196               	clrf	22	;volatile
 11115                           
 11116                           ;pwm.c: 50: CCPR2L = 0x00;
 11117  1DFB  0195               	clrf	21	;volatile
 11118                           
 11119                           ;pwm.c: 53: CCPTMRSbits.C2TSEL = 0x1;
 11120  1DFC  081F               	movf	31,w	;volatile
 11121  1DFD  39F3               	andlw	-13
 11122  1DFE  3804               	iorlw	4
 11123  1DFF  009F               	movwf	31	;volatile
 11124  1E00  0008               	return
 11125  1E01                     __end_of_PWM2_Initialize:	
 11126  1E01                     __ptext29:	
 11127 ;; *************** function _PWM3_Initialize *****************
 11128 ;; Defined at:
 11129 ;;		line 74 in file "src/pwm.c"
 11130 ;; Parameters:    Size  Location     Type
 11131 ;;		None
 11132 ;; Auto vars:     Size  Location     Type
 11133 ;;		None
 11134 ;; Return value:  Size  Location     Type
 11135 ;;                  1    wreg      void 
 11136 ;; Registers used:
 11137 ;;		wreg, status,2, status,0
 11138 ;; Tracked objects:
 11139 ;;		On entry : 1F/5
 11140 ;;		On exit  : 1F/5
 11141 ;;		Unchanged: 0/0
 11142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11147 ;;Total ram usage:        0 bytes
 11148 ;; Hardware stack levels used:    1
 11149 ;; Hardware stack levels required when called:    4
 11150 ;; This function calls:
 11151 ;;		Nothing
 11152 ;; This function is called by:
 11153 ;;		_SYSTEM_Initialize
 11154 ;; This function uses a non-reentrant model
 11155 ;;
 11156                           
 11157                           
 11158                           ;psect for function _PWM3_Initialize
 11159  1E01                     _PWM3_Initialize:	
 11160                           
 11161                           ;pwm.c: 79: CCP3CON = 0x9F;
 11162                           
 11163                           ;incstack = 0
 11164                           ; Regs used in _PWM3_Initialize: [wreg+status,2+status,0]
 11165  1E01  309F               	movlw	159
 11166  1E02  0026               	movlb	6	; select bank6
 11167  1E03  0093               	movwf	19	;volatile
 11168                           
 11169                           ;pwm.c: 82: CCPR3H = 0x00;
 11170  1E04  0192               	clrf	18	;volatile
 11171                           
 11172                           ;pwm.c: 85: CCPR3L = 0x00;
 11173  1E05  0191               	clrf	17	;volatile
 11174                           
 11175                           ;pwm.c: 88: CCPTMRSbits.C3TSEL = 0x1;
 11176  1E06  0025               	movlb	5	; select bank5
 11177  1E07  081F               	movf	31,w	;volatile
 11178  1E08  39CF               	andlw	-49
 11179  1E09  3810               	iorlw	16
 11180  1E0A  009F               	movwf	31	;volatile
 11181  1E0B  0008               	return
 11182  1E0C                     __end_of_PWM3_Initialize:	
 11183  1E0C                     __ptext28:	
 11184 ;; *************** function _PWM4_Initialize *****************
 11185 ;; Defined at:
 11186 ;;		line 109 in file "src/pwm.c"
 11187 ;; Parameters:    Size  Location     Type
 11188 ;;		None
 11189 ;; Auto vars:     Size  Location     Type
 11190 ;;		None
 11191 ;; Return value:  Size  Location     Type
 11192 ;;                  1    wreg      void 
 11193 ;; Registers used:
 11194 ;;		wreg, status,2, status,0
 11195 ;; Tracked objects:
 11196 ;;		On entry : 1F/5
 11197 ;;		On exit  : 1F/5
 11198 ;;		Unchanged: 0/0
 11199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11203 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11204 ;;Total ram usage:        0 bytes
 11205 ;; Hardware stack levels used:    1
 11206 ;; Hardware stack levels required when called:    4
 11207 ;; This function calls:
 11208 ;;		Nothing
 11209 ;; This function is called by:
 11210 ;;		_SYSTEM_Initialize
 11211 ;; This function uses a non-reentrant model
 11212 ;;
 11213                           
 11214                           
 11215                           ;psect for function _PWM4_Initialize
 11216  1E0C                     _PWM4_Initialize:	
 11217                           
 11218                           ;pwm.c: 114: CCP4CON = 0x9F;
 11219                           
 11220                           ;incstack = 0
 11221                           ; Regs used in _PWM4_Initialize: [wreg+status,2+status,0]
 11222  1E0C  309F               	movlw	159
 11223  1E0D  0026               	movlb	6	; select bank6
 11224  1E0E  0097               	movwf	23	;volatile
 11225                           
 11226                           ;pwm.c: 117: CCPR4H = 0x00;
 11227  1E0F  0196               	clrf	22	;volatile
 11228                           
 11229                           ;pwm.c: 120: CCPR4L = 0x00;
 11230  1E10  0195               	clrf	21	;volatile
 11231                           
 11232                           ;pwm.c: 123: CCPTMRSbits.C4TSEL = 0x1;
 11233  1E11  0025               	movlb	5	; select bank5
 11234  1E12  081F               	movf	31,w	;volatile
 11235  1E13  393F               	andlw	-193
 11236  1E14  3840               	iorlw	64
 11237  1E15  009F               	movwf	31	;volatile
 11238  1E16  0008               	return
 11239  1E17                     __end_of_PWM4_Initialize:	
 11240  1E17                     __ptext26:	
 11241 ;; *************** function _TMR2_Initialize *****************
 11242 ;; Defined at:
 11243 ;;		line 37 in file "src/tmr.c"
 11244 ;; Parameters:    Size  Location     Type
 11245 ;;		None
 11246 ;; Auto vars:     Size  Location     Type
 11247 ;;		None
 11248 ;; Return value:  Size  Location     Type
 11249 ;;                  1    wreg      void 
 11250 ;; Registers used:
 11251 ;;		wreg, status,2
 11252 ;; Tracked objects:
 11253 ;;		On entry : 1F/5
 11254 ;;		On exit  : 1F/1
 11255 ;;		Unchanged: 0/0
 11256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11261 ;;Total ram usage:        0 bytes
 11262 ;; Hardware stack levels used:    1
 11263 ;; Hardware stack levels required when called:    4
 11264 ;; This function calls:
 11265 ;;		Nothing
 11266 ;; This function is called by:
 11267 ;;		_SYSTEM_Initialize
 11268 ;; This function uses a non-reentrant model
 11269 ;;
 11270                           
 11271                           
 11272                           ;psect for function _TMR2_Initialize
 11273  1E17                     _TMR2_Initialize:	
 11274                           
 11275                           ;tmr.c: 42: T2CON = 0x78;
 11276                           
 11277                           ;incstack = 0
 11278                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 11279  1E17  3078               	movlw	120
 11280  1E18  0020               	movlb	0	; select bank0
 11281  1E19  009F               	movwf	31	;volatile
 11282                           
 11283                           ;tmr.c: 45: PR2 = 0xF9;
 11284  1E1A  30F9               	movlw	249
 11285  1E1B  009E               	movwf	30	;volatile
 11286                           
 11287                           ;tmr.c: 48: TMR2 = 0x00;
 11288  1E1C  019D               	clrf	29	;volatile
 11289                           
 11290                           ;tmr.c: 51: PIR1bits.TMR2IF = 0;
 11291  1E1D  1091               	bcf	17,1	;volatile
 11292                           
 11293                           ;tmr.c: 54: PIE1bits.TMR2IE = 1;
 11294  1E1E  0021               	movlb	1	; select bank1
 11295  1E1F  1491               	bsf	17,1	;volatile
 11296  1E20  0008               	return
 11297  1E21                     __end_of_TMR2_Initialize:	
 11298  1E21                     __ptext34:	
 11299 ;; *************** function _EUSART_Initialize *****************
 11300 ;; Defined at:
 11301 ;;		line 8 in file "src/eusart.c"
 11302 ;; Parameters:    Size  Location     Type
 11303 ;;		None
 11304 ;; Auto vars:     Size  Location     Type
 11305 ;;		None
 11306 ;; Return value:  Size  Location     Type
 11307 ;;                  1    wreg      void 
 11308 ;; Registers used:
 11309 ;;		wreg
 11310 ;; Tracked objects:
 11311 ;;		On entry : 1F/1
 11312 ;;		On exit  : 1F/1
 11313 ;;		Unchanged: 0/0
 11314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11318 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11319 ;;Total ram usage:        0 bytes
 11320 ;; Hardware stack levels used:    1
 11321 ;; Hardware stack levels required when called:    4
 11322 ;; This function calls:
 11323 ;;		Nothing
 11324 ;; This function is called by:
 11325 ;;		_SYSTEM_Initialize
 11326 ;; This function uses a non-reentrant model
 11327 ;;
 11328                           
 11329                           
 11330                           ;psect for function _EUSART_Initialize
 11331  1E21                     _EUSART_Initialize:	
 11332  1E21                     l7197:	
 11333                           ;incstack = 0
 11334                           ; Regs used in _EUSART_Initialize: [wreg]
 11335                           
 11336                           
 11337                           ;eusart.c: 11: PIE1bits.RCIE = 0;
 11338  1E21  1291               	bcf	17,5	;volatile
 11339                           
 11340                           ;eusart.c: 12: PIE1bits.TXIE = 0;
 11341  1E22  1211               	bcf	17,4	;volatile
 11342                           
 11343                           ;eusart.c: 17: BAUD1CON = 0x08;
 11344  1E23  3008               	movlw	8
 11345  1E24  0023               	movlb	3	; select bank3
 11346  1E25  009F               	movwf	31	;volatile
 11347                           
 11348                           ;eusart.c: 20: RC1STA = 0x90;
 11349  1E26  3090               	movlw	144
 11350  1E27  009D               	movwf	29	;volatile
 11351                           
 11352                           ;eusart.c: 23: TX1STA = 0x24;
 11353  1E28  3024               	movlw	36
 11354  1E29  009E               	movwf	30	;volatile
 11355                           
 11356                           ;eusart.c: 26: SP1BRGL = 0xA0;
 11357  1E2A  30A0               	movlw	160
 11358  1E2B  009B               	movwf	27	;volatile
 11359                           
 11360                           ;eusart.c: 29: SP1BRGH = 0x01;
 11361  1E2C  3001               	movlw	1
 11362  1E2D  009C               	movwf	28	;volatile
 11363                           
 11364                           ;eusart.c: 32: PIE1bits.RCIE = 1;
 11365  1E2E  0021               	movlb	1	; select bank1
 11366  1E2F  1691               	bsf	17,5	;volatile
 11367  1E30  0008               	return
 11368  1E31                     __end_of_EUSART_Initialize:	
 11369  1E31                     __ptext27:	
 11370 ;; *************** function _TMR0_Initialize *****************
 11371 ;; Defined at:
 11372 ;;		line 7 in file "src/tmr.c"
 11373 ;; Parameters:    Size  Location     Type
 11374 ;;		None
 11375 ;; Auto vars:     Size  Location     Type
 11376 ;;		None
 11377 ;; Return value:  Size  Location     Type
 11378 ;;                  1    wreg      void 
 11379 ;; Registers used:
 11380 ;;		wreg, status,2
 11381 ;; Tracked objects:
 11382 ;;		On entry : 1F/1
 11383 ;;		On exit  : 1F/1
 11384 ;;		Unchanged: 0/0
 11385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11390 ;;Total ram usage:        0 bytes
 11391 ;; Hardware stack levels used:    1
 11392 ;; Hardware stack levels required when called:    4
 11393 ;; This function calls:
 11394 ;;		Nothing
 11395 ;; This function is called by:
 11396 ;;		_SYSTEM_Initialize
 11397 ;; This function uses a non-reentrant model
 11398 ;;
 11399                           
 11400                           
 11401                           ;psect for function _TMR0_Initialize
 11402  1E31                     _TMR0_Initialize:	
 11403                           
 11404                           ;tmr.c: 12: T0CON0 = 0x00;
 11405                           
 11406                           ;incstack = 0
 11407                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
 11408  1E31  0020               	movlb	0	; select bank0
 11409  1E32  0197               	clrf	23	;volatile
 11410                           
 11411                           ;tmr.c: 15: T0CON1 = 0xD7;
 11412  1E33  30D7               	movlw	215
 11413  1E34  0098               	movwf	24	;volatile
 11414                           
 11415                           ;tmr.c: 18: TMR0H = 0xFF;
 11416  1E35  30FF               	movlw	255
 11417  1E36  0096               	movwf	22	;volatile
 11418                           
 11419                           ;tmr.c: 21: TMR0L = 0x00;
 11420  1E37  0195               	clrf	21	;volatile
 11421                           
 11422                           ;tmr.c: 24: PIR0bits.TMR0IF = 0;
 11423  1E38  1290               	bcf	16,5	;volatile
 11424                           
 11425                           ;tmr.c: 27: PIE0bits.TMR0IE = 1;
 11426  1E39  0021               	movlb	1	; select bank1
 11427  1E3A  1690               	bsf	16,5	;volatile
 11428  1E3B  0008               	return
 11429  1E3C                     __end_of_TMR0_Initialize:	
 11430  1E3C                     PL156:	
 11431  1E3C  3055               	movlw	85
 11432  1E3D  003C               	movlb	28	; select bank28
 11433  1E3E  008F               	movwf	15	;volatile
 11434  1E3F  30AA               	movlw	170
 11435  1E40  008F               	movwf	15	;volatile
 11436  1E41  0008               	return
 11437  1E42                     __end_ofPL156:	
 11438                           
 11439                           	psect	swtext1
 11440  0800                     __pswtext1:	
 11441  0800                     S8573:	
 11442  0800  318F  2F08         	ljmp	l8197
 11443  0802  318F  2F46         	ljmp	l286
 11444  0804  318C  2CAC         	ljmp	l288
 11445  0806  318C  2CDE         	ljmp	l299
 11446  0808  318D  2D12         	ljmp	l308
 11447  080A  318D  2D4F         	ljmp	l8027
 11448  080C  318D  2D64         	ljmp	l8031
 11449  080E  318D  2D98         	ljmp	l320
 11450  0810  318D  2DB6         	ljmp	l325
 11451  0812  318E  2E04         	ljmp	l329
 11452  0814  318E  2E44         	ljmp	l8113
 11453  0816  318E  2E77         	ljmp	l340
 11454  0818  318E  2EB2         	ljmp	l8171
 11455  081A  318E  2EC3         	ljmp	l8177
 11456  081C  318E  2ED0         	ljmp	l8181
 11457  081E  318E  2EF8         	ljmp	l8191
 11458                           
 11459                           	psect	swtext2
 11460  1096                     __pswtext2:	
 11461  1096                     S8575:	
 11462  1096  3189  2944         	ljmp	l7405
 11463  1098  3189  2951         	ljmp	l7417
 11464  109A  3189  2967         	ljmp	l7437
 11465  109C  3189  297F         	ljmp	l7465
 11466  109E  3189  298B         	ljmp	l7481
 11467  10A0  3189  29A0         	ljmp	l7505
 11468  10A2  3189  29BD         	ljmp	l7529
 11469  10A4  3189  29D5         	ljmp	l7553
 11470  10A6  3189  29F8         	ljmp	l7573
 11471  10A8  318A  2A0A         	ljmp	l7589
 11472  10AA  318A  2A1D         	ljmp	l7605
 11473  10AC  318A  2A33         	ljmp	l514
 11474                           
 11475                           	psect	text48
 11476  1E42                     __ptext48:	
 11477 ;; *************** function _bleSendDeviceTime *****************
 11478 ;; Defined at:
 11479 ;;		line 153 in file "src/ble.c"
 11480 ;; Parameters:    Size  Location     Type
 11481 ;;		None
 11482 ;; Auto vars:     Size  Location     Type
 11483 ;;  i               1    8[BANK1 ] unsigned char 
 11484 ;;  len             1    7[BANK1 ] unsigned char 
 11485 ;; Return value:  Size  Location     Type
 11486 ;;                  1    wreg      void 
 11487 ;; Registers used:
 11488 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11489 ;; Tracked objects:
 11490 ;;		On entry : 1F/1
 11491 ;;		On exit  : 1F/2
 11492 ;;		Unchanged: 0/0
 11493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11495 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 11496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11497 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 11498 ;;Total ram usage:        2 bytes
 11499 ;; Hardware stack levels used:    1
 11500 ;; Hardware stack levels required when called:    6
 11501 ;; This function calls:
 11502 ;;		_bleSendData
 11503 ;;		_getCRC
 11504 ;; This function is called by:
 11505 ;;		_DecodeDATA
 11506 ;; This function uses a non-reentrant model
 11507 ;;
 11508                           
 11509                           
 11510                           ;psect for function _bleSendDeviceTime
 11511  1E42                     _bleSendDeviceTime:	
 11512  1E42                     l7377:	
 11513                           ;incstack = 0
 11514                           ; Regs used in _bleSendDeviceTime: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11515                           
 11516                           
 11517                           ;ble.c: 155: unsigned char len = sizeof (gCurrentTime.array );
 11518  1E42  3007               	movlw	7
 11519  1E43  00A7               	movwf	bleSendDeviceTime@len^(0+128)
 11520                           
 11521                           ;ble.c: 156: txBuf[0] = 0x68;
 11522  1E44  3068               	movlw	104
 11523  1E45  0026               	movlb	6	; select bank6
 11524  1E46  00A0               	movwf	_txBuf^(0+768)
 11525                           
 11526                           ;ble.c: 157: txBuf[1] = 0x0D;
 11527  1E47  300D               	movlw	13
 11528  1E48  00A1               	movwf	(_txBuf^(0+768)+1)
 11529                           
 11530                           ;ble.c: 158: for ( unsigned char i = 0; i < len; i++ )
 11531  1E49  0021               	movlb	1	; select bank1
 11532  1E4A  01A8               	clrf	bleSendDeviceTime@i^(0+128)
 11533  1E4B                     l7385:	
 11534  1E4B  0827               	movf	bleSendDeviceTime@len^(0+128),w
 11535  1E4C  0228               	subwf	bleSendDeviceTime@i^(0+128),w
 11536  1E4D  1803               	btfsc	3,0
 11537  1E4E  2E5C               	goto	l7387
 11538                           
 11539                           ;ble.c: 159: {
 11540                           ;ble.c: 160: txBuf[2 + i] = gCurrentTime.array[i];
 11541  1E4F  0828               	movf	bleSendDeviceTime@i^(0+128),w
 11542  1E50  3E22               	addlw	(low ((_txBuf| (0+768)+2)))& (0+255)
 11543  1E51  0086               	movwf	6
 11544  1E52  3003               	movlw	3	; select bank6/7
 11545  1E53  0087               	movwf	7
 11546  1E54  0828               	movf	bleSendDeviceTime@i^(0+128),w
 11547  1E55  3E40               	addlw	(low (_gCurrentTime| 0))& (0+255)
 11548  1E56  0084               	movwf	4
 11549  1E57  0185               	clrf	5
 11550  1E58  0800               	movf	0,w
 11551  1E59  0081               	movwf	1
 11552  1E5A  0AA8               	incf	bleSendDeviceTime@i^(0+128),f
 11553  1E5B  2E4B               	goto	l7385
 11554  1E5C                     l7387:	
 11555                           
 11556                           ;ble.c: 161: }
 11557                           ;ble.c: 162: txBuf[9] = getCRC(txBuf, len + 2);
 11558  1E5C  3020               	movlw	low _txBuf
 11559  1E5D  00A0               	movwf	getCRC@pbuf^(0+128)
 11560  1E5E  3003               	movlw	high _txBuf
 11561  1E5F  00A1               	movwf	(getCRC@pbuf+1)^(0+128)
 11562  1E60  0827               	movf	bleSendDeviceTime@len^(0+128),w
 11563  1E61  3E02               	addlw	2
 11564  1E62  00A2               	movwf	getCRC@len^(0+128)
 11565  1E63  318F  2747  319E   	fcall	_getCRC
 11566  1E66  0026               	movlb	6	; select bank6
 11567  1E67  00A9               	movwf	(_txBuf^(0+768)+9)
 11568                           
 11569                           ;ble.c: 163: bleSendData(txBuf, len + 3);
 11570  1E68  3020               	movlw	low _txBuf
 11571  1E69  0021               	movlb	1	; select bank1
 11572  1E6A  00A1               	movwf	bleSendData@frame^(0+128)
 11573  1E6B  3003               	movlw	high _txBuf
 11574  1E6C  00A2               	movwf	(bleSendData@frame+1)^(0+128)
 11575  1E6D  0827               	movf	bleSendDeviceTime@len^(0+128),w
 11576  1E6E  3E03               	addlw	3
 11577  1E6F  00A3               	movwf	bleSendData@len^(0+128)
 11578  1E70  2EBF               	ljmp	l7065
 11579  1E71                     __end_of_bleSendDeviceTime:	
 11580  1E71                     __ptext49:	
 11581 ;; *************** function _bleSendDeviceData *****************
 11582 ;; Defined at:
 11583 ;;		line 126 in file "src/ble.c"
 11584 ;; Parameters:    Size  Location     Type
 11585 ;;		None
 11586 ;; Auto vars:     Size  Location     Type
 11587 ;;  i               1    9[BANK1 ] unsigned char 
 11588 ;;  len             1    8[BANK1 ] unsigned char 
 11589 ;; Return value:  Size  Location     Type
 11590 ;;                  1    wreg      void 
 11591 ;; Registers used:
 11592 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11593 ;; Tracked objects:
 11594 ;;		On entry : 1C/0
 11595 ;;		On exit  : 1F/2
 11596 ;;		Unchanged: 0/0
 11597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11599 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 11600 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 11601 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 11602 ;;Total ram usage:        3 bytes
 11603 ;; Hardware stack levels used:    1
 11604 ;; Hardware stack levels required when called:    6
 11605 ;; This function calls:
 11606 ;;		_bleSendData
 11607 ;;		_getCRC
 11608 ;; This function is called by:
 11609 ;;		_DecodeDATA
 11610 ;; This function uses a non-reentrant model
 11611 ;;
 11612                           
 11613                           
 11614                           ;psect for function _bleSendDeviceData
 11615  1E71                     _bleSendDeviceData:	
 11616  1E71                     l7349:	
 11617                           ;incstack = 0
 11618                           ; Regs used in _bleSendDeviceData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11619                           
 11620                           
 11621                           ;ble.c: 128: unsigned char i;
 11622                           ;ble.c: 129: unsigned char len;
 11623                           ;ble.c: 130: txBuf[0] = 0x68;
 11624  1E71  3068               	movlw	104
 11625  1E72  0026               	movlb	6	; select bank6
 11626  1E73  00A0               	movwf	_txBuf^(0+768)
 11627                           
 11628                           ;ble.c: 131: txBuf[1] = 0x05;
 11629  1E74  3005               	movlw	5
 11630  1E75  00A1               	movwf	(_txBuf^(0+768)+1)
 11631                           
 11632                           ;ble.c: 132: txBuf[2] = gLedPara.fAuto;
 11633  1E76  3000               	movlw	0
 11634  1E77  0024               	movlb	4	; select bank4
 11635  1E78  1820               	btfsc	_gLedPara^(0+512),0	;volatile
 11636  1E79  3001               	movlw	1
 11637  1E7A  0026               	movlb	6	; select bank6
 11638  1E7B  00A2               	movwf	(_txBuf^(0+768)+2)
 11639                           
 11640                           ;ble.c: 133: if ( gLedPara.fAuto )
 11641  1E7C  0024               	movlb	4	; select bank4
 11642  1E7D  1C20               	btfss	_gLedPara^(0+512),0	;volatile
 11643  1E7E  2E92               	goto	l7365
 11644                           
 11645                           ;ble.c: 134: {
 11646                           ;ble.c: 135: len = sizeof (gLedPara.aPara.array );
 11647  1E7F  3016               	movlw	22
 11648  1E80  0021               	movlb	1	; select bank1
 11649  1E81  00A8               	movwf	bleSendDeviceData@len^(0+128)
 11650                           
 11651                           ;ble.c: 136: for ( i = 0; i < len; i++ )
 11652  1E82  01A9               	clrf	bleSendDeviceData@i^(0+128)
 11653  1E83                     l7363:	
 11654  1E83  0828               	movf	bleSendDeviceData@len^(0+128),w
 11655  1E84  0229               	subwf	bleSendDeviceData@i^(0+128),w
 11656  1E85  1803               	btfsc	3,0
 11657  1E86  2EA5               	goto	l7375
 11658                           
 11659                           ;ble.c: 137: {
 11660                           ;ble.c: 138: txBuf[3 + i] = gLedPara.aPara.array[i];
 11661  1E87  0829               	movf	bleSendDeviceData@i^(0+128),w
 11662  1E88  3E23               	addlw	(low ((_txBuf| (0+768)+3)))& (0+255)
 11663  1E89  0086               	movwf	6
 11664  1E8A  3003               	movlw	3	; select bank6/7
 11665  1E8B  0087               	movwf	7
 11666  1E8C  0829               	movf	bleSendDeviceData@i^(0+128),w
 11667  1E8D  3E3B               	addlw	(low ((_gLedPara| (0+512)+27)))& (0+255)
 11668  1E8E  27D4  319E         	fcall	PL124	;call to abstracted procedure
 11669  1E90  0AA9               	incf	bleSendDeviceData@i^(0+128),f
 11670  1E91  2E83               	goto	l7363
 11671  1E92                     l7365:	
 11672                           
 11673                           ;ble.c: 141: else
 11674                           ;ble.c: 142: {
 11675                           ;ble.c: 143: len = sizeof (gLedPara.mPara.array );
 11676  1E92  301A               	movlw	26
 11677  1E93  0021               	movlb	1	; select bank1
 11678  1E94  00A8               	movwf	bleSendDeviceData@len^(0+128)
 11679                           
 11680                           ;ble.c: 144: for ( i = 0; i < len; i++ )
 11681  1E95  01A9               	clrf	bleSendDeviceData@i^(0+128)
 11682  1E96                     l7373:	
 11683  1E96  0828               	movf	bleSendDeviceData@len^(0+128),w
 11684  1E97  0229               	subwf	bleSendDeviceData@i^(0+128),w
 11685  1E98  1803               	btfsc	3,0
 11686  1E99  2EA5               	goto	l7375
 11687                           
 11688                           ;ble.c: 145: {
 11689                           ;ble.c: 146: txBuf[3 + i] = gLedPara.mPara.array[i];
 11690  1E9A  0829               	movf	bleSendDeviceData@i^(0+128),w
 11691  1E9B  3E23               	addlw	(low ((_txBuf| (0+768)+3)))& (0+255)
 11692  1E9C  0086               	movwf	6
 11693  1E9D  3003               	movlw	3	; select bank6/7
 11694  1E9E  0087               	movwf	7
 11695  1E9F  0829               	movf	bleSendDeviceData@i^(0+128),w
 11696  1EA0  3E21               	addlw	(low ((_gLedPara| (0+512)+1)))& (0+255)
 11697  1EA1  27D4  319E         	fcall	PL124	;call to abstracted procedure
 11698  1EA3  0AA9               	incf	bleSendDeviceData@i^(0+128),f
 11699  1EA4  2E96               	goto	l7373
 11700  1EA5                     l7375:	
 11701                           
 11702                           ;ble.c: 147: }
 11703                           ;ble.c: 148: }
 11704                           ;ble.c: 149: txBuf[len + 3] = getCRC(txBuf, len + 3);
 11705  1EA5  3020               	movlw	low _txBuf
 11706  1EA6  00A0               	movwf	getCRC@pbuf^(0+128)
 11707  1EA7  3003               	movlw	high _txBuf
 11708  1EA8  00A1               	movwf	(getCRC@pbuf+1)^(0+128)
 11709  1EA9  0828               	movf	bleSendDeviceData@len^(0+128),w
 11710  1EAA  3E03               	addlw	3
 11711  1EAB  00A2               	movwf	getCRC@len^(0+128)
 11712  1EAC  318F  2747  319E   	fcall	_getCRC
 11713  1EAF  00A7               	movwf	??_bleSendDeviceData^(0+128)
 11714  1EB0  0828               	movf	bleSendDeviceData@len^(0+128),w
 11715  1EB1  3E23               	addlw	(low ((_txBuf| (0+768)+3)))& (0+255)
 11716  1EB2  0086               	movwf	6
 11717  1EB3  3003               	movlw	3	; select bank6/7
 11718  1EB4  0087               	movwf	7
 11719  1EB5  0827               	movf	??_bleSendDeviceData^(0+128),w
 11720  1EB6  0081               	movwf	1
 11721                           
 11722                           ;ble.c: 150: bleSendData(txBuf, len + 4);
 11723  1EB7  3020               	movlw	low _txBuf
 11724  1EB8  00A1               	movwf	bleSendData@frame^(0+128)
 11725  1EB9  3003               	movlw	high _txBuf
 11726  1EBA  00A2               	movwf	(bleSendData@frame+1)^(0+128)
 11727  1EBB  0828               	movf	bleSendDeviceData@len^(0+128),w
 11728  1EBC  3E04               	addlw	4
 11729  1EBD  00A3               	movwf	bleSendData@len^(0+128)
 11730  1EBE  2EBF               	ljmp	l7065
 11731  1EBF                     __end_of_bleSendDeviceData:	
 11732  1EBF                     __ptext51:	
 11733 ;; *************** function _bleSendData *****************
 11734 ;; Defined at:
 11735 ;;		line 113 in file "src/ble.c"
 11736 ;; Parameters:    Size  Location     Type
 11737 ;;  frame           2    1[BANK1 ] PTR const unsigned char 
 11738 ;;		 -> txBuf(48), rxBuf(48), 
 11739 ;;  len             1    3[BANK1 ] unsigned char 
 11740 ;; Auto vars:     Size  Location     Type
 11741 ;;		None
 11742 ;; Return value:  Size  Location     Type
 11743 ;;                  1    wreg      void 
 11744 ;; Registers used:
 11745 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11746 ;; Tracked objects:
 11747 ;;		On entry : 1F/1
 11748 ;;		On exit  : 1F/2
 11749 ;;		Unchanged: 0/0
 11750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11751 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 11752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11753 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 11754 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 11755 ;;Total ram usage:        4 bytes
 11756 ;; Hardware stack levels used:    1
 11757 ;; Hardware stack levels required when called:    5
 11758 ;; This function calls:
 11759 ;;		_eusartSendByte
 11760 ;; This function is called by:
 11761 ;;		_bleSendDeviceData
 11762 ;;		_bleSendDeviceTime
 11763 ;;		_DecodeDATA
 11764 ;; This function uses a non-reentrant model
 11765 ;;
 11766                           
 11767                           
 11768                           ;psect for function _bleSendData
 11769  1EBF                     _bleSendData:	
 11770  1EBF                     l7065:	
 11771                           ;incstack = 0
 11772                           ; Regs used in _bleSendData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11773                           
 11774                           
 11775                           ;ble.c: 115: LATC1 = 0;
 11776  1EBF  0022               	movlb	2	; select bank2
 11777  1EC0  108E               	bcf	14,1	;volatile
 11778                           
 11779                           ;ble.c: 116: _delay((unsigned long)((800)*(16000000/4000000.0)));
 11780  1EC1  3005               	movlw	5
 11781  1EC2  0021               	movlb	1	; select bank1
 11782  1EC3  00A4               	movwf	??_bleSendData^(0+128)
 11783  1EC4  3026               	movlw	38
 11784  1EC5                     u7927:	
 11785  1EC5  0B89               	decfsz	9,f
 11786  1EC6  2EC5               	goto	u7927
 11787  1EC7  0BA4               	decfsz	??_bleSendData^(0+128),f
 11788  1EC8  2EC5               	goto	u7927
 11789  1EC9  0000               	nop
 11790  1ECA                     l7073:	
 11791                           ;ble.c: 117: while ( len-- )
 11792                           
 11793  1ECA  0021               	movlb	1	; select bank1
 11794  1ECB  03A3               	decf	bleSendData@len^(0+128),f
 11795  1ECC  0A23               	incf	bleSendData@len^(0+128),w
 11796  1ECD  1903               	btfsc	3,2
 11797  1ECE  2EDB               	goto	l260
 11798                           
 11799                           ;ble.c: 118: {
 11800                           ;ble.c: 119: eusartSendByte(*frame++);
 11801  1ECF  0821               	movf	bleSendData@frame^(0+128),w
 11802  1ED0  0086               	movwf	6
 11803  1ED1  0822               	movf	(bleSendData@frame+1)^(0+128),w
 11804  1ED2  0087               	movwf	7
 11805  1ED3  0801               	movf	1,w
 11806  1ED4  278E  319E         	fcall	_eusartSendByte
 11807  1ED6  0021               	movlb	1	; select bank1
 11808  1ED7  0AA1               	incf	bleSendData@frame^(0+128),f
 11809  1ED8  1903               	skipnz
 11810  1ED9  0AA2               	incf	(bleSendData@frame+1)^(0+128),f
 11811  1EDA  2ECA               	goto	l7073
 11812  1EDB                     l260:	
 11813  1EDB  0023               	movlb	3	; select bank3
 11814  1EDC  1C9E               	btfss	30,1	;volatile
 11815  1EDD  2EDB               	goto	l260
 11816                           
 11817                           ;ble.c: 123: LATC1 = 1;
 11818  1EDE  0022               	movlb	2	; select bank2
 11819  1EDF  148E               	bsf	14,1	;volatile
 11820  1EE0  0008               	return
 11821  1EE1                     __end_of_bleSendData:	
 11822  1EE1                     __ptext13:	
 11823 ;; *************** function _initBLE *****************
 11824 ;; Defined at:
 11825 ;;		line 467 in file "src/ble.c"
 11826 ;; Parameters:    Size  Location     Type
 11827 ;;		None
 11828 ;; Auto vars:     Size  Location     Type
 11829 ;;		None
 11830 ;; Return value:  Size  Location     Type
 11831 ;;                  1    wreg      void 
 11832 ;; Registers used:
 11833 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11834 ;; Tracked objects:
 11835 ;;		On entry : 1F/1
 11836 ;;		On exit  : 1F/2
 11837 ;;		Unchanged: 0/0
 11838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11841 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 11842 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 11843 ;;Total ram usage:        2 bytes
 11844 ;; Hardware stack levels used:    1
 11845 ;; Hardware stack levels required when called:    7
 11846 ;; This function calls:
 11847 ;;		_BLE_SendCMD
 11848 ;;		_checkDevID
 11849 ;; This function is called by:
 11850 ;;		_main
 11851 ;; This function uses a non-reentrant model
 11852 ;;
 11853                           
 11854                           
 11855                           ;psect for function _initBLE
 11856  1EE1                     _initBLE:	
 11857                           
 11858                           ;ble.c: 469: LATC1 = 0;
 11859                           
 11860                           ;incstack = 0
 11861                           ; Regs used in _initBLE: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11862  1EE1  0022               	movlb	2	; select bank2
 11863  1EE2  108E               	bcf	14,1	;volatile
 11864                           
 11865                           ;ble.c: 470: LATB5 = 0;
 11866  1EE3  128D               	bcf	13,5	;volatile
 11867                           
 11868                           ;ble.c: 471: _delay((unsigned long)((20)*(16000000/4000.0)));
 11869  1EE4  3068               	movlw	104
 11870  1EE5  0021               	movlb	1	; select bank1
 11871  1EE6  00C5               	movwf	??_initBLE^(0+128)
 11872  1EE7  30E4               	movlw	228
 11873  1EE8                     u7837:	
 11874  1EE8  0B89               	decfsz	9,f
 11875  1EE9  2EE8               	goto	u7837
 11876  1EEA  0BC5               	decfsz	??_initBLE^(0+128),f
 11877  1EEB  2EE8               	goto	u7837
 11878  1EEC  0000               	nop
 11879                           
 11880                           ;ble.c: 472: LATB5 = 1;
 11881  1EED  0022               	movlb	2	; select bank2
 11882  1EEE  168D               	bsf	13,5	;volatile
 11883                           
 11884                           ;ble.c: 473: _delay((unsigned long)((240)*(16000000/4000.0)));
 11885  1EEF  3005               	movlw	5
 11886  1EF0  0021               	movlb	1	; select bank1
 11887  1EF1  00C6               	movwf	(??_initBLE^(0+128)+1)
 11888  1EF2  30DF               	movlw	223
 11889  1EF3  00C5               	movwf	??_initBLE^(0+128)
 11890  1EF4  30BB               	movlw	187
 11891  1EF5                     u7847:	
 11892  1EF5  0B89               	decfsz	9,f
 11893  1EF6  2EF5               	goto	u7847
 11894  1EF7  0BC5               	decfsz	??_initBLE^(0+128),f
 11895  1EF8  2EF5               	goto	u7847
 11896  1EF9  0BC6               	decfsz	(??_initBLE^(0+128)+1),f
 11897  1EFA  2EF5               	goto	u7847
 11898  1EFB  3200               	nop2
 11899                           
 11900                           ;ble.c: 478: if ( checkDevID() == 0 )
 11901  1EFC  2797  319E         	fcall	_checkDevID
 11902  1EFE  3A00               	xorlw	0
 11903  1EFF  1D03               	skipz
 11904  1F00  2F11               	goto	l7797
 11905                           
 11906                           ;ble.c: 479: {
 11907                           ;ble.c: 480: _delay((unsigned long)((40)*(16000000/4000.0)));
 11908  1F01  30D0               	movlw	208
 11909  1F02  0021               	movlb	1	; select bank1
 11910  1F03  00C5               	movwf	??_initBLE^(0+128)
 11911  1F04  30C9               	movlw	201
 11912  1F05                     u7857:	
 11913  1F05  0B89               	decfsz	9,f
 11914  1F06  2F05               	goto	u7857
 11915  1F07  0BC5               	decfsz	??_initBLE^(0+128),f
 11916  1F08  2F05               	goto	u7857
 11917  1F09  3200               	nop2
 11918                           
 11919                           ;ble.c: 481: BLE_SendCMD("AT+ADV_MFR_SPC=3031343930313032\r\n");
 11920  1F0A  3000               	movlw	low (STR_2| (0+32768))
 11921  1F0B  0021               	movlb	1	; select bank1
 11922  1F0C  00A1               	movwf	BLE_SendCMD@pBuf^(0+128)
 11923  1F0D  3098               	movlw	high (STR_2| (0+32768))
 11924  1F0E  00A2               	movwf	(BLE_SendCMD@pBuf^(0+128)+1)
 11925  1F0F  273D  319E         	fcall	_BLE_SendCMD
 11926  1F11                     l7797:	
 11927                           
 11928                           ;ble.c: 482: }
 11929                           ;ble.c: 483: _delay((unsigned long)((40)*(16000000/4000.0)));
 11930  1F11  30D0               	movlw	208
 11931  1F12  0021               	movlb	1	; select bank1
 11932  1F13  00C5               	movwf	??_initBLE^(0+128)
 11933  1F14  30C9               	movlw	201
 11934  1F15                     u7867:	
 11935  1F15  0B89               	decfsz	9,f
 11936  1F16  2F15               	goto	u7867
 11937  1F17  0BC5               	decfsz	??_initBLE^(0+128),f
 11938  1F18  2F15               	goto	u7867
 11939  1F19  3200               	nop2
 11940                           
 11941                           ;ble.c: 485: BLE_SendCMD("AT+SET=1\r\n");
 11942  1F1A  3044               	movlw	low (STR_3| (0+32768))
 11943  1F1B  0021               	movlb	1	; select bank1
 11944  1F1C  00A1               	movwf	BLE_SendCMD@pBuf^(0+128)
 11945  1F1D  3098               	movlw	high (STR_3| (0+32768))
 11946  1F1E  00A2               	movwf	(BLE_SendCMD@pBuf^(0+128)+1)
 11947  1F1F  273D  319E         	fcall	_BLE_SendCMD
 11948                           
 11949                           ;ble.c: 486: _delay((unsigned long)((40)*(16000000/4000.0)));
 11950  1F21  30D0               	movlw	208
 11951  1F22  0021               	movlb	1	; select bank1
 11952  1F23  00C5               	movwf	??_initBLE^(0+128)
 11953  1F24  30C9               	movlw	201
 11954  1F25                     u7877:	
 11955  1F25  0B89               	decfsz	9,f
 11956  1F26  2F25               	goto	u7877
 11957  1F27  0BC5               	decfsz	??_initBLE^(0+128),f
 11958  1F28  2F25               	goto	u7877
 11959  1F29  3200               	nop2
 11960                           
 11961                           ;ble.c: 488: BLE_SendCMD("AT+MODE=DATA\r\n");
 11962  1F2A  3035               	movlw	low (STR_4| (0+32768))
 11963  1F2B  0021               	movlb	1	; select bank1
 11964  1F2C  00A1               	movwf	BLE_SendCMD@pBuf^(0+128)
 11965  1F2D  3098               	movlw	high (STR_4| (0+32768))
 11966  1F2E  00A2               	movwf	(BLE_SendCMD@pBuf^(0+128)+1)
 11967  1F2F  273D  319E         	fcall	_BLE_SendCMD
 11968                           
 11969                           ;ble.c: 489: _delay((unsigned long)((20)*(16000000/4000.0)));
 11970  1F31  3068               	movlw	104
 11971  1F32  0021               	movlb	1	; select bank1
 11972  1F33  00C5               	movwf	??_initBLE^(0+128)
 11973  1F34  30E4               	movlw	228
 11974  1F35                     u7887:	
 11975  1F35  0B89               	decfsz	9,f
 11976  1F36  2F35               	goto	u7887
 11977  1F37  0BC5               	decfsz	??_initBLE^(0+128),f
 11978  1F38  2F35               	goto	u7887
 11979  1F39  0000               	nop
 11980                           
 11981                           ;ble.c: 490: LATC1 = 1;
 11982  1F3A  0022               	movlb	2	; select bank2
 11983  1F3B  148E               	bsf	14,1	;volatile
 11984  1F3C  0008               	return
 11985  1F3D                     __end_of_initBLE:	
 11986  1F3D                     __ptext15:	
 11987 ;; *************** function _BLE_SendCMD *****************
 11988 ;; Defined at:
 11989 ;;		line 35 in file "src/ble.c"
 11990 ;; Parameters:    Size  Location     Type
 11991 ;;  pBuf            2    1[BANK1 ] PTR const unsigned char 
 11992 ;;		 -> STR_4(15), STR_3(11), STR_2(34), STR_1(19), 
 11993 ;; Auto vars:     Size  Location     Type
 11994 ;;  ack             7    4[BANK1 ] unsigned char [7]
 11995 ;;  cnt             2   11[BANK1 ] unsigned int 
 11996 ;;  index           1   14[BANK1 ] unsigned char 
 11997 ;;  rev             1   13[BANK1 ] unsigned char 
 11998 ;; Return value:  Size  Location     Type
 11999 ;;                  1    wreg      void 
 12000 ;; Registers used:
 12001 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12002 ;; Tracked objects:
 12003 ;;		On entry : 1F/1
 12004 ;;		On exit  : 1F/1
 12005 ;;		Unchanged: 0/0
 12006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12007 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 12008 ;;      Locals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
 12009 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 12010 ;;      Totals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0
 12011 ;;Total ram usage:       14 bytes
 12012 ;; Hardware stack levels used:    1
 12013 ;; Hardware stack levels required when called:    5
 12014 ;; This function calls:
 12015 ;;		_eusartSendByte
 12016 ;; This function is called by:
 12017 ;;		_checkDevID
 12018 ;;		_initBLE
 12019 ;; This function uses a non-reentrant model
 12020 ;;
 12021                           
 12022                           
 12023                           ;psect for function _BLE_SendCMD
 12024  1F3D                     _BLE_SendCMD:	
 12025                           
 12026                           ;ble.c: 37: unsigned char ack[] = { 'A', 'T', '+', 'O', 'K', '\r', '\n' };
 12027                           
 12028                           ;incstack = 0
 12029                           ; Regs used in _BLE_SendCMD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12030  1F3D  30E1               	movlw	low BLE_SendCMD@F7932
 12031  1F3E  0086               	movwf	6
 12032  1F3F  3000               	movlw	high BLE_SendCMD@F7932
 12033  1F40  0087               	movwf	7
 12034  1F41  30A4               	movlw	low BLE_SendCMD@ack
 12035  1F42  0084               	movwf	4
 12036  1F43  3000               	movlw	high BLE_SendCMD@ack
 12037  1F44  0085               	movwf	5
 12038  1F45  3007               	movlw	7
 12039  1F46  00A3               	movwf	??_BLE_SendCMD^(0+128)
 12040  1F47                     u5920:	
 12041  1F47  0016               	moviw fsr1++
 12042  1F48  001A               	movwi fsr0++
 12043  1F49  0BA3               	decfsz	??_BLE_SendCMD^(0+128),f
 12044  1F4A  2F47               	goto	u5920
 12045                           
 12046                           ;ble.c: 38: unsigned char index = 0;
 12047  1F4B  01AE               	clrf	BLE_SendCMD@index^(0+128)
 12048                           
 12049                           ;ble.c: 39: unsigned int cnt = 0;
 12050  1F4C  01AB               	clrf	BLE_SendCMD@cnt^(0+128)
 12051  1F4D  01AC               	clrf	(BLE_SendCMD@cnt+1)^(0+128)
 12052  1F4E  0023               	movlb	3	; select bank3
 12053  1F4F  0819               	movf	25,w	;volatile
 12054  1F50                     l7041:	
 12055                           ;ble.c: 41: while ( *pBuf != '\0' )
 12056                           
 12057  1F50  0021               	movlb	1	; select bank1
 12058  1F51  0821               	movf	BLE_SendCMD@pBuf^(0+128),w
 12059  1F52  0084               	movwf	4
 12060  1F53  0822               	movf	(BLE_SendCMD@pBuf+1)^(0+128),w
 12061  1F54  0085               	movwf	5
 12062  1F55  0012               	moviw fsr0++
 12063  1F56  1903               	btfsc	3,2
 12064  1F57  2F89               	goto	l7063
 12065                           
 12066                           ;ble.c: 42: {
 12067                           ;ble.c: 43: eusartSendByte(*pBuf++);
 12068  1F58  0821               	movf	BLE_SendCMD@pBuf^(0+128),w
 12069  1F59  0084               	movwf	4
 12070  1F5A  0822               	movf	(BLE_SendCMD@pBuf+1)^(0+128),w
 12071  1F5B  0085               	movwf	5
 12072  1F5C  0800               	movf	0,w	;code access
 12073  1F5D  278E  319E         	fcall	_eusartSendByte
 12074  1F5F  0021               	movlb	1	; select bank1
 12075  1F60  0AA1               	incf	BLE_SendCMD@pBuf^(0+128),f
 12076  1F61  1903               	skipnz
 12077  1F62  0AA2               	incf	(BLE_SendCMD@pBuf+1)^(0+128),f
 12078  1F63  2F50               	goto	l7041
 12079  1F64                     l234:	
 12080                           
 12081                           ;ble.c: 48: {
 12082                           ;ble.c: 50: if( PIR1bits.RCIF )
 12083  1F64  0020               	movlb	0	; select bank0
 12084  1F65  1E91               	btfss	17,5	;volatile
 12085  1F66  2F7A               	goto	l7055
 12086                           
 12087                           ;ble.c: 51: {
 12088                           ;ble.c: 52: if (RC1STAbits.OERR)
 12089  1F67  0023               	movlb	3	; select bank3
 12090  1F68  1C9D               	btfss	29,1	;volatile
 12091  1F69  2F6C               	goto	l7047
 12092                           
 12093                           ;ble.c: 53: {
 12094                           ;ble.c: 54: RC1STAbits.CREN = 0;
 12095  1F6A  121D               	bcf	29,4	;volatile
 12096                           
 12097                           ;ble.c: 55: RC1STAbits.CREN = 1;
 12098  1F6B  161D               	bsf	29,4	;volatile
 12099  1F6C                     l7047:	
 12100                           
 12101                           ;ble.c: 56: }
 12102                           ;ble.c: 57: rev = RCREG;
 12103  1F6C  0819               	movf	25,w	;volatile
 12104  1F6D  0021               	movlb	1	; select bank1
 12105  1F6E  00AD               	movwf	BLE_SendCMD@rev^(0+128)
 12106                           
 12107                           ;ble.c: 58: if ( rev == ack[index] )
 12108  1F6F  082E               	movf	BLE_SendCMD@index^(0+128),w
 12109  1F70  3EA4               	addlw	(low (BLE_SendCMD@ack| 0))& (0+255)
 12110  1F71  0086               	movwf	6
 12111  1F72  0187               	clrf	7
 12112  1F73  0801               	movf	1,w
 12113  1F74  062D               	xorwf	BLE_SendCMD@rev^(0+128),w
 12114  1F75  1D03               	skipz
 12115  1F76  2F79               	goto	l7053
 12116                           
 12117                           ;ble.c: 59: {
 12118                           ;ble.c: 60: index++;
 12119  1F77  0AAE               	incf	BLE_SendCMD@index^(0+128),f
 12120                           
 12121                           ;ble.c: 61: }
 12122  1F78  2F7A               	goto	l7055
 12123  1F79                     l7053:	
 12124                           
 12125                           ;ble.c: 62: else
 12126                           ;ble.c: 63: {
 12127                           ;ble.c: 64: index = 0;
 12128  1F79  01AE               	clrf	BLE_SendCMD@index^(0+128)
 12129  1F7A                     l7055:	
 12130                           
 12131                           ;ble.c: 65: }
 12132                           ;ble.c: 66: }
 12133                           ;ble.c: 67: _delay((unsigned long)((100)*(16000000/4000000.0)));
 12134  1F7A  3085               	movlw	133
 12135  1F7B                     u7907:	
 12136  1F7B  0B89               	decfsz	9,f
 12137  1F7C  2F7B               	goto	u7907
 12138  1F7D  0000               	nop
 12139                           
 12140                           ;ble.c: 68: cnt++;
 12141  1F7E  0021               	movlb	1	; select bank1
 12142  1F7F  0AAB               	incf	BLE_SendCMD@cnt^(0+128),f
 12143  1F80  1903               	skipnz
 12144  1F81  0AAC               	incf	(BLE_SendCMD@cnt+1)^(0+128),f
 12145                           
 12146                           ;ble.c: 69: if( cnt > 1000 )
 12147  1F82  3003               	movlw	3
 12148  1F83  022C               	subwf	(BLE_SendCMD@cnt+1)^(0+128),w
 12149  1F84  30E9               	movlw	233
 12150  1F85  1903               	skipnz
 12151  1F86  022B               	subwf	BLE_SendCMD@cnt^(0+128),w
 12152  1F87  1803               	btfsc	3,0
 12153  1F88  0008               	return
 12154  1F89                     l7063:	
 12155  1F89  3007               	movlw	7
 12156  1F8A  022E               	subwf	BLE_SendCMD@index^(0+128),w
 12157  1F8B  1803               	btfsc	3,0
 12158  1F8C  0008               	return
 12159  1F8D  2F64               	goto	l234
 12160  1F8E                     __end_of_BLE_SendCMD:	
 12161  1F8E                     __ptext52:	
 12162 ;; *************** function _eusartSendByte *****************
 12163 ;; Defined at:
 12164 ;;		line 61 in file "src/eusart.c"
 12165 ;; Parameters:    Size  Location     Type
 12166 ;;  byte            1    wreg     unsigned char 
 12167 ;; Auto vars:     Size  Location     Type
 12168 ;;  byte            1    0[BANK1 ] unsigned char 
 12169 ;; Return value:  Size  Location     Type
 12170 ;;                  1    wreg      void 
 12171 ;; Registers used:
 12172 ;;		wreg
 12173 ;; Tracked objects:
 12174 ;;		On entry : 1F/1
 12175 ;;		On exit  : 1F/3
 12176 ;;		Unchanged: 0/0
 12177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12179 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 12180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12181 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 12182 ;;Total ram usage:        1 bytes
 12183 ;; Hardware stack levels used:    1
 12184 ;; Hardware stack levels required when called:    4
 12185 ;; This function calls:
 12186 ;;		Nothing
 12187 ;; This function is called by:
 12188 ;;		_BLE_SendCMD
 12189 ;;		_bleSendData
 12190 ;; This function uses a non-reentrant model
 12191 ;;
 12192                           
 12193                           
 12194                           ;psect for function _eusartSendByte
 12195  1F8E                     _eusartSendByte:	
 12196                           
 12197                           ;incstack = 0
 12198                           ; Regs used in _eusartSendByte: [wreg]
 12199                           ;eusartSendByte@byte stored from wreg
 12200  1F8E  00A0               	movwf	eusartSendByte@byte^(0+128)
 12201  1F8F                     l99:	
 12202                           ;eusart.c: 63: while(!TXIF);
 12203                           
 12204  1F8F  0020               	movlb	0	; select bank0
 12205  1F90  1E11               	btfss	17,4	;volatile
 12206  1F91  2F8F               	goto	l99
 12207                           
 12208                           ;eusart.c: 64: TXREG = byte;
 12209  1F92  0021               	movlb	1	; select bank1
 12210  1F93  0820               	movf	eusartSendByte@byte^(0+128),w
 12211  1F94  0023               	movlb	3	; select bank3
 12212  1F95  009A               	movwf	26	;volatile
 12213  1F96  0008               	return
 12214  1F97                     __end_of_eusartSendByte:	
 12215  1F97                     __ptext14:	
 12216 ;; *************** function _checkDevID *****************
 12217 ;; Defined at:
 12218 ;;		line 76 in file "src/ble.c"
 12219 ;; Parameters:    Size  Location     Type
 12220 ;;		None
 12221 ;; Auto vars:     Size  Location     Type
 12222 ;;  dev            17   16[BANK1 ] unsigned char [17]
 12223 ;;  cnt             2   34[BANK1 ] unsigned int 
 12224 ;;  index           1   36[BANK1 ] unsigned char 
 12225 ;;  rev             1   33[BANK1 ] unsigned char 
 12226 ;; Return value:  Size  Location     Type
 12227 ;;                  1    wreg      unsigned char 
 12228 ;; Registers used:
 12229 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12230 ;; Tracked objects:
 12231 ;;		On entry : 0/2
 12232 ;;		On exit  : 1F/1
 12233 ;;		Unchanged: 0/0
 12234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12236 ;;      Locals:         0       0      21       0       0       0       0       0       0       0       0       0       
      +0       0
 12237 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 12238 ;;      Totals:         0       0      22       0       0       0       0       0       0       0       0       0       
      +0       0
 12239 ;;Total ram usage:       22 bytes
 12240 ;; Hardware stack levels used:    1
 12241 ;; Hardware stack levels required when called:    6
 12242 ;; This function calls:
 12243 ;;		_BLE_SendCMD
 12244 ;; This function is called by:
 12245 ;;		_initBLE
 12246 ;; This function uses a non-reentrant model
 12247 ;;
 12248                           
 12249                           
 12250                           ;psect for function _checkDevID
 12251  1F97                     _checkDevID:	
 12252                           
 12253                           ;ble.c: 78: unsigned char dev[] = "3031343930313032";
 12254                           
 12255                           ;incstack = 0
 12256                           ; Regs used in _checkDevID: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12257  1F97  3052               	movlw	low checkDevID@F7939
 12258  1F98  0086               	movwf	6
 12259  1F99  3001               	movlw	high checkDevID@F7939
 12260  1F9A  0087               	movwf	7
 12261  1F9B  30B0               	movlw	low checkDevID@dev
 12262  1F9C  0084               	movwf	4
 12263  1F9D  3000               	movlw	high checkDevID@dev
 12264  1F9E  0085               	movwf	5
 12265  1F9F  3011               	movlw	17
 12266  1FA0  0021               	movlb	1	; select bank1
 12267  1FA1  00AF               	movwf	??_checkDevID^(0+128)
 12268  1FA2                     u6240:	
 12269  1FA2  0016               	moviw fsr1++
 12270  1FA3  001A               	movwi fsr0++
 12271  1FA4  0BAF               	decfsz	??_checkDevID^(0+128),f
 12272  1FA5  2FA2               	goto	u6240
 12273  1FA6  3022               	movlw	low (STR_1| (0+32768))
 12274                           
 12275                           ;ble.c: 79: unsigned char index = 0;
 12276  1FA7  01C4               	clrf	checkDevID@index^(0+128)
 12277                           
 12278                           ;ble.c: 80: unsigned int cnt = 0;
 12279  1FA8  01C2               	clrf	checkDevID@cnt^(0+128)
 12280  1FA9  01C3               	clrf	(checkDevID@cnt+1)^(0+128)
 12281                           
 12282                           ;ble.c: 81: unsigned char rev;
 12283                           ;ble.c: 82: BLE_SendCMD("AT+ADV_MFR_SPC=?\r\n");
 12284  1FAA  00A1               	movwf	BLE_SendCMD@pBuf^(0+128)
 12285  1FAB  3098               	movlw	high (STR_1| (0+32768))
 12286  1FAC  00A2               	movwf	(BLE_SendCMD@pBuf^(0+128)+1)
 12287  1FAD  273D  319E         	fcall	_BLE_SendCMD
 12288  1FAF                     l7343:	
 12289                           ;ble.c: 83: while ( *(dev+index) != '\0' )
 12290                           
 12291  1FAF  27DA  319E         	fcall	PL164	;call to abstracted procedure
 12292  1FB1  1903               	btfsc	3,2
 12293  1FB2  3401               	retlw	1
 12294                           
 12295                           ;ble.c: 84: {
 12296                           ;ble.c: 86: if( PIR1bits.RCIF )
 12297  1FB3  0020               	movlb	0	; select bank0
 12298  1FB4  1E91               	btfss	17,5	;volatile
 12299  1FB5  2FC4               	goto	l7333
 12300                           
 12301                           ;ble.c: 87: {
 12302                           ;ble.c: 88: if (RC1STAbits.OERR)
 12303  1FB6  0023               	movlb	3	; select bank3
 12304  1FB7  1C9D               	btfss	29,1	;volatile
 12305  1FB8  2FBB               	goto	l7323
 12306                           
 12307                           ;ble.c: 89: {
 12308                           ;ble.c: 90: RC1STAbits.CREN = 0;
 12309  1FB9  121D               	bcf	29,4	;volatile
 12310                           
 12311                           ;ble.c: 91: RC1STAbits.CREN = 1;
 12312  1FBA  161D               	bsf	29,4	;volatile
 12313  1FBB                     l7323:	
 12314                           
 12315                           ;ble.c: 92: }
 12316                           ;ble.c: 93: rev = RCREG;
 12317  1FBB  0819               	movf	25,w	;volatile
 12318  1FBC  0021               	movlb	1	; select bank1
 12319  1FBD  00C1               	movwf	checkDevID@rev^(0+128)
 12320                           
 12321                           ;ble.c: 94: if ( rev == *(dev+index) )
 12322  1FBE  27DA  319E         	fcall	PL164	;call to abstracted procedure
 12323  1FC0  0641               	xorwf	checkDevID@rev^(0+128),w
 12324  1FC1  1D03               	skipz
 12325  1FC2  3400               	retlw	0
 12326                           
 12327                           ;ble.c: 95: {
 12328                           ;ble.c: 96: index++;
 12329  1FC3  0AC4               	incf	checkDevID@index^(0+128),f
 12330  1FC4                     l7333:	
 12331                           ;ble.c: 98: else
 12332                           ;ble.c: 99: {
 12333                           ;ble.c: 100: return 0;
 12334                           
 12335                           ;ble.c: 97: }
 12336                           
 12337                           
 12338                           ;ble.c: 101: }
 12339                           ;ble.c: 102: }
 12340                           ;ble.c: 103: _delay((unsigned long)((100)*(16000000/4000000.0)));
 12341  1FC4  3085               	movlw	133
 12342  1FC5                     u7897:	
 12343  1FC5  0B89               	decfsz	9,f
 12344  1FC6  2FC5               	goto	u7897
 12345  1FC7  0000               	nop
 12346                           
 12347                           ;ble.c: 104: cnt++;
 12348  1FC8  0021               	movlb	1	; select bank1
 12349  1FC9  0AC2               	incf	checkDevID@cnt^(0+128),f
 12350  1FCA  1903               	skipnz
 12351  1FCB  0AC3               	incf	(checkDevID@cnt+1)^(0+128),f
 12352                           
 12353                           ;ble.c: 105: if( cnt > 1000 )
 12354  1FCC  3003               	movlw	3
 12355  1FCD  0243               	subwf	(checkDevID@cnt+1)^(0+128),w
 12356  1FCE  30E9               	movlw	233
 12357  1FCF  1903               	skipnz
 12358  1FD0  0242               	subwf	checkDevID@cnt^(0+128),w
 12359  1FD1  1803               	btfsc	3,0
 12360  1FD2  3400               	retlw	0
 12361  1FD3  2FAF               	goto	l7343
 12362  1FD4                     __end_of_checkDevID:	
 12363                           ;ble.c: 108: }
 12364                           ;ble.c: 109: }
 12365                           ;ble.c: 110: return 1;
 12366                           
 12367  1FD4                     PL124:	
 12368  1FD4  0084               	movwf	4
 12369  1FD5  3002               	movlw	2	; select bank4/5
 12370  1FD6  0085               	movwf	5
 12371  1FD7  0800               	movf	0,w
 12372  1FD8  0081               	movwf	1
 12373  1FD9  0008               	return
 12374  1FDA                     __end_ofPL124:	
 12375  1FDA                     PL164:	
 12376  1FDA  0844               	movf	checkDevID@index^(0+128),w
 12377  1FDB  3EB0               	addlw	(low (checkDevID@dev| 0))& (0+255)
 12378  1FDC  0086               	movwf	6
 12379  1FDD  0187               	clrf	7
 12380  1FDE  0801               	movf	1,w
 12381  1FDF  0008               	return
 12382  1FE0                     __end_ofPL164:	
 12383                           
 12384                           	psect	intentry
 12385  0404                     __pintentry:	
 12386 ;; *************** function _INTERRUPT_interruptManager *****************
 12387 ;; Defined at:
 12388 ;;		line 70 in file "src/comman.c"
 12389 ;; Parameters:    Size  Location     Type
 12390 ;;		None
 12391 ;; Auto vars:     Size  Location     Type
 12392 ;;		None
 12393 ;; Return value:  Size  Location     Type
 12394 ;;                  1    wreg      void 
 12395 ;; Registers used:
 12396 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12397 ;; Tracked objects:
 12398 ;;		On entry : 0/0
 12399 ;;		On exit  : 18/0
 12400 ;;		Unchanged: 0/0
 12401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12406 ;;Total ram usage:        0 bytes
 12407 ;; Hardware stack levels used:    1
 12408 ;; Hardware stack levels required when called:    3
 12409 ;; This function calls:
 12410 ;;		_EUSART_RCV_ISR
 12411 ;;		_ledDynamic
 12412 ;;		_ledSunrs
 12413 ;;		_runRTC
 12414 ;;		_updateLed
 12415 ;; This function is called by:
 12416 ;;		Interrupt level 1
 12417 ;; This function uses a non-reentrant model
 12418 ;;
 12419                           
 12420  0404                     _INTERRUPT_interruptManager:	
 12421                           
 12422                           ;incstack = 0
 12423  0404  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12424                           
 12425                           ; Regs used in _INTERRUPT_interruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12426  0405  3184               	pagesel	$
 12427                           
 12428                           ;comman.c: 72: static unsigned char cnt = 0;
 12429                           ;comman.c: 74: if ( PIR1bits.RCIF == 1 )
 12430  0406  0020               	movlb	0	; select bank0
 12431  0407  1E91               	btfss	17,5	;volatile
 12432  0408  2C0D               	goto	i1l159
 12433                           
 12434                           ;comman.c: 75: {
 12435                           ;comman.c: 76: EUSART_RCV_ISR();
 12436  0409  319C  2494  3184   	fcall	_EUSART_RCV_ISR
 12437                           
 12438                           ;comman.c: 77: }
 12439  040C  2C3F               	goto	i1l168
 12440  040D                     i1l159:	
 12441                           
 12442                           ;comman.c: 78: else if ( PIR0bits.TMR0IF == 1 )
 12443  040D  1E90               	btfss	16,5	;volatile
 12444  040E  2C14               	goto	i1l161
 12445                           
 12446                           ;comman.c: 79: {
 12447                           ;comman.c: 80: PIR0bits.TMR0IF = 0;
 12448  040F  1290               	bcf	16,5	;volatile
 12449                           
 12450                           ;comman.c: 81: runRTC();
 12451  0410  319D  2508  3184   	fcall	_runRTC
 12452                           
 12453                           ;comman.c: 82: }
 12454  0413  2C3F               	goto	i1l168
 12455  0414                     i1l161:	
 12456                           
 12457                           ;comman.c: 83: else if ( PIR1bits.TMR2IF == 1 )
 12458  0414  1C91               	btfss	17,1	;volatile
 12459  0415  2C3F               	goto	i1l168
 12460                           
 12461                           ;comman.c: 84: {
 12462                           ;comman.c: 85: PIR1bits.TMR2IF = 0;
 12463  0416  1091               	bcf	17,1	;volatile
 12464                           
 12465                           ;comman.c: 86: cnt++;
 12466  0417  0AC8               	incf	INTERRUPT_interruptManager@cnt,f
 12467                           
 12468                           ;comman.c: 87: if ( ( cnt & 0x03 ) == 0x00 )
 12469  0418  0848               	movf	INTERRUPT_interruptManager@cnt,w
 12470  0419  3903               	andlw	3
 12471  041A  1903               	btfsc	3,2
 12472                           
 12473                           ;comman.c: 88: {
 12474                           ;comman.c: 89: if ( gLedRunPara.find || gLedRunPara.fPrev || (gLedPara.fAuto && gLedRunP
      +                          ara.fDynamic == 0) )
 12475  041B  1849               	btfsc	_gLedRunPara,0	;volatile
 12476  041C  2C3F               	goto	i1l168
 12477  041D  19C9               	btfsc	_gLedRunPara,3	;volatile
 12478  041E  2C3F               	goto	i1l168
 12479  041F  0024               	movlb	4	; select bank4
 12480  0420  1C20               	btfss	_gLedPara^(0+512),0	;volatile
 12481  0421  2C26               	goto	i1l6787
 12482  0422  0020               	movlb	0	; select bank0
 12483  0423  084A               	movf	_gLedRunPara+1,w	;volatile
 12484  0424  1903               	btfsc	3,2
 12485  0425  2C3F               	goto	i1l168
 12486  0426                     i1l6787:	
 12487                           ;comman.c: 90: {
 12488                           ;comman.c: 91: return;
 12489                           
 12490                           
 12491                           ;comman.c: 92: }
 12492                           ;comman.c: 93: if ( gLedPara.mPara.manualPara.fDyn == 12 )
 12493  0426  300C               	movlw	12
 12494  0427  0024               	movlb	4	; select bank4
 12495  0428  0622               	xorwf	(_gLedPara^(0+512)+2),w	;volatile
 12496  0429  1D03               	btfss	3,2
 12497  042A  2C2F               	goto	i1l6793
 12498                           
 12499                           ;comman.c: 94: {
 12500                           ;comman.c: 95: ledSunrs();
 12501  042B  3192  22EF  3184   	fcall	_ledSunrs
 12502  042E  2C3F               	goto	i1l168
 12503  042F                     i1l6793:	
 12504                           
 12505                           ;comman.c: 97: }
 12506                           ;comman.c: 103: if( gLedRunPara.fDynamic > 0 )
 12507  042F  0020               	movlb	0	; select bank0
 12508  0430  084A               	movf	_gLedRunPara+1,w	;volatile
 12509  0431  1903               	btfsc	3,2
 12510  0432  2C37               	goto	i1l6799
 12511                           
 12512                           ;comman.c: 104: {
 12513                           ;comman.c: 105: ledDynamic();
 12514  0433  3184  2443  3184   	fcall	_ledDynamic
 12515  0436  2C3F               	goto	i1l168
 12516  0437                     i1l6799:	
 12517                           
 12518                           ;comman.c: 107: }
 12519                           ;comman.c: 108: if ( gLedPara.mPara.manualPara.fDyn == 0 || !gLedPara.mPara.manualPara.f
      +                          On )
 12520  0437  0024               	movlb	4	; select bank4
 12521  0438  0822               	movf	(_gLedPara^(0+512)+2),w	;volatile
 12522  0439  1903               	btfsc	3,2
 12523  043A  2C3D               	goto	i1l6803
 12524  043B  1821               	btfsc	(_gLedPara^(0+512)+1),0	;volatile
 12525  043C  2C3F               	goto	i1l168
 12526  043D                     i1l6803:	
 12527                           
 12528                           ;comman.c: 109: {
 12529                           ;comman.c: 110: updateLed();
 12530  043D  3192  2284         	fcall	_updateLed
 12531  043F                     i1l168:	
 12532  043F  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12533  0440  0009               	retfie
 12534  0441                     __end_of_INTERRUPT_interruptManager:	
 12535                           
 12536                           	psect	text55
 12537  1284                     __ptext55:	
 12538 ;; *************** function _updateLed *****************
 12539 ;; Defined at:
 12540 ;;		line 16 in file "src/led.c"
 12541 ;; Parameters:    Size  Location     Type
 12542 ;;		None
 12543 ;; Auto vars:     Size  Location     Type
 12544 ;;  i               1    9[COMMON] unsigned char 
 12545 ;;  step            1    8[COMMON] unsigned char 
 12546 ;; Return value:  Size  Location     Type
 12547 ;;                  1    wreg      void 
 12548 ;; Registers used:
 12549 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12550 ;; Tracked objects:
 12551 ;;		On entry : 1F/4
 12552 ;;		On exit  : 1F/6
 12553 ;;		Unchanged: 0/0
 12554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12556 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12557 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12558 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12559 ;;Total ram usage:        8 bytes
 12560 ;; Hardware stack levels used:    1
 12561 ;; Hardware stack levels required when called:    2
 12562 ;; This function calls:
 12563 ;;		i1_updatePWM
 12564 ;; This function is called by:
 12565 ;;		_INTERRUPT_interruptManager
 12566 ;; This function uses a non-reentrant model
 12567 ;;
 12568                           
 12569                           
 12570                           ;psect for function _updateLed
 12571  1284                     _updateLed:	
 12572                           
 12573                           ;led.c: 18: unsigned char step;
 12574                           ;led.c: 19: if ( gLedRunPara.fStep )
 12575                           
 12576                           ;incstack = 0
 12577                           ; Regs used in _updateLed: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12578  1284  0020               	movlb	0	; select bank0
 12579  1285  1EC9               	btfss	_gLedRunPara,5	;volatile
 12580  1286  2A8A               	goto	i1l6683
 12581                           
 12582                           ;led.c: 20: {
 12583                           ;led.c: 21: step = 1;
 12584  1287  01F8               	clrf	updateLed@step
 12585  1288  0AF8               	incf	updateLed@step,f
 12586                           
 12587                           ;led.c: 22: }
 12588  1289  2A8C               	goto	i1l6685
 12589  128A                     i1l6683:	
 12590                           
 12591                           ;led.c: 23: else
 12592                           ;led.c: 24: {
 12593                           ;led.c: 25: step = 4;
 12594  128A  3004               	movlw	4
 12595  128B  00F8               	movwf	updateLed@step
 12596  128C                     i1l6685:	
 12597                           
 12598                           ;led.c: 26: }
 12599                           ;led.c: 27: for ( unsigned char i = 0; i < 4; i++ )
 12600  128C  01F9               	clrf	updateLed@i
 12601  128D                     i1l6691:	
 12602                           
 12603                           ;led.c: 28: {
 12604                           ;led.c: 29: if ( gLedRunPara.nCurrentBrt[i] == gLedRunPara.nTargetBrt[i] )
 12605  128D  22DD  3192         	fcall	PL48	;call to abstracted procedure
 12606  128F  3F40               	moviw [0]fsr1
 12607  1290  00F4               	movwf	??_updateLed+2
 12608  1291  3F41               	moviw [1]fsr1
 12609  1292  00F5               	movwf	??_updateLed+3
 12610  1293  0673               	xorwf	??_updateLed+1,w
 12611  1294  1D03               	skipz
 12612  1295  2A98               	goto	u556_25
 12613  1296  0872               	movf	??_updateLed,w
 12614  1297  0674               	xorwf	??_updateLed+2,w
 12615  1298                     u556_25:	
 12616  1298  1903               	btfsc	3,2
 12617  1299  2AC4               	goto	i1l6707
 12618                           
 12619                           ;led.c: 33: else
 12620                           ;led.c: 34: {
 12621                           ;led.c: 35: if ( gLedRunPara.nCurrentBrt[i] + step < gLedRunPara.nTargetBrt[i] )
 12622  129A  22DD  3192         	fcall	PL48	;call to abstracted procedure
 12623  129C  22CB  3192         	fcall	PL34	;call to abstracted procedure
 12624  129E  1803               	skipnc
 12625  129F  2AA7               	goto	i1l6701
 12626                           
 12627                           ;led.c: 36: {
 12628                           ;led.c: 37: gLedRunPara.nCurrentBrt[i] += step;
 12629  12A0  22E9  3192         	fcall	PL146	;call to abstracted procedure
 12630  12A2  0781               	addwf	1,f
 12631  12A3  3141               	addfsr 1,1
 12632  12A4  1803               	skipnc
 12633  12A5  0A81               	incf	1,f
 12634                           
 12635                           ;led.c: 38: }
 12636  12A6  2AC4               	goto	i1l6707
 12637  12A7                     i1l6701:	
 12638                           
 12639                           ;led.c: 39: else if ( gLedRunPara.nTargetBrt[i] + step < gLedRunPara.nCurrentBrt[i] )
 12640  12A7  3579               	lslf	updateLed@i,w
 12641  12A8  3E56               	addlw	(low ((_gLedRunPara| 0+13)))& (0+255)
 12642  12A9  0086               	movwf	6
 12643  12AA  0187               	clrf	7
 12644  12AB  3F40               	moviw [0]fsr1
 12645  12AC  00F2               	movwf	??_updateLed
 12646  12AD  3F41               	moviw [1]fsr1
 12647  12AE  00F3               	movwf	??_updateLed+1
 12648  12AF  3579               	lslf	updateLed@i,w
 12649  12B0  3E4E               	addlw	(low ((_gLedRunPara| 0+5)))& (0+255)
 12650  12B1  0086               	movwf	6
 12651  12B2  22CB  3192         	fcall	PL34	;call to abstracted procedure
 12652  12B4  1803               	skipnc
 12653  12B5  2ABB               	goto	i1l6705
 12654                           
 12655                           ;led.c: 40: {
 12656                           ;led.c: 41: gLedRunPara.nCurrentBrt[i] -= step;
 12657  12B6  22E9               	fcall	PL146	;call to abstracted procedure
 12658  12B7  318F  27C4  3192   	fcall	PL178	;call to abstracted procedure
 12659                           
 12660                           ;led.c: 42: }
 12661  12BA  2AC4               	goto	i1l6707
 12662  12BB                     i1l6705:	
 12663                           
 12664                           ;led.c: 43: else
 12665                           ;led.c: 44: {
 12666                           ;led.c: 45: gLedRunPara.nCurrentBrt[i] = gLedRunPara.nTargetBrt[i];
 12667  12BB  3579               	lslf	updateLed@i,w
 12668  12BC  3E4E               	addlw	(low ((_gLedRunPara| 0+5)))& (0+255)
 12669  12BD  0086               	movwf	6
 12670  12BE  0187               	clrf	7
 12671  12BF  3579               	lslf	updateLed@i,w
 12672  12C0  3E56               	addlw	(low ((_gLedRunPara| 0+13)))& (0+255)
 12673  12C1  318B  23B3  3192   	fcall	PL22	;call to abstracted procedure
 12674  12C4                     i1l6707:	
 12675  12C4  3004               	movlw	4
 12676  12C5  0AF9               	incf	updateLed@i,f
 12677  12C6  0279               	subwf	updateLed@i,w
 12678  12C7  1C03               	skipc
 12679  12C8  2A8D               	goto	i1l6691
 12680                           
 12681                           ;led.c: 46: }
 12682                           ;led.c: 47: }
 12683                           ;led.c: 48: }
 12684                           ;led.c: 49: updatePWM();
 12685  12C9  23EC               	fcall	i1_updatePWM
 12686  12CA  0008               	return
 12687  12CB                     __end_of_updateLed:	
 12688  12CB                     PL34:	
 12689  12CB  3F40               	moviw [0]fsr1
 12690  12CC  00F4               	movwf	??_updateLed+2
 12691  12CD  3F41               	moviw [1]fsr1
 12692  12CE  00F5               	movwf	??_updateLed+3
 12693  12CF  0878               	movf	updateLed@step,w
 12694  12D0  0774               	addwf	??_updateLed+2,w
 12695  12D1  00F6               	movwf	??_updateLed+4
 12696  12D2  0875               	movf	??_updateLed+3,w
 12697  12D3  1803               	skipnc
 12698  12D4  0A75               	incf	??_updateLed+3,w
 12699  12D5  00F7               	movwf	??_updateLed+5
 12700  12D6  0873               	movf	??_updateLed+1,w
 12701  12D7  0277               	subwf	??_updateLed+5,w
 12702  12D8  1D03               	skipz
 12703  12D9  0008               	return
 12704  12DA  0872               	movf	??_updateLed,w
 12705  12DB  0276               	subwf	??_updateLed+4,w
 12706  12DC  0008               	return
 12707  12DD                     __end_ofPL34:	
 12708  12DD                     PL48:	
 12709  12DD  3579               	lslf	updateLed@i,w
 12710  12DE  3E4E               	addlw	(low ((_gLedRunPara| 0+5)))& (0+255)
 12711  12DF  0086               	movwf	6
 12712  12E0  0187               	clrf	7
 12713  12E1  3F40               	moviw [0]fsr1
 12714  12E2  00F2               	movwf	??_updateLed
 12715  12E3  3F41               	moviw [1]fsr1
 12716  12E4  00F3               	movwf	??_updateLed+1
 12717  12E5  3579               	lslf	updateLed@i,w
 12718  12E6  3E56               	addlw	(low ((_gLedRunPara| 0+13)))& (0+255)
 12719  12E7  0086               	movwf	6
 12720  12E8  0008               	return
 12721  12E9                     __end_ofPL48:	
 12722  12E9                     PL146:	
 12723  12E9  3579               	lslf	updateLed@i,w
 12724  12EA  3E56               	addlw	(low ((_gLedRunPara| 0+13)))& (0+255)
 12725  12EB  0086               	movwf	6
 12726  12EC  0187               	clrf	7
 12727  12ED  0878               	movf	updateLed@step,w
 12728  12EE  0008               	return
 12729  12EF                     __end_ofPL146:	
 12730  12EF                     __ptext59:	
 12731 ;; *************** function _ledSunrs *****************
 12732 ;; Defined at:
 12733 ;;		line 1019 in file "src/led.c"
 12734 ;; Parameters:    Size  Location     Type
 12735 ;;		None
 12736 ;; Auto vars:     Size  Location     Type
 12737 ;;  temp            2   29[BANK0 ] unsigned int 
 12738 ;;  i               1   31[BANK0 ] unsigned char 
 12739 ;; Return value:  Size  Location     Type
 12740 ;;                  1    wreg      void 
 12741 ;; Registers used:
 12742 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12743 ;; Tracked objects:
 12744 ;;		On entry : 1F/4
 12745 ;;		On exit  : 1F/6
 12746 ;;		Unchanged: 0/0
 12747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12749 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12750 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12751 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12752 ;;Total ram usage:        7 bytes
 12753 ;; Hardware stack levels used:    1
 12754 ;; Hardware stack levels required when called:    2
 12755 ;; This function calls:
 12756 ;;		___fttol
 12757 ;;		i1___ftmul
 12758 ;;		i1___lwtoft
 12759 ;;		i1_updatePWM
 12760 ;; This function is called by:
 12761 ;;		_INTERRUPT_interruptManager
 12762 ;; This function uses a non-reentrant model
 12763 ;;
 12764                           
 12765                           
 12766                           ;psect for function _ledSunrs
 12767  12EF                     _ledSunrs:	
 12768                           
 12769                           ;led.c: 1021: unsigned char i;
 12770                           ;led.c: 1022: unsigned int temp;
 12771                           ;led.c: 1023: gDynPara.num++;
 12772                           
 12773                           ;incstack = 0
 12774                           ; Regs used in _ledSunrs: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12775  12EF  0023               	movlb	3	; select bank3
 12776  12F0  0AC0               	incf	(_gDynPara^(0+384)+32),f	;volatile
 12777  12F1  1903               	skipnz
 12778  12F2  0AC1               	incf	((_gDynPara+1)^(0+384)+32),f	;volatile
 12779                           
 12780                           ;led.c: 1024: for ( i = 0; i < 4; i++ )
 12781  12F3  0020               	movlb	0	; select bank0
 12782  12F4  01BF               	clrf	ledSunrs@i
 12783  12F5                     i1l6555:	
 12784                           
 12785                           ;led.c: 1025: {
 12786                           ;led.c: 1026: temp = ( unsigned int ) ( gDynPara.delta[i] * gDynPara.num );
 12787  12F5  3187  27CD  3192   	fcall	PL162	;call to abstracted procedure
 12788  12F8  3186  26E1  3192   	fcall	i1___lwtoft
 12789  12FB  3187  27A4  3192   	fcall	PL118	;call to abstracted procedure
 12790  12FE  083F               	movf	ledSunrs@i,w
 12791  12FF  073F               	addwf	ledSunrs@i,w
 12792  1300  073F               	addwf	ledSunrs@i,w
 12793  1301  3187  2756  3192   	fcall	PL76	;call to abstracted procedure
 12794  1304  2351               	fcall	i1___ftmul
 12795  1305  3187  27B3  3192   	fcall	PL138	;call to abstracted procedure
 12796  1308  3184  24ED  3192   	fcall	___fttol
 12797  130B  082D               	movf	?___fttol+1,w
 12798  130C  00BE               	movwf	ledSunrs@temp+1
 12799  130D  082C               	movf	?___fttol,w
 12800  130E  00BD               	movwf	ledSunrs@temp
 12801                           
 12802                           ;led.c: 1027: if ( gLedPara.mPara.manualPara.fOn )
 12803  130F  0024               	movlb	4	; select bank4
 12804  1310  1C21               	btfss	(_gLedPara^(0+512)+1),0	;volatile
 12805  1311  2B1C               	goto	i1l6561
 12806                           
 12807                           ;led.c: 1028: {
 12808                           ;led.c: 1029: gLedRunPara.nCurrentBrt[i] = gDynPara.min[i] + temp;
 12809  1312  0020               	movlb	0	; select bank0
 12810  1313  353F               	lslf	ledSunrs@i,w
 12811  1314  3EA1               	addlw	(low ((_gDynPara| (0+256)+1)))& (0+255)
 12812  1315  2446  3192         	fcall	PL110	;call to abstracted procedure
 12813  1317  0739               	addwf	??_ledSunrs,w
 12814  1318  00BB               	movwf	??_ledSunrs+2
 12815  1319  083E               	movf	ledSunrs@temp+1,w
 12816  131A  3D3A               	addwfc	??_ledSunrs+1,w
 12817  131B  2B25               	goto	L53
 12818  131C                     i1l6561:	
 12819                           ;led.c: 1030: }
 12820                           
 12821                           
 12822                           ;led.c: 1031: else
 12823                           ;led.c: 1032: {
 12824                           ;led.c: 1033: gLedRunPara.nCurrentBrt[i] = gDynPara.max[i] - temp;
 12825  131C  0020               	movlb	0	; select bank0
 12826  131D  353F               	lslf	ledSunrs@i,w
 12827  131E  3EA9               	addlw	(low ((_gDynPara| (0+256)+9)))& (0+255)
 12828  131F  2446  3192         	fcall	PL110	;call to abstracted procedure
 12829  1321  0239               	subwf	??_ledSunrs,w
 12830  1322  00BB               	movwf	??_ledSunrs+2
 12831  1323  083E               	movf	ledSunrs@temp+1,w
 12832  1324  3B3A               	subwfb	??_ledSunrs+1,w
 12833  1325                     L53:	
 12834  1325  243C  3192         	fcall	PL88	;call to abstracted procedure
 12835  1327  3004               	movlw	4
 12836  1328  0ABF               	incf	ledSunrs@i,f
 12837  1329  023F               	subwf	ledSunrs@i,w
 12838  132A  1C03               	skipc
 12839  132B  2AF5               	goto	i1l6555
 12840                           
 12841                           ;led.c: 1034: }
 12842                           ;led.c: 1035: }
 12843                           ;led.c: 1036: if ( gDynPara.num >= gDynPara.cnt )
 12844  132C  0023               	movlb	3	; select bank3
 12845  132D  083E               	movf	((_gDynPara+1)^(0+384)+29),w	;volatile
 12846  132E  0241               	subwf	((_gDynPara+1)^(0+384)+32),w	;volatile
 12847  132F  1D03               	skipz
 12848  1330  2B33               	goto	u538_25
 12849  1331  083D               	movf	(_gDynPara^(0+384)+29),w	;volatile
 12850  1332  0240               	subwf	(_gDynPara^(0+384)+32),w	;volatile
 12851  1333                     u538_25:	
 12852  1333  1C03               	skipc
 12853  1334  2B4F               	goto	i1l6593
 12854                           
 12855                           ;led.c: 1037: {
 12856                           ;led.c: 1038: gDynPara.num = 0;
 12857  1335  01C0               	clrf	(_gDynPara^(0+384)+32)	;volatile
 12858  1336  01C1               	clrf	((_gDynPara+1)^(0+384)+32)	;volatile
 12859                           
 12860                           ;led.c: 1039: gDynPara.fDyn = 0;
 12861  1337  30F0               	movlw	-16
 12862  1338  05A0               	andwf	_gDynPara^(0+384),f	;volatile
 12863                           
 12864                           ;led.c: 1040: gLedPara.mPara.manualPara.fDyn = 0;
 12865  1339  0024               	movlb	4	; select bank4
 12866  133A  01A2               	clrf	(_gLedPara^(0+512)+2)	;volatile
 12867                           
 12868                           ;led.c: 1041: gLedRunPara.fDynamic = 0;
 12869  133B  0020               	movlb	0	; select bank0
 12870  133C  01CA               	clrf	_gLedRunPara+1	;volatile
 12871                           
 12872                           ;led.c: 1042: gLedRunPara.fSave = 1;
 12873  133D  1549               	bsf	_gLedRunPara,2	;volatile
 12874                           
 12875                           ;led.c: 1043: gLedRunPara.nSaveDelayCount = 3;
 12876  133E  3003               	movlw	3
 12877  133F  00CC               	movwf	_gLedRunPara+3	;volatile
 12878                           
 12879                           ;led.c: 1044: for ( i = 0; i < 4; i++ )
 12880  1340  01BF               	clrf	ledSunrs@i
 12881  1341                     i1l6587:	
 12882                           
 12883                           ;led.c: 1045: {
 12884                           ;led.c: 1046: gLedRunPara.nCurrentBrt[i] = gLedRunPara.nTargetBrt[i];
 12885  1341  353F               	lslf	ledSunrs@i,w
 12886  1342  3E4E               	addlw	(low ((_gLedRunPara| 0+5)))& (0+255)
 12887  1343  0086               	movwf	6
 12888  1344  0187               	clrf	7
 12889  1345  353F               	lslf	ledSunrs@i,w
 12890  1346  3E56               	addlw	(low ((_gLedRunPara| 0+13)))& (0+255)
 12891  1347  318B  23B3  3192   	fcall	PL22	;call to abstracted procedure
 12892  134A  3004               	movlw	4
 12893  134B  0ABF               	incf	ledSunrs@i,f
 12894  134C  023F               	subwf	ledSunrs@i,w
 12895  134D  1C03               	skipc
 12896  134E  2B41               	goto	i1l6587
 12897  134F                     i1l6593:	
 12898                           
 12899                           ;led.c: 1047: }
 12900                           ;led.c: 1048: }
 12901                           ;led.c: 1049: updatePWM();
 12902  134F  23EC               	fcall	i1_updatePWM
 12903  1350  0008               	return
 12904  1351                     __end_of_ledSunrs:	
 12905  1351                     __ptext67:	
 12906 ;; *************** function i1___ftmul *****************
 12907 ;; Defined at:
 12908 ;;		line 62 in file "D:\Program Files\Microchip\xc8\v1.41\sources\common\ftmul.c"
 12909 ;; Parameters:    Size  Location     Type
 12910 ;;  f1              3    0[BANK0 ] float 
 12911 ;;  f2              3    3[BANK0 ] float 
 12912 ;; Auto vars:     Size  Location     Type
 12913 ;;  __ftmul         3    7[BANK0 ] unsigned um
 12914 ;;  __ftmul         1   11[BANK0 ] unsigned char 
 12915 ;;  __ftmul         1   10[BANK0 ] unsigned char 
 12916 ;;  __ftmul         1    6[BANK0 ] unsigned char 
 12917 ;; Return value:  Size  Location     Type
 12918 ;;                  3    0[BANK0 ] float 
 12919 ;; Registers used:
 12920 ;;		wreg, status,2, status,0, pclath, cstack
 12921 ;; Tracked objects:
 12922 ;;		On entry : 1F/0
 12923 ;;		On exit  : 1F/0
 12924 ;;		Unchanged: 0/0
 12925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12926 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12927 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12928 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12929 ;;      Totals:         3      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12930 ;;Total ram usage:       15 bytes
 12931 ;; Hardware stack levels used:    1
 12932 ;; Hardware stack levels required when called:    1
 12933 ;; This function calls:
 12934 ;;		i1___ftpack
 12935 ;; This function is called by:
 12936 ;;		_ledSunrs
 12937 ;;		_ledDynamic
 12938 ;; This function uses a non-reentrant model
 12939 ;;
 12940                           
 12941                           
 12942                           ;psect for function i1___ftmul
 12943  1351                     i1___ftmul:	
 12944                           
 12945                           ;incstack = 0
 12946                           ; Regs used in i1___ftmul: [wreg+status,2+status,0+pclath+cstack]
 12947  1351  0820               	movf	i1___ftmul@f1,w
 12948  1352  00FB               	movwf	??i1___ftmul
 12949  1353  0821               	movf	i1___ftmul@f1+1,w
 12950  1354  00FC               	movwf	??i1___ftmul+1
 12951  1355  0822               	movf	i1___ftmul@f1+2,w
 12952  1356  00FD               	movwf	??i1___ftmul+2
 12953  1357  1003               	clrc
 12954  1358  0D7C               	rlf	??i1___ftmul+1,w
 12955  1359  0D7D               	rlf	??i1___ftmul+2,w
 12956  135A  00A6               	movwf	i1___ftmul@exp
 12957  135B  0826               	movf	i1___ftmul@exp,w
 12958  135C  1D03               	btfss	3,2
 12959  135D  2B5F               	goto	i1l5837
 12960  135E  2C6A               	ljmp	PL184	;call to abstracted procedure
 12961  135F                     i1l5837:	
 12962  135F  0823               	movf	i1___ftmul@f2,w
 12963  1360  00FB               	movwf	??i1___ftmul
 12964  1361  0824               	movf	i1___ftmul@f2+1,w
 12965  1362  00FC               	movwf	??i1___ftmul+1
 12966  1363  0825               	movf	i1___ftmul@f2+2,w
 12967  1364  00FD               	movwf	??i1___ftmul+2
 12968  1365  1003               	clrc
 12969  1366  0D7C               	rlf	??i1___ftmul+1,w
 12970  1367  0D7D               	rlf	??i1___ftmul+2,w
 12971  1368  00AB               	movwf	i1___ftmul@sign
 12972  1369  082B               	movf	i1___ftmul@sign,w
 12973  136A  1D03               	btfss	3,2
 12974  136B  2B6D               	goto	i1l5841
 12975  136C  2C6A               	ljmp	PL184	;call to abstracted procedure
 12976  136D                     i1l5841:	
 12977  136D  082B               	movf	i1___ftmul@sign,w
 12978  136E  3E7B               	addlw	123
 12979  136F  07A6               	addwf	i1___ftmul@exp,f
 12980  1370  0822               	movf	i1___ftmul@f1+2,w
 12981  1371  00AB               	movwf	i1___ftmul@sign
 12982  1372  0825               	movf	i1___ftmul@f2+2,w
 12983  1373  06AB               	xorwf	i1___ftmul@sign,f
 12984  1374  3080               	movlw	128
 12985  1375  05AB               	andwf	i1___ftmul@sign,f
 12986  1376  30FF               	movlw	255
 12987  1377  17A1               	bsf	i1___ftmul@f1+1,7
 12988  1378  17A4               	bsf	i1___ftmul@f2+1,7
 12989  1379  05A3               	andwf	i1___ftmul@f2,f
 12990  137A  05A4               	andwf	i1___ftmul@f2+1,f
 12991  137B  3007               	movlw	7
 12992  137C  01A5               	clrf	i1___ftmul@f2+2
 12993  137D  01A7               	clrf	i1___ftmul@f3_as_product
 12994  137E  01A8               	clrf	i1___ftmul@f3_as_product+1
 12995  137F  01A9               	clrf	i1___ftmul@f3_as_product+2
 12996  1380  00AA               	movwf	i1___ftmul@cntr
 12997  1381                     i1l5859:	
 12998  1381  1C20               	btfss	i1___ftmul@f1,0
 12999  1382  2B85               	goto	i1l5863
 13000  1383  244F  3192         	fcall	PL140	;call to abstracted procedure
 13001  1385                     i1l5863:	
 13002  1385  36A2               	lsrf	i1___ftmul@f1+2,f
 13003  1386  0CA1               	rrf	i1___ftmul@f1+1,f
 13004  1387  0CA0               	rrf	i1___ftmul@f1,f
 13005  1388  35A3               	lslf	i1___ftmul@f2,f
 13006  1389  0DA4               	rlf	i1___ftmul@f2+1,f
 13007  138A  0DA5               	rlf	i1___ftmul@f2+2,f
 13008  138B  0BAA               	decfsz	i1___ftmul@cntr,f
 13009  138C  2B81               	goto	i1l5859
 13010  138D  3009               	movlw	9
 13011  138E  00AA               	movwf	i1___ftmul@cntr
 13012  138F                     i1l5871:	
 13013  138F  1C20               	btfss	i1___ftmul@f1,0
 13014  1390  2B93               	goto	i1l5875
 13015  1391  244F  3192         	fcall	PL140	;call to abstracted procedure
 13016  1393                     i1l5875:	
 13017  1393  36A2               	lsrf	i1___ftmul@f1+2,f
 13018  1394  0CA1               	rrf	i1___ftmul@f1+1,f
 13019  1395  0CA0               	rrf	i1___ftmul@f1,f
 13020  1396  36A9               	lsrf	i1___ftmul@f3_as_product+2,f
 13021  1397  0CA8               	rrf	i1___ftmul@f3_as_product+1,f
 13022  1398  0CA7               	rrf	i1___ftmul@f3_as_product,f
 13023  1399  0BAA               	decfsz	i1___ftmul@cntr,f
 13024  139A  2B8F               	goto	i1l5871
 13025  139B  0827               	movf	i1___ftmul@f3_as_product,w
 13026  139C  00F0               	movwf	i1___ftpack@arg
 13027  139D  0828               	movf	i1___ftmul@f3_as_product+1,w
 13028  139E  00F1               	movwf	i1___ftpack@arg+1
 13029  139F  0829               	movf	i1___ftmul@f3_as_product+2,w
 13030  13A0  00F2               	movwf	i1___ftpack@arg+2
 13031  13A1  0826               	movf	i1___ftmul@exp,w
 13032  13A2  00F3               	movwf	i1___ftpack@exp
 13033  13A3  082B               	movf	i1___ftmul@sign,w
 13034  13A4  00F4               	movwf	i1___ftpack@sign
 13035  13A5  23AE               	fcall	i1___ftpack
 13036  13A6  0870               	movf	?i1___ftpack,w
 13037  13A7  0020               	movlb	0	; select bank0
 13038  13A8  00A0               	movwf	?i1___ftmul
 13039  13A9  0871               	movf	?i1___ftpack+1,w
 13040  13AA  00A1               	movwf	?i1___ftmul+1
 13041  13AB  0872               	movf	?i1___ftpack+2,w
 13042  13AC  00A2               	movwf	?i1___ftmul+2
 13043  13AD  0008               	return
 13044  13AE                     __end_ofi1___ftmul:	
 13045  13AE                     __ptext68:	
 13046 ;; *************** function i1___ftpack *****************
 13047 ;; Defined at:
 13048 ;;		line 62 in file "D:\Program Files\Microchip\xc8\v1.41\sources\common\float.c"
 13049 ;; Parameters:    Size  Location     Type
 13050 ;;  arg             3    0[COMMON] unsigned um
 13051 ;;  exp             1    3[COMMON] unsigned char 
 13052 ;;  sign            1    4[COMMON] unsigned char 
 13053 ;; Auto vars:     Size  Location     Type
 13054 ;;		None
 13055 ;; Return value:  Size  Location     Type
 13056 ;;                  3    0[COMMON] float 
 13057 ;; Registers used:
 13058 ;;		wreg, status,2, status,0
 13059 ;; Tracked objects:
 13060 ;;		On entry : 1C/3
 13061 ;;		On exit  : 1C/0
 13062 ;;		Unchanged: 1C/0
 13063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13064 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13066 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13067 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13068 ;;Total ram usage:        8 bytes
 13069 ;; Hardware stack levels used:    1
 13070 ;; This function calls:
 13071 ;;		Nothing
 13072 ;; This function is called by:
 13073 ;;		i1___ftmul
 13074 ;;		i1___lwtoft
 13075 ;; This function uses a non-reentrant model
 13076 ;;
 13077                           
 13078                           
 13079                           ;psect for function i1___ftpack
 13080  13AE                     i1___ftpack:	
 13081                           
 13082                           ;incstack = 0
 13083                           ; Regs used in i1___ftpack: [wreg+status,2+status,0]
 13084  13AE  0873               	movf	i1___ftpack@exp,w
 13085  13AF  1903               	btfsc	3,2
 13086  13B0  2BB6               	goto	i1l1181
 13087  13B1  0872               	movf	i1___ftpack@arg+2,w
 13088  13B2  0471               	iorwf	i1___ftpack@arg+1,w
 13089  13B3  0470               	iorwf	i1___ftpack@arg,w
 13090  13B4  1D03               	skipz
 13091  13B5  2BBE               	goto	i1l4511
 13092  13B6                     i1l1181:	
 13093  13B6  01F0               	clrf	?i1___ftpack
 13094  13B7  01F1               	clrf	?i1___ftpack+1
 13095  13B8  01F2               	clrf	?i1___ftpack+2
 13096  13B9  0008               	return
 13097  13BA                     i1l4509:	
 13098  13BA  0AF3               	incf	i1___ftpack@exp,f
 13099  13BB  36F2               	lsrf	i1___ftpack@arg+2,f
 13100  13BC  0CF1               	rrf	i1___ftpack@arg+1,f
 13101  13BD  0CF0               	rrf	i1___ftpack@arg,f
 13102  13BE                     i1l4511:	
 13103  13BE  30FE               	movlw	254
 13104  13BF  0572               	andwf	i1___ftpack@arg+2,w
 13105  13C0  1903               	btfsc	3,2
 13106  13C1  2BCC               	goto	i1l4515
 13107  13C2  2BBA               	goto	i1l4509
 13108  13C3                     i1l4513:	
 13109  13C3  0AF3               	incf	i1___ftpack@exp,f
 13110  13C4  0AF0               	incf	i1___ftpack@arg,f
 13111  13C5  1903               	skipnz
 13112  13C6  0AF1               	incf	i1___ftpack@arg+1,f
 13113  13C7  1903               	skipnz
 13114  13C8  0AF2               	incf	i1___ftpack@arg+2,f
 13115  13C9  36F2               	lsrf	i1___ftpack@arg+2,f
 13116  13CA  0CF1               	rrf	i1___ftpack@arg+1,f
 13117  13CB  0CF0               	rrf	i1___ftpack@arg,f
 13118  13CC                     i1l4515:	
 13119  13CC  30FF               	movlw	255
 13120  13CD  0572               	andwf	i1___ftpack@arg+2,w
 13121  13CE  1903               	btfsc	3,2
 13122  13CF  2BD9               	goto	i1l4519
 13123  13D0  2BC3               	goto	i1l4513
 13124  13D1                     i1l4521:	
 13125  13D1  3002               	movlw	2
 13126  13D2  0273               	subwf	i1___ftpack@exp,w
 13127  13D3  1C03               	btfss	3,0
 13128  13D4  2BDB               	goto	i1l1193
 13129  13D5  03F3               	decf	i1___ftpack@exp,f
 13130  13D6  35F0               	lslf	i1___ftpack@arg,f
 13131  13D7  0DF1               	rlf	i1___ftpack@arg+1,f
 13132  13D8  0DF2               	rlf	i1___ftpack@arg+2,f
 13133  13D9                     i1l4519:	
 13134  13D9  1FF1               	btfss	i1___ftpack@arg+1,7
 13135  13DA  2BD1               	goto	i1l4521
 13136  13DB                     i1l1193:	
 13137  13DB  1C73               	btfss	i1___ftpack@exp,0
 13138  13DC  13F1               	bcf	i1___ftpack@arg+1,7
 13139  13DD  36F3               	lsrf	i1___ftpack@exp,f
 13140  13DE  0873               	movf	i1___ftpack@exp,w
 13141  13DF  00F7               	movwf	??i1___ftpack+2
 13142  13E0  01F6               	clrf	??i1___ftpack+1
 13143  13E1  01F5               	clrf	??i1___ftpack
 13144  13E2  0875               	movf	??i1___ftpack,w
 13145  13E3  04F0               	iorwf	i1___ftpack@arg,f
 13146  13E4  0876               	movf	??i1___ftpack+1,w
 13147  13E5  04F1               	iorwf	i1___ftpack@arg+1,f
 13148  13E6  0877               	movf	??i1___ftpack+2,w
 13149  13E7  04F2               	iorwf	i1___ftpack@arg+2,f
 13150  13E8  0874               	movf	i1___ftpack@sign,w
 13151  13E9  1D03               	btfss	3,2
 13152  13EA  17F2               	bsf	i1___ftpack@arg+2,7
 13153  13EB  0008               	return
 13154  13EC                     __end_ofi1___ftpack:	
 13155  13EC                     __ptext61:	
 13156 ;; *************** function i1_updatePWM *****************
 13157 ;; Defined at:
 13158 ;;		line 8 in file "src/led.c"
 13159 ;; Parameters:    Size  Location     Type
 13160 ;;		None
 13161 ;; Auto vars:     Size  Location     Type
 13162 ;;		None
 13163 ;; Return value:  Size  Location     Type
 13164 ;;                  1    wreg      void 
 13165 ;; Registers used:
 13166 ;;		wreg, status,2, status,0, pclath, cstack
 13167 ;; Tracked objects:
 13168 ;;		On entry : 18/0
 13169 ;;		On exit  : 1F/6
 13170 ;;		Unchanged: 0/0
 13171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13175 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13176 ;;Total ram usage:        0 bytes
 13177 ;; Hardware stack levels used:    1
 13178 ;; Hardware stack levels required when called:    1
 13179 ;; This function calls:
 13180 ;;		i1_PWM1_LoadDutyValue
 13181 ;;		i1_PWM2_LoadDutyValue
 13182 ;;		i1_PWM3_LoadDutyValue
 13183 ;;		i1_PWM4_LoadDutyValue
 13184 ;; This function is called by:
 13185 ;;		_updateLed
 13186 ;;		_ledSunrs
 13187 ;;		_ledDynamic
 13188 ;; This function uses a non-reentrant model
 13189 ;;
 13190                           
 13191                           
 13192                           ;psect for function i1_updatePWM
 13193  13EC                     i1_updatePWM:	
 13194                           
 13195                           ;led.c: 10: PWM1_LoadDutyValue(gLedRunPara.nCurrentBrt[0]);
 13196                           
 13197                           ;incstack = 0
 13198                           ; Regs used in i1_updatePWM: [wreg+status,2+status,0+pclath+cstack]
 13199  13EC  0020               	movlb	0	; select bank0
 13200  13ED  0857               	movf	_gLedRunPara+14,w	;volatile
 13201  13EE  00F1               	movwf	i1PWM1_LoadDutyValue@dutyValue+1
 13202  13EF  0856               	movf	_gLedRunPara+13,w	;volatile
 13203  13F0  00F0               	movwf	i1PWM1_LoadDutyValue@dutyValue
 13204  13F1  2408  3192         	fcall	i1_PWM1_LoadDutyValue
 13205                           
 13206                           ;led.c: 11: PWM2_LoadDutyValue(gLedRunPara.nCurrentBrt[1]);
 13207  13F3  0020               	movlb	0	; select bank0
 13208  13F4  0859               	movf	_gLedRunPara+16,w	;volatile
 13209  13F5  00F1               	movwf	i1PWM2_LoadDutyValue@dutyValue+1
 13210  13F6  0858               	movf	_gLedRunPara+15,w	;volatile
 13211  13F7  00F0               	movwf	i1PWM2_LoadDutyValue@dutyValue
 13212  13F8  2415  3192         	fcall	i1_PWM2_LoadDutyValue
 13213                           
 13214                           ;led.c: 12: PWM3_LoadDutyValue(gLedRunPara.nCurrentBrt[2]);
 13215  13FA  0020               	movlb	0	; select bank0
 13216  13FB  085B               	movf	_gLedRunPara+18,w	;volatile
 13217  13FC  00F1               	movwf	i1PWM3_LoadDutyValue@dutyValue+1
 13218  13FD  085A               	movf	_gLedRunPara+17,w	;volatile
 13219  13FE  00F0               	movwf	i1PWM3_LoadDutyValue@dutyValue
 13220  13FF  2422  3192         	fcall	i1_PWM3_LoadDutyValue
 13221                           
 13222                           ;led.c: 13: PWM4_LoadDutyValue(gLedRunPara.nCurrentBrt[3]);
 13223  1401  0020               	movlb	0	; select bank0
 13224  1402  085D               	movf	_gLedRunPara+20,w	;volatile
 13225  1403  00F1               	movwf	i1PWM4_LoadDutyValue@dutyValue+1
 13226  1404  085C               	movf	_gLedRunPara+19,w	;volatile
 13227  1405  00F0               	movwf	i1PWM4_LoadDutyValue@dutyValue
 13228  1406  242F               	fcall	i1_PWM4_LoadDutyValue
 13229  1407  0008               	return
 13230  1408                     __end_ofi1_updatePWM:	
 13231  1408                     __ptext65:	
 13232 ;; *************** function i1_PWM1_LoadDutyValue *****************
 13233 ;; Defined at:
 13234 ;;		line 21 in file "src/pwm.c"
 13235 ;; Parameters:    Size  Location     Type
 13236 ;;  dutyValue       2    0[COMMON] unsigned int 
 13237 ;; Auto vars:     Size  Location     Type
 13238 ;;		None
 13239 ;; Return value:  Size  Location     Type
 13240 ;;                  1    wreg      void 
 13241 ;; Registers used:
 13242 ;;		wreg
 13243 ;; Tracked objects:
 13244 ;;		On entry : 1F/0
 13245 ;;		On exit  : 1F/5
 13246 ;;		Unchanged: 0/0
 13247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13248 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13251 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13252 ;;Total ram usage:        2 bytes
 13253 ;; Hardware stack levels used:    1
 13254 ;; This function calls:
 13255 ;;		Nothing
 13256 ;; This function is called by:
 13257 ;;		i1_updatePWM
 13258 ;; This function uses a non-reentrant model
 13259 ;;
 13260                           
 13261                           
 13262                           ;psect for function i1_PWM1_LoadDutyValue
 13263  1408                     i1_PWM1_LoadDutyValue:	
 13264                           
 13265                           ;pwm.c: 23: dutyValue &= 0x03FF;
 13266                           
 13267                           ;incstack = 0
 13268                           ; Regs used in i1_PWM1_LoadDutyValue: [wreg]
 13269  1408  30FF               	movlw	255
 13270  1409  05F0               	andwf	i1PWM1_LoadDutyValue@dutyValue,f
 13271  140A  3003               	movlw	3
 13272  140B  05F1               	andwf	i1PWM1_LoadDutyValue@dutyValue+1,f
 13273                           
 13274                           ;pwm.c: 26: if(CCP1CONbits.CCP1FMT)
 13275  140C  0025               	movlb	5	; select bank5
 13276  140D  1E13               	btfss	19,4	;volatile
 13277  140E  2C14               	goto	i1l4479
 13278                           
 13279                           ;pwm.c: 27: {
 13280                           ;pwm.c: 28: dutyValue <<= 6;
 13281  140F  3006               	movlw	6
 13282  1410                     u342_25:	
 13283  1410  35F0               	lslf	i1PWM1_LoadDutyValue@dutyValue,f
 13284  1411  0DF1               	rlf	i1PWM1_LoadDutyValue@dutyValue+1,f
 13285  1412  0B89               	decfsz	9,f
 13286  1413  2C10               	goto	u342_25
 13287  1414                     i1l4479:	
 13288                           ;pwm.c: 29: CCPR1H = dutyValue >> 8;
 13289                           
 13290                           ;pwm.c: 30: CCPR1L = dutyValue;
 13291                           
 13292                           ;pwm.c: 31: }
 13293                           
 13294                           
 13295                           ;pwm.c: 32: else
 13296                           ;pwm.c: 33: {
 13297                           ;pwm.c: 34: CCPR1H = dutyValue >> 8;
 13298                           
 13299                           ;pwm.c: 35: CCPR1L = dutyValue;
 13300  1414  2C5B               	ljmp	PL168	;call to abstracted procedure
 13301  1415                     __end_ofi1_PWM1_LoadDutyValue:	
 13302  1415                     __ptext64:	
 13303 ;; *************** function i1_PWM2_LoadDutyValue *****************
 13304 ;; Defined at:
 13305 ;;		line 56 in file "src/pwm.c"
 13306 ;; Parameters:    Size  Location     Type
 13307 ;;  dutyValue       2    0[COMMON] unsigned int 
 13308 ;; Auto vars:     Size  Location     Type
 13309 ;;		None
 13310 ;; Return value:  Size  Location     Type
 13311 ;;                  1    wreg      void 
 13312 ;; Registers used:
 13313 ;;		wreg
 13314 ;; Tracked objects:
 13315 ;;		On entry : 1F/0
 13316 ;;		On exit  : 1F/5
 13317 ;;		Unchanged: 0/0
 13318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13319 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13322 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13323 ;;Total ram usage:        2 bytes
 13324 ;; Hardware stack levels used:    1
 13325 ;; This function calls:
 13326 ;;		Nothing
 13327 ;; This function is called by:
 13328 ;;		i1_updatePWM
 13329 ;; This function uses a non-reentrant model
 13330 ;;
 13331                           
 13332                           
 13333                           ;psect for function i1_PWM2_LoadDutyValue
 13334  1415                     i1_PWM2_LoadDutyValue:	
 13335                           
 13336                           ;pwm.c: 58: dutyValue &= 0x03FF;
 13337                           
 13338                           ;incstack = 0
 13339                           ; Regs used in i1_PWM2_LoadDutyValue: [wreg]
 13340  1415  30FF               	movlw	255
 13341  1416  05F0               	andwf	i1PWM2_LoadDutyValue@dutyValue,f
 13342  1417  3003               	movlw	3
 13343  1418  05F1               	andwf	i1PWM2_LoadDutyValue@dutyValue+1,f
 13344                           
 13345                           ;pwm.c: 61: if(CCP2CONbits.CCP2FMT)
 13346  1419  0025               	movlb	5	; select bank5
 13347  141A  1E17               	btfss	23,4	;volatile
 13348  141B  2C21               	goto	i1l4487
 13349                           
 13350                           ;pwm.c: 62: {
 13351                           ;pwm.c: 63: dutyValue <<= 6;
 13352  141C  3006               	movlw	6
 13353  141D                     u344_25:	
 13354  141D  35F0               	lslf	i1PWM2_LoadDutyValue@dutyValue,f
 13355  141E  0DF1               	rlf	i1PWM2_LoadDutyValue@dutyValue+1,f
 13356  141F  0B89               	decfsz	9,f
 13357  1420  2C1D               	goto	u344_25
 13358  1421                     i1l4487:	
 13359                           ;pwm.c: 64: CCPR2H = dutyValue >> 8;
 13360                           
 13361                           ;pwm.c: 65: CCPR2L = dutyValue;
 13362                           
 13363                           ;pwm.c: 66: }
 13364                           
 13365                           
 13366                           ;pwm.c: 67: else
 13367                           ;pwm.c: 68: {
 13368                           ;pwm.c: 69: CCPR2H = dutyValue >> 8;
 13369                           
 13370                           ;pwm.c: 70: CCPR2L = dutyValue;
 13371  1421  2C65               	ljmp	PL172	;call to abstracted procedure
 13372  1422                     __end_ofi1_PWM2_LoadDutyValue:	
 13373  1422                     __ptext63:	
 13374 ;; *************** function i1_PWM3_LoadDutyValue *****************
 13375 ;; Defined at:
 13376 ;;		line 91 in file "src/pwm.c"
 13377 ;; Parameters:    Size  Location     Type
 13378 ;;  dutyValue       2    0[COMMON] unsigned int 
 13379 ;; Auto vars:     Size  Location     Type
 13380 ;;		None
 13381 ;; Return value:  Size  Location     Type
 13382 ;;                  1    wreg      void 
 13383 ;; Registers used:
 13384 ;;		wreg
 13385 ;; Tracked objects:
 13386 ;;		On entry : 1F/0
 13387 ;;		On exit  : 1F/6
 13388 ;;		Unchanged: 0/0
 13389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13390 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13393 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13394 ;;Total ram usage:        2 bytes
 13395 ;; Hardware stack levels used:    1
 13396 ;; This function calls:
 13397 ;;		Nothing
 13398 ;; This function is called by:
 13399 ;;		i1_updatePWM
 13400 ;; This function uses a non-reentrant model
 13401 ;;
 13402                           
 13403                           
 13404                           ;psect for function i1_PWM3_LoadDutyValue
 13405  1422                     i1_PWM3_LoadDutyValue:	
 13406                           
 13407                           ;pwm.c: 93: dutyValue &= 0x03FF;
 13408                           
 13409                           ;incstack = 0
 13410                           ; Regs used in i1_PWM3_LoadDutyValue: [wreg]
 13411  1422  30FF               	movlw	255
 13412  1423  05F0               	andwf	i1PWM3_LoadDutyValue@dutyValue,f
 13413  1424  3003               	movlw	3
 13414  1425  05F1               	andwf	i1PWM3_LoadDutyValue@dutyValue+1,f
 13415                           
 13416                           ;pwm.c: 96: if(CCP3CONbits.CCP3FMT)
 13417  1426  0026               	movlb	6	; select bank6
 13418  1427  1E13               	btfss	19,4	;volatile
 13419  1428  2C2E               	goto	i1l4495
 13420                           
 13421                           ;pwm.c: 97: {
 13422                           ;pwm.c: 98: dutyValue <<= 6;
 13423  1429  3006               	movlw	6
 13424  142A                     u346_25:	
 13425  142A  35F0               	lslf	i1PWM3_LoadDutyValue@dutyValue,f
 13426  142B  0DF1               	rlf	i1PWM3_LoadDutyValue@dutyValue+1,f
 13427  142C  0B89               	decfsz	9,f
 13428  142D  2C2A               	goto	u346_25
 13429  142E                     i1l4495:	
 13430                           ;pwm.c: 99: CCPR3H = dutyValue >> 8;
 13431                           
 13432                           ;pwm.c: 100: CCPR3L = dutyValue;
 13433                           
 13434                           ;pwm.c: 101: }
 13435                           
 13436                           
 13437                           ;pwm.c: 102: else
 13438                           ;pwm.c: 103: {
 13439                           ;pwm.c: 104: CCPR3H = dutyValue >> 8;
 13440                           
 13441                           ;pwm.c: 105: CCPR3L = dutyValue;
 13442  142E  2C60               	ljmp	PL170	;call to abstracted procedure
 13443  142F                     __end_ofi1_PWM3_LoadDutyValue:	
 13444  142F                     __ptext62:	
 13445 ;; *************** function i1_PWM4_LoadDutyValue *****************
 13446 ;; Defined at:
 13447 ;;		line 126 in file "src/pwm.c"
 13448 ;; Parameters:    Size  Location     Type
 13449 ;;  dutyValue       2    0[COMMON] unsigned int 
 13450 ;; Auto vars:     Size  Location     Type
 13451 ;;		None
 13452 ;; Return value:  Size  Location     Type
 13453 ;;                  1    wreg      void 
 13454 ;; Registers used:
 13455 ;;		wreg
 13456 ;; Tracked objects:
 13457 ;;		On entry : 1F/0
 13458 ;;		On exit  : 1F/6
 13459 ;;		Unchanged: 0/0
 13460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13461 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13464 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13465 ;;Total ram usage:        2 bytes
 13466 ;; Hardware stack levels used:    1
 13467 ;; This function calls:
 13468 ;;		Nothing
 13469 ;; This function is called by:
 13470 ;;		i1_updatePWM
 13471 ;; This function uses a non-reentrant model
 13472 ;;
 13473                           
 13474                           
 13475                           ;psect for function i1_PWM4_LoadDutyValue
 13476  142F                     i1_PWM4_LoadDutyValue:	
 13477                           
 13478                           ;pwm.c: 128: dutyValue &= 0x03FF;
 13479                           
 13480                           ;incstack = 0
 13481                           ; Regs used in i1_PWM4_LoadDutyValue: [wreg]
 13482  142F  30FF               	movlw	255
 13483  1430  05F0               	andwf	i1PWM4_LoadDutyValue@dutyValue,f
 13484  1431  3003               	movlw	3
 13485  1432  05F1               	andwf	i1PWM4_LoadDutyValue@dutyValue+1,f
 13486                           
 13487                           ;pwm.c: 131: if(CCP4CONbits.CCP4FMT)
 13488  1433  0026               	movlb	6	; select bank6
 13489  1434  1E17               	btfss	23,4	;volatile
 13490  1435  2C3B               	goto	i1l4503
 13491                           
 13492                           ;pwm.c: 132: {
 13493                           ;pwm.c: 133: dutyValue <<= 6;
 13494  1436  3006               	movlw	6
 13495  1437                     u348_25:	
 13496  1437  35F0               	lslf	i1PWM4_LoadDutyValue@dutyValue,f
 13497  1438  0DF1               	rlf	i1PWM4_LoadDutyValue@dutyValue+1,f
 13498  1439  0B89               	decfsz	9,f
 13499  143A  2C37               	goto	u348_25
 13500  143B                     i1l4503:	
 13501                           ;pwm.c: 134: CCPR4H = dutyValue >> 8;
 13502                           
 13503                           ;pwm.c: 135: CCPR4L = dutyValue;
 13504                           
 13505                           ;pwm.c: 136: }
 13506                           
 13507                           
 13508                           ;pwm.c: 137: else
 13509                           ;pwm.c: 138: {
 13510                           ;pwm.c: 139: CCPR4H = dutyValue >> 8;
 13511                           
 13512                           ;pwm.c: 140: CCPR4L = dutyValue;
 13513  143B  2C56               	ljmp	PL160	;call to abstracted procedure
 13514  143C                     __end_ofi1_PWM4_LoadDutyValue:	
 13515  143C                     PL88:	
 13516  143C  00BC               	movwf	??_ledSunrs+3
 13517  143D  353F               	lslf	ledSunrs@i,w
 13518  143E  3E56               	addlw	(low ((_gLedRunPara| 0+13)))& (0+255)
 13519  143F  0086               	movwf	6
 13520  1440  0187               	clrf	7
 13521  1441  083B               	movf	??_ledSunrs+2,w
 13522  1442  3FC0               	movwi [0]fsr1
 13523  1443  083C               	movf	??_ledSunrs+3,w
 13524  1444  3FC1               	movwi [1]fsr1
 13525  1445  0008               	return
 13526  1446                     __end_ofPL88:	
 13527  1446                     PL110:	
 13528  1446  0086               	movwf	6
 13529  1447  3001               	movlw	1	; select bank3/4
 13530  1448  0087               	movwf	7
 13531  1449  3F40               	moviw [0]fsr1
 13532  144A  00B9               	movwf	??_ledSunrs
 13533  144B  3F41               	moviw [1]fsr1
 13534  144C  00BA               	movwf	??_ledSunrs+1
 13535  144D  083D               	movf	ledSunrs@temp,w
 13536  144E  0008               	return
 13537  144F                     __end_ofPL110:	
 13538  144F                     PL140:	
 13539  144F  0823               	movf	i1___ftmul@f2,w
 13540  1450  07A7               	addwf	i1___ftmul@f3_as_product,f
 13541  1451  0824               	movf	i1___ftmul@f2+1,w
 13542  1452  3DA8               	addwfc	i1___ftmul@f3_as_product+1,f
 13543  1453  0825               	movf	i1___ftmul@f2+2,w
 13544  1454  3DA9               	addwfc	i1___ftmul@f3_as_product+2,f
 13545  1455  0008               	return
 13546  1456                     __end_ofPL140:	
 13547  1456                     PL160:	
 13548  1456  0871               	movf	i1PWM4_LoadDutyValue@dutyValue+1,w
 13549  1457  0096               	movwf	22	;volatile
 13550  1458  0870               	movf	i1PWM4_LoadDutyValue@dutyValue,w
 13551  1459  0095               	movwf	21	;volatile
 13552  145A  0008               	return
 13553  145B                     __end_ofPL160:	
 13554  145B                     PL168:	
 13555  145B  0871               	movf	i1PWM1_LoadDutyValue@dutyValue+1,w
 13556  145C  0092               	movwf	18	;volatile
 13557  145D  0870               	movf	i1PWM1_LoadDutyValue@dutyValue,w
 13558  145E  0091               	movwf	17	;volatile
 13559  145F  0008               	return
 13560  1460                     __end_ofPL168:	
 13561  1460                     PL170:	
 13562  1460  0871               	movf	i1PWM3_LoadDutyValue@dutyValue+1,w
 13563  1461  0092               	movwf	18	;volatile
 13564  1462  0870               	movf	i1PWM3_LoadDutyValue@dutyValue,w
 13565  1463  0091               	movwf	17	;volatile
 13566  1464  0008               	return
 13567  1465                     __end_ofPL170:	
 13568  1465                     PL172:	
 13569  1465  0871               	movf	i1PWM2_LoadDutyValue@dutyValue+1,w
 13570  1466  0096               	movwf	22	;volatile
 13571  1467  0870               	movf	i1PWM2_LoadDutyValue@dutyValue,w
 13572  1468  0095               	movwf	21	;volatile
 13573  1469  0008               	return
 13574  146A                     __end_ofPL172:	
 13575  146A                     PL184:	
 13576  146A  01A0               	clrf	?i1___ftmul
 13577  146B  01A1               	clrf	?i1___ftmul+1
 13578  146C  01A2               	clrf	?i1___ftmul+2
 13579  146D  0008               	return
 13580  146E                     __end_ofPL184:	
 13581                           
 13582                           	psect	text56
 13583  1D08                     __ptext56:	
 13584 ;; *************** function _runRTC *****************
 13585 ;; Defined at:
 13586 ;;		line 52 in file "src/rtc.c"
 13587 ;; Parameters:    Size  Location     Type
 13588 ;;		None
 13589 ;; Auto vars:     Size  Location     Type
 13590 ;;		None
 13591 ;; Return value:  Size  Location     Type
 13592 ;;                  1    wreg      void 
 13593 ;; Registers used:
 13594 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13595 ;; Tracked objects:
 13596 ;;		On entry : 1F/0
 13597 ;;		On exit  : 1F/0
 13598 ;;		Unchanged: 0/0
 13599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13604 ;;Total ram usage:        0 bytes
 13605 ;; Hardware stack levels used:    1
 13606 ;; Hardware stack levels required when called:    2
 13607 ;; This function calls:
 13608 ;;		_checkIsYearLeap
 13609 ;; This function is called by:
 13610 ;;		_INTERRUPT_interruptManager
 13611 ;; This function uses a non-reentrant model
 13612 ;;
 13613                           
 13614                           
 13615                           ;psect for function _runRTC
 13616  1D08                     _runRTC:	
 13617                           
 13618                           ;rtc.c: 54: gCurrentTime.datetime.second++;
 13619                           
 13620                           ;incstack = 0
 13621                           ; Regs used in _runRTC: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13622  1D08  0AC6               	incf	_gCurrentTime+6,f	;volatile
 13623                           
 13624                           ;rtc.c: 55: if (gCurrentTime.datetime.second >= 60)
 13625  1D09  303C               	movlw	60
 13626  1D0A  0246               	subwf	_gCurrentTime+6,w	;volatile
 13627  1D0B  1C03               	skipc
 13628  1D0C  2D4C               	goto	i1l6545
 13629                           
 13630                           ;rtc.c: 56: {
 13631                           ;rtc.c: 57: gCurrentTime.datetime.second = 0;
 13632  1D0D  01C6               	clrf	_gCurrentTime+6	;volatile
 13633                           
 13634                           ;rtc.c: 58: gCurrentTime.datetime.minute++;
 13635  1D0E  0AC5               	incf	_gCurrentTime+5,f	;volatile
 13636                           
 13637                           ;rtc.c: 59: if (gCurrentTime.datetime.minute >= 60)
 13638  1D0F  303C               	movlw	60
 13639  1D10  0245               	subwf	_gCurrentTime+5,w	;volatile
 13640  1D11  1C03               	skipc
 13641  1D12  2D4C               	goto	i1l6545
 13642                           
 13643                           ;rtc.c: 60: {
 13644                           ;rtc.c: 61: gCurrentTime.datetime.minute = 0;
 13645  1D13  01C5               	clrf	_gCurrentTime+5	;volatile
 13646                           
 13647                           ;rtc.c: 62: gCurrentTime.datetime.hour++;
 13648  1D14  0AC4               	incf	_gCurrentTime+4,f	;volatile
 13649                           
 13650                           ;rtc.c: 63: if (gCurrentTime.datetime.hour >= 24)
 13651  1D15  3018               	movlw	24
 13652  1D16  0244               	subwf	_gCurrentTime+4,w	;volatile
 13653  1D17  1C03               	skipc
 13654  1D18  2D4C               	goto	i1l6545
 13655                           
 13656                           ;rtc.c: 64: {
 13657                           ;rtc.c: 65: gCurrentTime.datetime.hour = 0;
 13658  1D19  01C4               	clrf	_gCurrentTime+4	;volatile
 13659                           
 13660                           ;rtc.c: 66: gCurrentTime.datetime.day++;
 13661  1D1A  0AC2               	incf	_gCurrentTime+2,f	;volatile
 13662                           
 13663                           ;rtc.c: 67: gCurrentTime.datetime.wk++;
 13664  1D1B  0AC3               	incf	_gCurrentTime+3,f	;volatile
 13665                           
 13666                           ;rtc.c: 68: if (gCurrentTime.datetime.wk > 6)
 13667  1D1C  3007               	movlw	7
 13668  1D1D  0243               	subwf	_gCurrentTime+3,w	;volatile
 13669  1D1E  1803               	btfsc	3,0
 13670                           
 13671                           ;rtc.c: 69: {
 13672                           ;rtc.c: 70: gCurrentTime.datetime.wk = 0;
 13673  1D1F  01C3               	clrf	_gCurrentTime+3	;volatile
 13674                           
 13675                           ;rtc.c: 71: }
 13676                           ;rtc.c: 72: if (checkIsYearLeap(gCurrentTime.datetime.year+2000))
 13677  1D20  0840               	movf	_gCurrentTime,w	;volatile
 13678  1D21  00F5               	movwf	checkIsYearLeap@year
 13679  1D22  30D0               	movlw	208
 13680  1D23  01F6               	clrf	checkIsYearLeap@year+1
 13681  1D24  07F5               	addwf	checkIsYearLeap@year,f
 13682  1D25  3007               	movlw	7
 13683  1D26  3DF6               	addwfc	checkIsYearLeap@year+1,f
 13684  1D27  254E  319D         	fcall	_checkIsYearLeap
 13685  1D29  3A00               	xorlw	0
 13686  1D2A  1903               	skipnz
 13687  1D2B  2D2E               	goto	i1l6529
 13688                           
 13689                           ;rtc.c: 73: {
 13690                           ;rtc.c: 74: MONTH_DAY[1] = 29;
 13691  1D2C  301D               	movlw	29
 13692  1D2D  2D2F               	goto	L19
 13693  1D2E                     i1l6529:	
 13694                           ;rtc.c: 75: }
 13695                           
 13696                           
 13697                           ;rtc.c: 76: else
 13698                           ;rtc.c: 77: {
 13699                           ;rtc.c: 78: MONTH_DAY[1] = 28;
 13700  1D2E  301C               	movlw	28
 13701  1D2F                     L19:	
 13702  1D2F  0022               	movlb	2	; select bank2
 13703  1D30  00E4               	movwf	(_MONTH_DAY^(0+256)+1)
 13704                           
 13705                           ;rtc.c: 79: }
 13706                           ;rtc.c: 80: if (gCurrentTime.datetime.month <= 12 && gCurrentTime.datetime.month > 0)
 13707  1D31  300D               	movlw	13
 13708  1D32  0020               	movlb	0	; select bank0
 13709  1D33  0241               	subwf	_gCurrentTime+1,w	;volatile
 13710  1D34  1803               	skipnc
 13711  1D35  2D4C               	goto	i1l6545
 13712  1D36  0841               	movf	_gCurrentTime+1,w	;volatile
 13713  1D37  1903               	btfsc	3,2
 13714  1D38  2D4C               	goto	i1l6545
 13715                           
 13716                           ;rtc.c: 81: {
 13717                           ;rtc.c: 82: if (gCurrentTime.datetime.day > MONTH_DAY[gCurrentTime.datetime.month-1])
 13718  1D39  0841               	movf	_gCurrentTime+1,w	;volatile
 13719  1D3A  3E62               	addlw	(low ((_MONTH_DAY| (0+256)+255)))& (0+255)
 13720  1D3B  0086               	movwf	6
 13721  1D3C  3001               	movlw	1	; select bank2/3
 13722  1D3D  0087               	movwf	7
 13723  1D3E  0842               	movf	_gCurrentTime+2,w	;volatile
 13724  1D3F  0201               	subwf	1,w
 13725  1D40  1803               	skipnc
 13726  1D41  2D4C               	goto	i1l6545
 13727                           
 13728                           ;rtc.c: 83: {
 13729                           ;rtc.c: 84: gCurrentTime.datetime.day = 1;
 13730  1D42  3001               	movlw	1
 13731  1D43  00C2               	movwf	_gCurrentTime+2	;volatile
 13732                           
 13733                           ;rtc.c: 85: gCurrentTime.datetime.month++;
 13734  1D44  0AC1               	incf	_gCurrentTime+1,f	;volatile
 13735                           
 13736                           ;rtc.c: 86: if (gCurrentTime.datetime.month > 12)
 13737  1D45  300D               	movlw	13
 13738  1D46  0241               	subwf	_gCurrentTime+1,w	;volatile
 13739  1D47  1C03               	skipc
 13740  1D48  2D4C               	goto	i1l6545
 13741                           
 13742                           ;rtc.c: 87: {
 13743                           ;rtc.c: 88: gCurrentTime.datetime.month = 1;
 13744  1D49  3001               	movlw	1
 13745  1D4A  00C1               	movwf	_gCurrentTime+1	;volatile
 13746                           
 13747                           ;rtc.c: 89: gCurrentTime.datetime.year++;
 13748  1D4B  0AC0               	incf	_gCurrentTime,f	;volatile
 13749  1D4C                     i1l6545:	
 13750                           
 13751                           ;rtc.c: 90: }
 13752                           ;rtc.c: 91: }
 13753                           ;rtc.c: 92: }
 13754                           ;rtc.c: 93: }
 13755                           ;rtc.c: 94: }
 13756                           ;rtc.c: 95: }
 13757                           ;rtc.c: 96: gLedRunPara.fSec = 1;
 13758  1D4C  14C9               	bsf	_gLedRunPara,1	;volatile
 13759  1D4D  0008               	return
 13760  1D4E                     __end_of_runRTC:	
 13761  1D4E                     __ptext57:	
 13762 ;; *************** function _checkIsYearLeap *****************
 13763 ;; Defined at:
 13764 ;;		line 16 in file "src/rtc.c"
 13765 ;; Parameters:    Size  Location     Type
 13766 ;;  year            2    5[COMMON] unsigned int 
 13767 ;; Auto vars:     Size  Location     Type
 13768 ;;		None
 13769 ;; Return value:  Size  Location     Type
 13770 ;;                  1    wreg      unsigned char 
 13771 ;; Registers used:
 13772 ;;		wreg, status,2, status,0, pclath, cstack
 13773 ;; Tracked objects:
 13774 ;;		On entry : 1F/0
 13775 ;;		On exit  : 0/0
 13776 ;;		Unchanged: 0/0
 13777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13778 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13781 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13782 ;;Total ram usage:        2 bytes
 13783 ;; Hardware stack levels used:    1
 13784 ;; Hardware stack levels required when called:    1
 13785 ;; This function calls:
 13786 ;;		___lwmod
 13787 ;; This function is called by:
 13788 ;;		_runRTC
 13789 ;; This function uses a non-reentrant model
 13790 ;;
 13791                           
 13792                           
 13793                           ;psect for function _checkIsYearLeap
 13794  1D4E                     _checkIsYearLeap:	
 13795                           
 13796                           ;rtc.c: 18: if (year&0x03)
 13797                           
 13798                           ;incstack = 0
 13799                           ; Regs used in _checkIsYearLeap: [wreg+status,2+status,0+pclath+cstack]
 13800  1D4E  0875               	movf	checkIsYearLeap@year,w
 13801  1D4F  3903               	andlw	3
 13802  1D50  1903               	btfsc	3,2
 13803  1D51  3400               	retlw	0
 13804                           
 13805                           ;rtc.c: 19: {
 13806                           ;rtc.c: 20: if (year%100 == 0)
 13807  1D52  3064               	movlw	100
 13808  1D53  00F0               	movwf	___lwmod@divisor
 13809  1D54  01F1               	clrf	___lwmod@divisor+1
 13810  1D55  258A  319D         	fcall	PL182	;call to abstracted procedure
 13811  1D57  256A  319D         	fcall	___lwmod
 13812  1D59  0870               	movf	?___lwmod,w
 13813  1D5A  0471               	iorwf	?___lwmod+1,w
 13814  1D5B  1D03               	btfss	3,2
 13815  1D5C  3401               	retlw	1
 13816                           
 13817                           ;rtc.c: 21: {
 13818                           ;rtc.c: 22: if (year%400 == 0)
 13819  1D5D  3090               	movlw	144
 13820  1D5E  00F0               	movwf	___lwmod@divisor
 13821  1D5F  3001               	movlw	1
 13822  1D60  00F1               	movwf	___lwmod@divisor+1
 13823  1D61  258A  319D         	fcall	PL182	;call to abstracted procedure
 13824  1D63  256A  319D         	fcall	___lwmod
 13825  1D65  0870               	movf	?___lwmod,w
 13826  1D66  0471               	iorwf	?___lwmod+1,w
 13827  1D67  1903               	btfsc	3,2
 13828                           
 13829                           ;rtc.c: 23: {
 13830                           ;rtc.c: 24: return 1;
 13831  1D68  3401               	retlw	1
 13832                           
 13833                           ;rtc.c: 30: }
 13834                           ;rtc.c: 31: }
 13835                           ;rtc.c: 32: return 0;
 13836  1D69  3400               	retlw	0
 13837  1D6A                     __end_of_checkIsYearLeap:	
 13838  1D6A                     __ptext58:	
 13839 ;; *************** function ___lwmod *****************
 13840 ;; Defined at:
 13841 ;;		line 6 in file "D:\Program Files\Microchip\xc8\v1.41\sources\common\lwmod.c"
 13842 ;; Parameters:    Size  Location     Type
 13843 ;;  divisor         2    0[COMMON] unsigned int 
 13844 ;;  dividend        2    2[COMMON] unsigned int 
 13845 ;; Auto vars:     Size  Location     Type
 13846 ;;  counter         1    4[COMMON] unsigned char 
 13847 ;; Return value:  Size  Location     Type
 13848 ;;                  2    0[COMMON] unsigned int 
 13849 ;; Registers used:
 13850 ;;		wreg, status,2, status,0
 13851 ;; Tracked objects:
 13852 ;;		On entry : 0/0
 13853 ;;		On exit  : 0/0
 13854 ;;		Unchanged: 0/0
 13855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13856 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13857 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13859 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13860 ;;Total ram usage:        5 bytes
 13861 ;; Hardware stack levels used:    1
 13862 ;; This function calls:
 13863 ;;		Nothing
 13864 ;; This function is called by:
 13865 ;;		_checkIsYearLeap
 13866 ;; This function uses a non-reentrant model
 13867 ;;
 13868                           
 13869                           
 13870                           ;psect for function ___lwmod
 13871  1D6A                     ___lwmod:	
 13872                           
 13873                           ;incstack = 0
 13874                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 13875  1D6A  0870               	movf	___lwmod@divisor,w
 13876  1D6B  0471               	iorwf	___lwmod@divisor+1,w
 13877  1D6C  1903               	btfsc	3,2
 13878  1D6D  2D85               	goto	i1l4447
 13879  1D6E  01F4               	clrf	___lwmod@counter
 13880  1D6F                     L20:	
 13881  1D6F  0AF4               	incf	___lwmod@counter,f
 13882  1D70  1BF1               	btfsc	___lwmod@divisor+1,7
 13883  1D71  2D75               	goto	i1l4439
 13884  1D72  35F0               	lslf	___lwmod@divisor,f
 13885  1D73  0DF1               	rlf	___lwmod@divisor+1,f
 13886  1D74  2D6F               	goto	L20
 13887  1D75                     i1l4439:	
 13888  1D75  0871               	movf	___lwmod@divisor+1,w
 13889  1D76  0273               	subwf	___lwmod@dividend+1,w
 13890  1D77  1D03               	skipz
 13891  1D78  2D7B               	goto	u334_25
 13892  1D79  0870               	movf	___lwmod@divisor,w
 13893  1D7A  0272               	subwf	___lwmod@dividend,w
 13894  1D7B                     u334_25:	
 13895  1D7B  1C03               	skipc
 13896  1D7C  2D81               	goto	i1l4443
 13897  1D7D  0870               	movf	___lwmod@divisor,w
 13898  1D7E  02F2               	subwf	___lwmod@dividend,f
 13899  1D7F  0871               	movf	___lwmod@divisor+1,w
 13900  1D80  3BF3               	subwfb	___lwmod@dividend+1,f
 13901  1D81                     i1l4443:	
 13902  1D81  36F1               	lsrf	___lwmod@divisor+1,f
 13903  1D82  0CF0               	rrf	___lwmod@divisor,f
 13904  1D83  0BF4               	decfsz	___lwmod@counter,f
 13905  1D84  2D75               	goto	i1l4439
 13906  1D85                     i1l4447:	
 13907  1D85  0873               	movf	___lwmod@dividend+1,w
 13908  1D86  00F1               	movwf	?___lwmod+1
 13909  1D87  0872               	movf	___lwmod@dividend,w
 13910  1D88  00F0               	movwf	?___lwmod
 13911  1D89  0008               	return
 13912  1D8A                     __end_of___lwmod:	
 13913  1D8A                     PL182:	
 13914  1D8A  0876               	movf	checkIsYearLeap@year+1,w
 13915  1D8B  00F3               	movwf	___lwmod@dividend+1
 13916  1D8C  0875               	movf	checkIsYearLeap@year,w
 13917  1D8D  00F2               	movwf	___lwmod@dividend
 13918  1D8E  0008               	return
 13919  1D8F                     __end_ofPL182:	
 13920                           
 13921                           	psect	text60
 13922  0443                     __ptext60:	
 13923 ;; *************** function _ledDynamic *****************
 13924 ;; Defined at:
 13925 ;;		line 1052 in file "src/led.c"
 13926 ;; Parameters:    Size  Location     Type
 13927 ;;		None
 13928 ;; Auto vars:     Size  Location     Type
 13929 ;;  temp            2   29[BANK0 ] unsigned int 
 13930 ;;  i               1   31[BANK0 ] unsigned char 
 13931 ;; Return value:  Size  Location     Type
 13932 ;;                  1    wreg      void 
 13933 ;; Registers used:
 13934 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13935 ;; Tracked objects:
 13936 ;;		On entry : 1F/0
 13937 ;;		On exit  : 19/0
 13938 ;;		Unchanged: 0/0
 13939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13941 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13942 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13943 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13944 ;;Total ram usage:        7 bytes
 13945 ;; Hardware stack levels used:    1
 13946 ;; Hardware stack levels required when called:    2
 13947 ;; This function calls:
 13948 ;;		___fttol
 13949 ;;		_ledAllCOlor
 13950 ;;		_ledThunder_1
 13951 ;;		_ledThunder_2
 13952 ;;		_ledThunder_3
 13953 ;;		i1___ftmul
 13954 ;;		i1___lwtoft
 13955 ;;		i1_updatePWM
 13956 ;; This function is called by:
 13957 ;;		_INTERRUPT_interruptManager
 13958 ;; This function uses a non-reentrant model
 13959 ;;
 13960                           
 13961                           
 13962                           ;psect for function _ledDynamic
 13963  0443                     _ledDynamic:	
 13964                           
 13965                           ;led.c: 1054: unsigned char i;
 13966                           ;led.c: 1055: unsigned int temp;
 13967                           ;led.c: 1056: if ( gLedRunPara.fPause )
 13968                           
 13969                           ;incstack = 0
 13970                           ; Regs used in _ledDynamic: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13971  0443  1A49               	btfsc	_gLedRunPara,4	;volatile
 13972  0444  0008               	return
 13973                           
 13974                           ;led.c: 1059: }
 13975                           ;led.c: 1060: if ( gDynPara.num < gDynPara.cnt )
 13976  0445  0023               	movlb	3	; select bank3
 13977  0446  083E               	movf	((_gDynPara+1)^(0+384)+29),w	;volatile
 13978  0447  0241               	subwf	((_gDynPara+1)^(0+384)+32),w	;volatile
 13979  0448  1D03               	skipz
 13980  0449  2C4C               	goto	u541_25
 13981  044A  083D               	movf	(_gDynPara^(0+384)+29),w	;volatile
 13982  044B  0240               	subwf	(_gDynPara^(0+384)+32),w	;volatile
 13983  044C                     u541_25:	
 13984  044C  1803               	skipnc
 13985  044D  2C52               	goto	i1l6603
 13986                           
 13987                           ;led.c: 1061: {
 13988                           ;led.c: 1062: gDynPara.num++;
 13989  044E  0AC0               	incf	(_gDynPara^(0+384)+32),f	;volatile
 13990  044F  1903               	skipnz
 13991  0450  0AC1               	incf	((_gDynPara+1)^(0+384)+32),f	;volatile
 13992                           
 13993                           ;led.c: 1063: }
 13994  0451  2CAF               	goto	i1l6653
 13995  0452                     i1l6603:	
 13996                           
 13997                           ;led.c: 1064: else
 13998                           ;led.c: 1065: {
 13999                           ;led.c: 1066: gDynPara.num = 0;
 14000  0452  01C0               	clrf	(_gDynPara^(0+384)+32)	;volatile
 14001  0453  01C1               	clrf	((_gDynPara+1)^(0+384)+32)	;volatile
 14002                           
 14003                           ;led.c: 1068: switch ( gLedRunPara.fDynamic )
 14004  0454  2CA1               	goto	i1l6651
 14005  0455                     i1l6605:	
 14006                           
 14007                           ;led.c: 1071: gDynPara.state++;
 14008  0455  0023               	movlb	3	; select bank3
 14009  0456  0ABF               	incf	(_gDynPara^(0+384)+31),f	;volatile
 14010                           
 14011                           ;led.c: 1072: if ( gDynPara.state > 10 )
 14012  0457  300B               	movlw	11
 14013  0458  023F               	subwf	(_gDynPara^(0+384)+31),w	;volatile
 14014  0459  1C03               	skipc
 14015  045A  2C5D               	goto	i1l6611
 14016                           
 14017                           ;led.c: 1073: {
 14018                           ;led.c: 1074: gDynPara.state = 1;
 14019  045B  3001               	movlw	1
 14020  045C  00BF               	movwf	(_gDynPara^(0+384)+31)	;volatile
 14021  045D                     i1l6611:	
 14022                           
 14023                           ;led.c: 1075: }
 14024                           ;led.c: 1076: ledThunder_1();
 14025  045D  2542  3184         	fcall	_ledThunder_1
 14026                           
 14027                           ;led.c: 1077: break;
 14028  045F  2CAF               	goto	i1l6653
 14029  0460                     i1l6613:	
 14030                           
 14031                           ;led.c: 1079: gDynPara.state++;
 14032  0460  0023               	movlb	3	; select bank3
 14033  0461  0ABF               	incf	(_gDynPara^(0+384)+31),f	;volatile
 14034                           
 14035                           ;led.c: 1080: if ( gDynPara.state > 74 )
 14036  0462  304B               	movlw	75
 14037  0463  023F               	subwf	(_gDynPara^(0+384)+31),w	;volatile
 14038  0464  1803               	btfsc	3,0
 14039                           
 14040                           ;led.c: 1081: {
 14041                           ;led.c: 1082: gDynPara.state = 0;
 14042  0465  01BF               	clrf	(_gDynPara^(0+384)+31)	;volatile
 14043                           
 14044                           ;led.c: 1083: }
 14045                           ;led.c: 1084: ledThunder_2();
 14046  0466  259B  3184         	fcall	_ledThunder_2
 14047                           
 14048                           ;led.c: 1085: break;
 14049  0468  2CAF               	goto	i1l6653
 14050  0469                     i1l6621:	
 14051                           
 14052                           ;led.c: 1087: gDynPara.state++;
 14053  0469  0023               	movlb	3	; select bank3
 14054  046A  0ABF               	incf	(_gDynPara^(0+384)+31),f	;volatile
 14055                           
 14056                           ;led.c: 1088: if ( gDynPara.state > 16 )
 14057  046B  3011               	movlw	17
 14058  046C  023F               	subwf	(_gDynPara^(0+384)+31),w	;volatile
 14059  046D  1803               	btfsc	3,0
 14060                           
 14061                           ;led.c: 1089: {
 14062                           ;led.c: 1090: gDynPara.state = 0;
 14063  046E  01BF               	clrf	(_gDynPara^(0+384)+31)	;volatile
 14064                           
 14065                           ;led.c: 1091: }
 14066                           ;led.c: 1092: ledThunder_3();
 14067  046F  3190  20AF  3184   	fcall	_ledThunder_3
 14068                           
 14069                           ;led.c: 1093: break;
 14070  0472  2CAF               	goto	i1l6653
 14071  0473                     i1l6629:	
 14072                           
 14073                           ;led.c: 1095: gDynPara.state++;
 14074  0473  0023               	movlb	3	; select bank3
 14075  0474  0ABF               	incf	(_gDynPara^(0+384)+31),f	;volatile
 14076                           
 14077                           ;led.c: 1096: if ( gDynPara.state > 4 )
 14078  0475  3005               	movlw	5
 14079  0476  023F               	subwf	(_gDynPara^(0+384)+31),w	;volatile
 14080  0477  1803               	btfsc	3,0
 14081                           
 14082                           ;led.c: 1097: gDynPara.state = 0;
 14083  0478  01BF               	clrf	(_gDynPara^(0+384)+31)	;volatile
 14084                           
 14085                           ;led.c: 1098: ledAllCOlor();
 14086  0479  2672  3184         	fcall	_ledAllCOlor
 14087                           
 14088                           ;led.c: 1099: break;
 14089  047B  2CAF               	goto	i1l6653
 14090  047C                     i1l690:	
 14091  047C                     i1l6637:	
 14092                           
 14093                           ;led.c: 1101: case 6:
 14094                           ;led.c: 1102: case 7:
 14095                           ;led.c: 1103: case 8:
 14096                           ;led.c: 1104: case 9:
 14097                           ;led.c: 1105: case 10:
 14098                           ;led.c: 1106: case 11:
 14099                           ;led.c: 1107: for ( i = 0; i < 4; i++ )
 14100  047C  01BF               	clrf	ledDynamic@i
 14101  047D                     i1l6643:	
 14102                           
 14103                           ;led.c: 1108: {
 14104                           ;led.c: 1109: if ( gDynPara.fDyn & ( 1 << i ) )
 14105  047D  0023               	movlb	3	; select bank3
 14106  047E  0820               	movf	_gDynPara^(0+384),w	;volatile
 14107  047F  271B  3184         	fcall	PL30	;call to abstracted procedure
 14108  0481  1903               	btfsc	3,2
 14109  0482  2C9A               	goto	i1l6647
 14110                           
 14111                           ;led.c: 1110: {
 14112                           ;led.c: 1111: gDynPara.fBrt ^= ( 1 << i );
 14113  0483  3001               	movlw	1
 14114  0484  00B9               	movwf	??_ledDynamic
 14115  0485  0A3F               	incf	ledDynamic@i,w
 14116  0486  2C88               	goto	u548_24
 14117  0487                     u548_25:	
 14118  0487  35B9               	lslf	??_ledDynamic,f
 14119  0488                     u548_24:	
 14120  0488  0B89               	decfsz	9,f
 14121  0489  2C87               	goto	u548_25
 14122  048A  0023               	movlb	3	; select bank3
 14123  048B  0E20               	swapf	_gDynPara^(0+384),w	;volatile
 14124  048C  390F               	andlw	15
 14125  048D  0020               	movlb	0	; select bank0
 14126  048E  00BA               	movwf	??_ledDynamic+1
 14127  048F  0839               	movf	??_ledDynamic,w
 14128  0490  06BA               	xorwf	??_ledDynamic+1,f
 14129  0491  0EBA               	swapf	??_ledDynamic+1,f
 14130  0492  0023               	movlb	3	; select bank3
 14131  0493  0820               	movf	_gDynPara^(0+384),w	;volatile
 14132  0494  0020               	movlb	0	; select bank0
 14133  0495  063A               	xorwf	??_ledDynamic+1,w
 14134  0496  390F               	andlw	-241
 14135  0497  063A               	xorwf	??_ledDynamic+1,w
 14136  0498  0023               	movlb	3	; select bank3
 14137  0499  00A0               	movwf	_gDynPara^(0+384)	;volatile
 14138  049A                     i1l6647:	
 14139  049A  0020               	movlb	0	; select bank0
 14140  049B  3004               	movlw	4
 14141  049C  0ABF               	incf	ledDynamic@i,f
 14142  049D  023F               	subwf	ledDynamic@i,w
 14143  049E  1803               	btfsc	3,0
 14144  049F  2CAF               	goto	i1l6653
 14145  04A0  2C7D               	goto	i1l6643
 14146  04A1                     i1l6651:	
 14147  04A1  0020               	movlb	0	; select bank0
 14148  04A2  084A               	movf	_gLedRunPara+1,w	;volatile
 14149                           
 14150                           ; Switch size 1, requested type "space"
 14151                           ; Number of cases is 11, Range of values is 1 to 11
 14152                           ; switch strategies available:
 14153                           ; Name         Instructions Cycles
 14154                           ; direct_byte           31     9 (fixed)
 14155                           ; simple_byte           34    18 (average)
 14156                           ; jumptable            263     9 (fixed)
 14157                           ;	Chosen strategy is direct_byte
 14158  04A3  3EFF               	addlw	-1
 14159  04A4  1C03               	skipc
 14160  04A5  2CAF               	goto	i1l6653
 14161  04A6  0084               	movwf	4
 14162  04A7  300B               	movlw	11
 14163  04A8  0204               	subwf	4,w
 14164  04A9  1803               	skipnc
 14165  04AA  2CAF               	goto	i1l6653
 14166  04AB  3198               	movlp	high i1S8577
 14167  04AC  3504               	lslf	4,w
 14168  04AD  3E4F               	addlw	low i1S8577
 14169  04AE  0082               	movwf	2
 14170  04AF                     i1l6653:	
 14171                           
 14172                           ;led.c: 1118: }
 14173                           ;led.c: 1119: for ( i = 0; i < 4; i++ )
 14174  04AF  0020               	movlb	0	; select bank0
 14175  04B0  01BF               	clrf	ledDynamic@i
 14176  04B1                     i1l6659:	
 14177                           
 14178                           ;led.c: 1120: {
 14179                           ;led.c: 1121: if ( gDynPara.fDyn & ( 1 << i ) )
 14180  04B1  0023               	movlb	3	; select bank3
 14181  04B2  0820               	movf	_gDynPara^(0+384),w	;volatile
 14182  04B3  271B  3184         	fcall	PL30	;call to abstracted procedure
 14183  04B5  1903               	btfsc	3,2
 14184  04B6  2CE5               	goto	i1l6669
 14185                           
 14186                           ;led.c: 1122: {
 14187                           ;led.c: 1123: temp = ( unsigned int ) ( gDynPara.num * gDynPara.delta[i] );
 14188  04B7  27CD  3184         	fcall	PL162	;call to abstracted procedure
 14189  04B9  26E1  3184         	fcall	i1___lwtoft
 14190  04BB  27A4  3184         	fcall	PL118	;call to abstracted procedure
 14191  04BD  083F               	movf	ledDynamic@i,w
 14192  04BE  073F               	addwf	ledDynamic@i,w
 14193  04BF  073F               	addwf	ledDynamic@i,w
 14194  04C0  2756               	fcall	PL76	;call to abstracted procedure
 14195  04C1  3193  2351  3184   	fcall	i1___ftmul
 14196  04C4  27B3  3184         	fcall	PL138	;call to abstracted procedure
 14197  04C6  24ED  3184         	fcall	___fttol
 14198  04C8  082D               	movf	?___fttol+1,w
 14199  04C9  00BE               	movwf	ledDynamic@temp+1
 14200  04CA  082C               	movf	?___fttol,w
 14201  04CB  00BD               	movwf	ledDynamic@temp
 14202                           
 14203                           ;led.c: 1124: if ( gDynPara.fBrt & ( 1 << i ) )
 14204  04CC  0023               	movlb	3	; select bank3
 14205  04CD  0E20               	swapf	_gDynPara^(0+384),w	;volatile
 14206  04CE  271B  3184         	fcall	PL30	;call to abstracted procedure
 14207  04D0  1903               	btfsc	3,2
 14208  04D1  2CDB               	goto	i1l6667
 14209                           
 14210                           ;led.c: 1125: {
 14211                           ;led.c: 1126: gLedRunPara.nCurrentBrt[i] = gDynPara.min[i] + temp;
 14212  04D2  353F               	lslf	ledDynamic@i,w
 14213  04D3  3EA1               	addlw	(low ((_gDynPara| (0+256)+1)))& (0+255)
 14214  04D4  2794  3184         	fcall	PL106	;call to abstracted procedure
 14215  04D6  0739               	addwf	??_ledDynamic,w
 14216  04D7  00BB               	movwf	??_ledDynamic+2
 14217  04D8  083E               	movf	ledDynamic@temp+1,w
 14218  04D9  3D3A               	addwfc	??_ledDynamic+1,w
 14219  04DA  2CE3               	goto	L54
 14220  04DB                     i1l6667:	
 14221                           ;led.c: 1127: }
 14222                           
 14223                           
 14224                           ;led.c: 1128: else
 14225                           ;led.c: 1129: {
 14226                           ;led.c: 1130: gLedRunPara.nCurrentBrt[i] = gDynPara.max[i] - temp;
 14227  04DB  353F               	lslf	ledDynamic@i,w
 14228  04DC  3EA9               	addlw	(low ((_gDynPara| (0+256)+9)))& (0+255)
 14229  04DD  2794  3184         	fcall	PL106	;call to abstracted procedure
 14230  04DF  0239               	subwf	??_ledDynamic,w
 14231  04E0  00BB               	movwf	??_ledDynamic+2
 14232  04E1  083E               	movf	ledDynamic@temp+1,w
 14233  04E2  3B3A               	subwfb	??_ledDynamic+1,w
 14234  04E3                     L54:	
 14235  04E3  2780  3184         	fcall	PL84	;call to abstracted procedure
 14236  04E5                     i1l6669:	
 14237  04E5  3004               	movlw	4
 14238  04E6  0ABF               	incf	ledDynamic@i,f
 14239  04E7  023F               	subwf	ledDynamic@i,w
 14240  04E8  1C03               	skipc
 14241  04E9  2CB1               	goto	i1l6659
 14242                           
 14243                           ;led.c: 1131: }
 14244                           ;led.c: 1132: }
 14245                           ;led.c: 1133: }
 14246                           ;led.c: 1134: updatePWM();
 14247  04EA  3193  23EC         	fcall	i1_updatePWM
 14248  04EC  0008               	return
 14249  04ED                     __end_of_ledDynamic:	
 14250  04ED                     __ptext74:	
 14251 ;; *************** function ___fttol *****************
 14252 ;; Defined at:
 14253 ;;		line 44 in file "D:\Program Files\Microchip\xc8\v1.41\sources\common\fttol.c"
 14254 ;; Parameters:    Size  Location     Type
 14255 ;;  f1              3   12[BANK0 ] float 
 14256 ;; Auto vars:     Size  Location     Type
 14257 ;;  lval            4   20[BANK0 ] unsigned long 
 14258 ;;  exp1            1   24[BANK0 ] unsigned char 
 14259 ;;  sign1           1   19[BANK0 ] unsigned char 
 14260 ;; Return value:  Size  Location     Type
 14261 ;;                  4   12[BANK0 ] long 
 14262 ;; Registers used:
 14263 ;;		wreg, status,2, status,0
 14264 ;; Tracked objects:
 14265 ;;		On entry : 1F/0
 14266 ;;		On exit  : 1F/0
 14267 ;;		Unchanged: 0/0
 14268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14269 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14270 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14271 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14272 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14273 ;;Total ram usage:       13 bytes
 14274 ;; Hardware stack levels used:    1
 14275 ;; This function calls:
 14276 ;;		Nothing
 14277 ;; This function is called by:
 14278 ;;		_ledSunrs
 14279 ;;		_ledDynamic
 14280 ;; This function uses a non-reentrant model
 14281 ;;
 14282                           
 14283                           
 14284                           ;psect for function ___fttol
 14285  04ED                     ___fttol:	
 14286                           
 14287                           ;incstack = 0
 14288                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 14289  04ED  27AC  3184         	fcall	PL132	;call to abstracted procedure
 14290  04EF  1003               	clrc
 14291  04F0  0D31               	rlf	??___fttol+1,w
 14292  04F1  0D32               	rlf	??___fttol+2,w
 14293  04F2  00B8               	movwf	___fttol@exp1
 14294  04F3  0838               	movf	___fttol@exp1,w
 14295  04F4  1D03               	btfss	3,2
 14296  04F5  2CFB               	goto	i1l5743
 14297  04F6                     i1l5741:	
 14298  04F6  01AC               	clrf	?___fttol
 14299  04F7  01AD               	clrf	?___fttol+1
 14300  04F8  01AE               	clrf	?___fttol+2
 14301  04F9  01AF               	clrf	?___fttol+3
 14302  04FA  0008               	return
 14303  04FB                     i1l5743:	
 14304  04FB  27AC  3184         	fcall	PL132	;call to abstracted procedure
 14305  04FD  3017               	movlw	23
 14306  04FE                     u388_25:	
 14307  04FE  36B2               	lsrf	??___fttol+2,f
 14308  04FF  0CB1               	rrf	??___fttol+1,f
 14309  0500  0CB0               	rrf	??___fttol,f
 14310  0501  0B89               	decfsz	9,f
 14311  0502  2CFE               	goto	u388_25
 14312  0503  0830               	movf	??___fttol,w
 14313  0504  00B3               	movwf	___fttol@sign1
 14314  0505  17AD               	bsf	___fttol@f1+1,7
 14315  0506  01AE               	clrf	___fttol@f1+2
 14316  0507  082C               	movf	___fttol@f1,w
 14317  0508  00B4               	movwf	___fttol@lval
 14318  0509  082D               	movf	___fttol@f1+1,w
 14319  050A  00B5               	movwf	___fttol@lval+1
 14320  050B  082E               	movf	___fttol@f1+2,w
 14321  050C  00B6               	movwf	___fttol@lval+2
 14322  050D  308E               	movlw	142
 14323  050E  01B7               	clrf	___fttol@lval+3
 14324  050F  02B8               	subwf	___fttol@exp1,f
 14325  0510  1FB8               	btfss	___fttol@exp1,7
 14326  0511  2D1E               	goto	i1l5763
 14327  0512  0838               	movf	___fttol@exp1,w
 14328  0513  3A80               	xorlw	128
 14329  0514  3E8F               	addlw	143
 14330  0515  1C03               	btfss	3,0
 14331  0516  2CF6               	goto	i1l5741
 14332  0517                     i1l5759:	
 14333  0517  36B7               	lsrf	___fttol@lval+3,f
 14334  0518  0CB6               	rrf	___fttol@lval+2,f
 14335  0519  0CB5               	rrf	___fttol@lval+1,f
 14336  051A  0CB4               	rrf	___fttol@lval,f
 14337  051B  0FB8               	incfsz	___fttol@exp1,f
 14338  051C  2D17               	goto	i1l5759
 14339  051D  2D2B               	goto	i1l5771
 14340  051E                     i1l5763:	
 14341  051E  3018               	movlw	24
 14342  051F  0238               	subwf	___fttol@exp1,w
 14343  0520  1803               	btfsc	3,0
 14344  0521  2CF6               	goto	i1l5741
 14345  0522                     i1l5769:	
 14346  0522  0838               	movf	___fttol@exp1,w
 14347  0523  1903               	btfsc	3,2
 14348  0524  2D2B               	goto	i1l5771
 14349  0525  35B4               	lslf	___fttol@lval,f
 14350  0526  0DB5               	rlf	___fttol@lval+1,f
 14351  0527  0DB6               	rlf	___fttol@lval+2,f
 14352  0528  0DB7               	rlf	___fttol@lval+3,f
 14353  0529  03B8               	decf	___fttol@exp1,f
 14354  052A  2D22               	goto	i1l5769
 14355  052B                     i1l5771:	
 14356  052B  0833               	movf	___fttol@sign1,w
 14357  052C  1903               	btfsc	3,2
 14358  052D  2D39               	goto	i1l5775
 14359  052E  09B4               	comf	___fttol@lval,f
 14360  052F  09B5               	comf	___fttol@lval+1,f
 14361  0530  09B6               	comf	___fttol@lval+2,f
 14362  0531  09B7               	comf	___fttol@lval+3,f
 14363  0532  0AB4               	incf	___fttol@lval,f
 14364  0533  1903               	skipnz
 14365  0534  0AB5               	incf	___fttol@lval+1,f
 14366  0535  1903               	skipnz
 14367  0536  0AB6               	incf	___fttol@lval+2,f
 14368  0537  1903               	skipnz
 14369  0538  0AB7               	incf	___fttol@lval+3,f
 14370  0539                     i1l5775:	
 14371  0539  0837               	movf	___fttol@lval+3,w
 14372  053A  00AF               	movwf	?___fttol+3
 14373  053B  0836               	movf	___fttol@lval+2,w
 14374  053C  00AE               	movwf	?___fttol+2
 14375  053D  0835               	movf	___fttol@lval+1,w
 14376  053E  00AD               	movwf	?___fttol+1
 14377  053F  0834               	movf	___fttol@lval,w
 14378  0540  00AC               	movwf	?___fttol
 14379  0541  0008               	return
 14380  0542                     __end_of___fttol:	
 14381  0542                     __ptext71:	
 14382 ;; *************** function _ledThunder_1 *****************
 14383 ;; Defined at:
 14384 ;;		line 474 in file "src/led.c"
 14385 ;; Parameters:    Size  Location     Type
 14386 ;;		None
 14387 ;; Auto vars:     Size  Location     Type
 14388 ;;		None
 14389 ;; Return value:  Size  Location     Type
 14390 ;;                  1    wreg      void 
 14391 ;; Registers used:
 14392 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14393 ;; Tracked objects:
 14394 ;;		On entry : 1F/3
 14395 ;;		On exit  : 1F/3
 14396 ;;		Unchanged: 0/0
 14397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14402 ;;Total ram usage:        0 bytes
 14403 ;; Hardware stack levels used:    1
 14404 ;; This function calls:
 14405 ;;		Nothing
 14406 ;; This function is called by:
 14407 ;;		_ledDynamic
 14408 ;; This function uses a non-reentrant model
 14409 ;;
 14410                           
 14411                           
 14412                           ;psect for function _ledThunder_1
 14413  0542                     _ledThunder_1:	
 14414                           
 14415                           ;led.c: 476: gDynPara.fDyn = 0x00;
 14416                           
 14417                           ;incstack = 0
 14418                           ; Regs used in _ledThunder_1: [wreg-fsr0h+status,2+status,0]
 14419  0542  30F0               	movlw	-16
 14420  0543  05A0               	andwf	_gDynPara^(0+384),f	;volatile
 14421                           
 14422                           ;led.c: 477: gLedRunPara.nCurrentBrt[2] = 250;
 14423  0544  30FA               	movlw	250
 14424  0545  0020               	movlb	0	; select bank0
 14425  0546  00DA               	movwf	_gLedRunPara+17	;volatile
 14426  0547  01DB               	clrf	_gLedRunPara+18	;volatile
 14427                           
 14428                           ;led.c: 478: switch ( gDynPara.state )
 14429  0548  2D8F               	goto	i1l5105
 14430  0549                     i1l5049:	
 14431                           
 14432                           ;led.c: 481: gLedRunPara.nCurrentBrt[0] = 0;
 14433                           
 14434                           ;led.c: 482: gLedRunPara.nCurrentBrt[1] = 0;
 14435  0549  26F2  3184         	fcall	PL12	;call to abstracted procedure
 14436                           
 14437                           ;led.c: 483: gLedRunPara.nCurrentBrt[3] = 200;
 14438                           
 14439                           ;led.c: 484: gDynPara.cnt = 500;
 14440  054B  279D               	fcall	PL114	;call to abstracted procedure
 14441  054C  00BD               	movwf	(_gDynPara^(0+384)+29)	;volatile
 14442                           
 14443                           ;led.c: 485: break;
 14444  054D  0008               	return
 14445  054E                     i1l5055:	
 14446                           
 14447                           ;led.c: 487: gLedRunPara.nCurrentBrt[0] = 0;
 14448                           
 14449                           ;led.c: 488: gLedRunPara.nCurrentBrt[1] = 0;
 14450  054E  26F2  3184         	fcall	PL12	;call to abstracted procedure
 14451                           
 14452                           ;led.c: 489: gLedRunPara.nCurrentBrt[3] = 200;
 14453  0550  30C8               	movlw	200
 14454  0551  00DC               	movwf	_gLedRunPara+19	;volatile
 14455  0552  01DD               	clrf	_gLedRunPara+20	;volatile
 14456  0553                     i1l5059:	
 14457                           
 14458                           ;led.c: 490: gDynPara.cnt = 35;
 14459  0553  3023               	movlw	35
 14460                           
 14461                           ;led.c: 491: break;
 14462  0554  2FD3               	ljmp	PL166	;call to abstracted procedure
 14463  0555                     i1l5061:	
 14464                           
 14465                           ;led.c: 493: gLedRunPara.nCurrentBrt[0] = 0;
 14466                           
 14467                           ;led.c: 494: gLedRunPara.nCurrentBrt[1] = 0;
 14468  0555  26F2  3184         	fcall	PL12	;call to abstracted procedure
 14469                           
 14470                           ;led.c: 495: gLedRunPara.nCurrentBrt[3] = 300;
 14471  0557  3001               	movlw	1
 14472  0558  00DD               	movwf	_gLedRunPara+20	;volatile
 14473  0559  302C               	movlw	44
 14474  055A                     L47:	
 14475  055A  00DC               	movwf	_gLedRunPara+19	;volatile
 14476  055B                     i1l5065:	
 14477                           
 14478                           ;led.c: 496: gDynPara.cnt = 30;
 14479  055B  301E               	movlw	30
 14480                           
 14481                           ;led.c: 497: break;
 14482  055C  2FD3               	ljmp	PL166	;call to abstracted procedure
 14483  055D                     i1l536:	
 14484                           ;led.c: 498: case 3:
 14485                           
 14486                           
 14487                           ;led.c: 499: gLedRunPara.nCurrentBrt[0] = 450;
 14488  055D  3001               	movlw	1
 14489  055E  0020               	movlb	0	; select bank0
 14490                           
 14491                           ;led.c: 500: gLedRunPara.nCurrentBrt[1] = 450;
 14492                           
 14493                           ;led.c: 501: gLedRunPara.nCurrentBrt[3] = 500;
 14494  055F  276C  3184         	fcall	PL80	;call to abstracted procedure
 14495  0561  30F4               	movlw	244
 14496  0562  2D5A               	goto	L47
 14497  0563                     i1l5069:	
 14498                           
 14499                           ;led.c: 505: gLedRunPara.nCurrentBrt[0] = 0;
 14500                           
 14501                           ;led.c: 506: gLedRunPara.nCurrentBrt[1] = 0;
 14502  0563  26F2  3184         	fcall	PL12	;call to abstracted procedure
 14503                           
 14504                           ;led.c: 507: gLedRunPara.nCurrentBrt[3] = 250;
 14505  0565  30FA               	movlw	250
 14506  0566  00DC               	movwf	_gLedRunPara+19	;volatile
 14507  0567  01DD               	clrf	_gLedRunPara+20	;volatile
 14508  0568  2D5B               	goto	i1l5065
 14509  0569                     i1l5075:	
 14510                           
 14511                           ;led.c: 511: gLedRunPara.nCurrentBrt[0] = 0;
 14512                           
 14513                           ;led.c: 512: gLedRunPara.nCurrentBrt[1] = 0;
 14514  0569  26F2  3184         	fcall	PL12	;call to abstracted procedure
 14515                           
 14516                           ;led.c: 513: gLedRunPara.nCurrentBrt[3] = 0;
 14517  056B  01DC               	clrf	_gLedRunPara+19	;volatile
 14518  056C  01DD               	clrf	_gLedRunPara+20	;volatile
 14519                           
 14520                           ;led.c: 514: gDynPara.cnt = 250;
 14521  056D  30FA               	movlw	250
 14522                           
 14523                           ;led.c: 515: break;
 14524  056E  2FD3               	ljmp	PL166	;call to abstracted procedure
 14525  056F                     i1l5079:	
 14526                           
 14527                           ;led.c: 517: gLedRunPara.nCurrentBrt[0] = 0;
 14528                           
 14529                           ;led.c: 518: gLedRunPara.nCurrentBrt[1] = 0;
 14530  056F  26F2  3184         	fcall	PL12	;call to abstracted procedure
 14531                           
 14532                           ;led.c: 519: gLedRunPara.nCurrentBrt[3] = 300;
 14533  0571  27D7  3184         	fcall	PL186	;call to abstracted procedure
 14534  0573  2D53               	goto	i1l5059
 14535  0574                     i1l540:	
 14536                           ;led.c: 522: case 7:
 14537                           
 14538                           
 14539                           ;led.c: 523: gLedRunPara.nCurrentBrt[0] = 450;
 14540  0574  3001               	movlw	1
 14541  0575  0020               	movlb	0	; select bank0
 14542                           
 14543                           ;led.c: 524: gLedRunPara.nCurrentBrt[1] = 450;
 14544                           
 14545                           ;led.c: 525: gLedRunPara.nCurrentBrt[3] = 400;
 14546  0576  276C  3184         	fcall	PL80	;call to abstracted procedure
 14547  0578  3090               	movlw	144
 14548  0579  00DC               	movwf	_gLedRunPara+19	;volatile
 14549  057A                     i1l5085:	
 14550                           
 14551                           ;led.c: 526: gDynPara.cnt = 20;
 14552  057A  3014               	movlw	20
 14553                           
 14554                           ;led.c: 527: break;
 14555  057B  2FD3               	ljmp	PL166	;call to abstracted procedure
 14556  057C                     i1l5087:	
 14557                           
 14558                           ;led.c: 529: gLedRunPara.nCurrentBrt[0] = 0;
 14559                           
 14560                           ;led.c: 530: gLedRunPara.nCurrentBrt[1] = 0;
 14561  057C  26F2  3184         	fcall	PL12	;call to abstracted procedure
 14562                           
 14563                           ;led.c: 531: gLedRunPara.nCurrentBrt[3] = 250;
 14564  057E  30FA               	movlw	250
 14565  057F  2D83               	goto	L48
 14566  0580                     i1l5093:	
 14567                           
 14568                           ;led.c: 535: gLedRunPara.nCurrentBrt[0] = 0;
 14569                           
 14570                           ;led.c: 536: gLedRunPara.nCurrentBrt[1] = 0;
 14571  0580  26F2  3184         	fcall	PL12	;call to abstracted procedure
 14572                           
 14573                           ;led.c: 537: gLedRunPara.nCurrentBrt[3] = 200;
 14574  0582  30C8               	movlw	200
 14575  0583                     L48:	
 14576  0583  00DC               	movwf	_gLedRunPara+19	;volatile
 14577  0584  01DD               	clrf	_gLedRunPara+20	;volatile
 14578  0585  2D7A               	goto	i1l5085
 14579  0586                     i1l5099:	
 14580                           
 14581                           ;led.c: 541: gLedRunPara.nCurrentBrt[0] = 0;
 14582                           
 14583                           ;led.c: 542: gLedRunPara.nCurrentBrt[1] = 0;
 14584  0586  26F2               	fcall	PL12	;call to abstracted procedure
 14585                           
 14586                           ;led.c: 543: gLedRunPara.nCurrentBrt[3] = 0;
 14587  0587  01DC               	clrf	_gLedRunPara+19	;volatile
 14588  0588  01DD               	clrf	_gLedRunPara+20	;volatile
 14589                           
 14590                           ;led.c: 544: gDynPara.cnt = 2500;
 14591  0589  3009               	movlw	9
 14592  058A  0023               	movlb	3	; select bank3
 14593  058B  00BE               	movwf	((_gDynPara+1)^(0+384)+29)	;volatile
 14594  058C  30C4               	movlw	196
 14595  058D  00BD               	movwf	(_gDynPara^(0+384)+29)	;volatile
 14596                           
 14597                           ;led.c: 545: break;
 14598  058E  0008               	return
 14599  058F                     i1l5105:	
 14600  058F  0023               	movlb	3	; select bank3
 14601  0590  083F               	movf	(_gDynPara^(0+384)+31),w	;volatile
 14602                           
 14603                           ; Switch size 1, requested type "space"
 14604                           ; Number of cases is 11, Range of values is 0 to 10
 14605                           ; switch strategies available:
 14606                           ; Name         Instructions Cycles
 14607                           ; direct_byte           28     6 (fixed)
 14608                           ; simple_byte           34    18 (average)
 14609                           ; jumptable            260     6 (fixed)
 14610                           ;	Chosen strategy is direct_byte
 14611  0591  0084               	movwf	4
 14612  0592  300B               	movlw	11
 14613  0593  0204               	subwf	4,w
 14614  0594  1803               	skipnc
 14615  0595  0008               	return
 14616  0596  3198               	movlp	high i1S8583
 14617  0597  3504               	lslf	4,w
 14618  0598  3E65               	addlw	low i1S8583
 14619  0599  0082               	movwf	2
 14620  059A  0008               	return
 14621  059B                     __end_of_ledThunder_1:	
 14622  059B                     __ptext70:	
 14623 ;; *************** function _ledThunder_2 *****************
 14624 ;; Defined at:
 14625 ;;		line 551 in file "src/led.c"
 14626 ;; Parameters:    Size  Location     Type
 14627 ;;		None
 14628 ;; Auto vars:     Size  Location     Type
 14629 ;;		None
 14630 ;; Return value:  Size  Location     Type
 14631 ;;                  1    wreg      void 
 14632 ;; Registers used:
 14633 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14634 ;; Tracked objects:
 14635 ;;		On entry : 1F/3
 14636 ;;		On exit  : 1F/3
 14637 ;;		Unchanged: 0/0
 14638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14643 ;;Total ram usage:        0 bytes
 14644 ;; Hardware stack levels used:    1
 14645 ;; Hardware stack levels required when called:    1
 14646 ;; This function calls:
 14647 ;;		i1_updateDynamic
 14648 ;; This function is called by:
 14649 ;;		_ledDynamic
 14650 ;; This function uses a non-reentrant model
 14651 ;;
 14652                           
 14653                           
 14654                           ;psect for function _ledThunder_2
 14655  059B                     _ledThunder_2:	
 14656                           
 14657                           ;led.c: 553: gLedRunPara.nCurrentBrt[0] = 0;
 14658                           
 14659                           ;incstack = 0
 14660                           ; Regs used in _ledThunder_2: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14661                           
 14662                           ;led.c: 554: gLedRunPara.nCurrentBrt[1] = 0;
 14663  059B  26F2  3184         	fcall	PL12	;call to abstracted procedure
 14664                           
 14665                           ;led.c: 555: switch ( gDynPara.state )
 14666  059D  2E64               	goto	i1l5279
 14667  059E                     i1l552:	
 14668  059E                     i1l5113:	
 14669                           
 14670                           ;led.c: 558: case 15:
 14671                           ;led.c: 559: case 30:
 14672                           ;led.c: 560: case 45:
 14673                           ;led.c: 561: case 60:
 14674                           ;led.c: 562: gDynPara.fDyn = 0x0C;
 14675  059E  2751  3184         	fcall	PL60	;call to abstracted procedure
 14676                           
 14677                           ;led.c: 563: gDynPara.fBrt = 0x04;
 14678                           
 14679                           ;led.c: 564: gDynPara.min[2] = 100;
 14680                           
 14681                           ;led.c: 565: gDynPara.max[2] = 212;
 14682                           
 14683                           ;led.c: 566: gDynPara.min[3] = 10;
 14684                           
 14685                           ;led.c: 567: gDynPara.max[3] = 100;
 14686  05A0  272F  3184         	fcall	PL44	;call to abstracted procedure
 14687                           
 14688                           ;led.c: 568: gDynPara.delta[2] = 1.4;
 14689  05A2  3033               	movlw	51
 14690  05A3  00B7               	movwf	(_gDynPara^(0+384)+23)	;volatile
 14691  05A4  30B3               	movlw	179
 14692  05A5  00B8               	movwf	((_gDynPara+1)^(0+384)+23)	;volatile
 14693  05A6  303F               	movlw	63
 14694  05A7  00B9               	movwf	((_gDynPara+2)^(0+384)+23)	;volatile
 14695                           
 14696                           ;led.c: 569: gDynPara.delta[3] = 1.125;
 14697  05A8  01BA               	clrf	(_gDynPara^(0+384)+26)	;volatile
 14698  05A9  3090               	movlw	144
 14699  05AA                     L39:	
 14700  05AA  00BB               	movwf	((_gDynPara+1)^(0+384)+26)	;volatile
 14701  05AB  303F               	movlw	63
 14702  05AC  00BC               	movwf	((_gDynPara+2)^(0+384)+26)	;volatile
 14703                           
 14704                           ;led.c: 570: gDynPara.cnt = 80;
 14705  05AD  3050               	movlw	80
 14706  05AE  2E53               	goto	L43
 14707  05AF                     i1l558:	
 14708                           ;led.c: 571: break;
 14709                           
 14710  05AF                     i1l5129:	
 14711                           
 14712                           ;led.c: 573: case 16:
 14713                           ;led.c: 574: case 31:
 14714                           ;led.c: 575: case 46:
 14715                           ;led.c: 576: case 61:
 14716                           ;led.c: 577: gDynPara.fDyn = 0x04;
 14717                           
 14718                           ;led.c: 578: gDynPara.fBrt = 0x04;
 14719  05AF  2748  3184         	fcall	PL56	;call to abstracted procedure
 14720                           
 14721                           ;led.c: 579: gDynPara.min[2] = 212;
 14722  05B1  30D4               	movlw	212
 14723  05B2  00A5               	movwf	(_gDynPara^(0+384)+5)	;volatile
 14724  05B3  01A6               	clrf	((_gDynPara+1)^(0+384)+5)	;volatile
 14725                           
 14726                           ;led.c: 580: gDynPara.max[2] = 240;
 14727  05B4  30F0               	movlw	240
 14728  05B5  00AD               	movwf	(_gDynPara^(0+384)+13)	;volatile
 14729  05B6  01AE               	clrf	((_gDynPara+1)^(0+384)+13)	;volatile
 14730                           
 14731                           ;led.c: 581: gLedRunPara.nCurrentBrt[3] = 0;
 14732  05B7  0020               	movlb	0	; select bank0
 14733  05B8  01DC               	clrf	_gLedRunPara+19	;volatile
 14734  05B9  01DD               	clrf	_gLedRunPara+20	;volatile
 14735                           
 14736                           ;led.c: 582: gDynPara.delta[2] = 1.4;
 14737  05BA  2740  3184         	fcall	PL52	;call to abstracted procedure
 14738  05BC                     i1l5139:	
 14739                           
 14740                           ;led.c: 583: gDynPara.cnt = 20;
 14741  05BC  3014               	movlw	20
 14742  05BD  2E3A               	goto	L46
 14743  05BE                     i1l563:	
 14744                           ;led.c: 584: break;
 14745                           
 14746  05BE                     i1l5141:	
 14747                           
 14748                           ;led.c: 586: case 17:
 14749                           ;led.c: 587: case 32:
 14750                           ;led.c: 588: case 47:
 14751                           ;led.c: 589: case 62:
 14752                           ;led.c: 590: gDynPara.fDyn = 0x04;
 14753                           
 14754                           ;led.c: 591: gDynPara.fBrt = 0x04;
 14755  05BE  2748  3184         	fcall	PL56	;call to abstracted procedure
 14756                           
 14757                           ;led.c: 592: gDynPara.min[2] = 240;
 14758  05C0  30F0               	movlw	240
 14759  05C1  00A5               	movwf	(_gDynPara^(0+384)+5)	;volatile
 14760  05C2  01A6               	clrf	((_gDynPara+1)^(0+384)+5)	;volatile
 14761                           
 14762                           ;led.c: 593: gDynPara.max[2] = 296;
 14763  05C3  3001               	movlw	1
 14764  05C4  00AE               	movwf	((_gDynPara+1)^(0+384)+13)	;volatile
 14765  05C5  3028               	movlw	40
 14766  05C6  00AD               	movwf	(_gDynPara^(0+384)+13)	;volatile
 14767                           
 14768                           ;led.c: 594: gLedRunPara.nCurrentBrt[3] = 16;
 14769  05C7  3010               	movlw	16
 14770  05C8  0020               	movlb	0	; select bank0
 14771  05C9  00DC               	movwf	_gLedRunPara+19	;volatile
 14772  05CA  01DD               	clrf	_gLedRunPara+20	;volatile
 14773                           
 14774                           ;led.c: 595: gDynPara.delta[2] = 1.4;
 14775  05CB  2740  3184         	fcall	PL52	;call to abstracted procedure
 14776                           
 14777                           ;led.c: 596: gDynPara.cnt = 40;
 14778  05CD  3028               	movlw	40
 14779  05CE  2E53               	goto	L43
 14780  05CF                     i1l568:	
 14781                           ;led.c: 597: break;
 14782                           
 14783  05CF                     i1l5153:	
 14784                           
 14785                           ;led.c: 599: case 18:
 14786                           ;led.c: 600: case 33:
 14787                           ;led.c: 601: case 48:
 14788                           ;led.c: 602: case 63:
 14789                           ;led.c: 603: gDynPara.fDyn = 0x04;
 14790                           
 14791                           ;led.c: 604: gDynPara.fBrt = 0x04;
 14792  05CF  2748  3184         	fcall	PL56	;call to abstracted procedure
 14793                           
 14794                           ;led.c: 605: gDynPara.min[2] = 296;
 14795  05D1  3001               	movlw	1
 14796  05D2  00A6               	movwf	((_gDynPara+1)^(0+384)+5)	;volatile
 14797  05D3  3028               	movlw	40
 14798  05D4  00A5               	movwf	(_gDynPara^(0+384)+5)	;volatile
 14799                           
 14800                           ;led.c: 606: gDynPara.max[2] = 492;
 14801  05D5  3001               	movlw	1
 14802  05D6  00AE               	movwf	((_gDynPara+1)^(0+384)+13)	;volatile
 14803  05D7  30EC               	movlw	236
 14804  05D8  00AD               	movwf	(_gDynPara^(0+384)+13)	;volatile
 14805                           
 14806                           ;led.c: 607: gLedRunPara.nCurrentBrt[3] = 0;
 14807  05D9  0020               	movlb	0	; select bank0
 14808  05DA  01DC               	clrf	_gLedRunPara+19	;volatile
 14809  05DB  01DD               	clrf	_gLedRunPara+20	;volatile
 14810                           
 14811                           ;led.c: 608: gDynPara.delta[2] = 1.4;
 14812  05DC  2740  3184         	fcall	PL52	;call to abstracted procedure
 14813                           
 14814                           ;led.c: 609: gDynPara.cnt = 140;
 14815  05DE  308C               	movlw	140
 14816  05DF  2E53               	goto	L43
 14817  05E0                     i1l573:	
 14818                           ;led.c: 610: break;
 14819                           
 14820  05E0                     i1l5165:	
 14821                           
 14822                           ;led.c: 612: case 19:
 14823                           ;led.c: 613: case 34:
 14824                           ;led.c: 614: case 49:
 14825                           ;led.c: 615: case 64:
 14826                           ;led.c: 616: gDynPara.fDyn = 0x00;
 14827  05E0  30F0               	movlw	-16
 14828  05E1  05A0               	andwf	_gDynPara^(0+384),f	;volatile
 14829                           
 14830                           ;led.c: 617: gLedRunPara.nCurrentBrt[2] = 492;
 14831  05E2  3001               	movlw	1
 14832  05E3  0020               	movlb	0	; select bank0
 14833  05E4  00DB               	movwf	_gLedRunPara+18	;volatile
 14834  05E5  30EC               	movlw	236
 14835  05E6  00DA               	movwf	_gLedRunPara+17	;volatile
 14836                           
 14837                           ;led.c: 618: gLedRunPara.nCurrentBrt[3] = 250;
 14838  05E7  30FA               	movlw	250
 14839  05E8                     L36:	
 14840  05E8  00DC               	movwf	_gLedRunPara+19	;volatile
 14841  05E9                     L37:	
 14842  05E9  01DD               	clrf	_gLedRunPara+20	;volatile
 14843                           
 14844                           ;led.c: 619: gDynPara.cnt = 10;
 14845  05EA  300A               	movlw	10
 14846  05EB  2E3A               	goto	L46
 14847  05EC                     i1l578:	
 14848                           ;led.c: 620: break;
 14849                           
 14850  05EC                     i1l5173:	
 14851                           
 14852                           ;led.c: 622: case 20:
 14853                           ;led.c: 623: case 35:
 14854                           ;led.c: 624: case 50:
 14855                           ;led.c: 625: case 65:
 14856                           ;led.c: 626: gDynPara.fDyn = 0x00;
 14857  05EC  30F0               	movlw	-16
 14858  05ED  05A0               	andwf	_gDynPara^(0+384),f	;volatile
 14859                           
 14860                           ;led.c: 627: gLedRunPara.nCurrentBrt[2] = 200;
 14861  05EE  30C8               	movlw	200
 14862  05EF  0020               	movlb	0	; select bank0
 14863  05F0  00DA               	movwf	_gLedRunPara+17	;volatile
 14864  05F1  01DB               	clrf	_gLedRunPara+18	;volatile
 14865                           
 14866                           ;led.c: 628: gLedRunPara.nCurrentBrt[3] = 100;
 14867  05F2  3064               	movlw	100
 14868  05F3  2DE8               	goto	L36
 14869  05F4                     i1l583:	
 14870  05F4                     i1l5181:	
 14871                           
 14872                           ;led.c: 632: case 21:
 14873                           ;led.c: 633: case 36:
 14874                           ;led.c: 634: case 51:
 14875                           ;led.c: 635: case 66:
 14876                           ;led.c: 636: gDynPara.fDyn = 0x00;
 14877  05F4  30F0               	movlw	-16
 14878  05F5  05A0               	andwf	_gDynPara^(0+384),f	;volatile
 14879                           
 14880                           ;led.c: 637: gLedRunPara.nCurrentBrt[2] = 100;
 14881  05F6  3064               	movlw	100
 14882  05F7  0020               	movlb	0	; select bank0
 14883  05F8  00DA               	movwf	_gLedRunPara+17	;volatile
 14884  05F9                     L38:	
 14885  05F9  01DB               	clrf	_gLedRunPara+18	;volatile
 14886                           
 14887                           ;led.c: 638: gLedRunPara.nCurrentBrt[3] = 0;
 14888  05FA  01DC               	clrf	_gLedRunPara+19	;volatile
 14889  05FB  2DE9               	goto	L37
 14890  05FC                     i1l588:	
 14891  05FC                     i1l5189:	
 14892                           
 14893                           ;led.c: 642: case 22:
 14894                           ;led.c: 643: case 37:
 14895                           ;led.c: 644: case 52:
 14896                           ;led.c: 645: case 67:
 14897                           ;led.c: 646: gDynPara.fDyn = 0x00;
 14898  05FC  30F0               	movlw	-16
 14899  05FD  05A0               	andwf	_gDynPara^(0+384),f	;volatile
 14900                           
 14901                           ;led.c: 647: gLedRunPara.nCurrentBrt[2] = 50;
 14902  05FE  3032               	movlw	50
 14903  05FF  0020               	movlb	0	; select bank0
 14904  0600  00DA               	movwf	_gLedRunPara+17	;volatile
 14905  0601  01DB               	clrf	_gLedRunPara+18	;volatile
 14906                           
 14907                           ;led.c: 648: gLedRunPara.nCurrentBrt[3] = 76;
 14908  0602  304C               	movlw	76
 14909  0603  00DC               	movwf	_gLedRunPara+19	;volatile
 14910  0604  01DD               	clrf	_gLedRunPara+20	;volatile
 14911  0605  2DBC               	goto	i1l5139
 14912  0606                     i1l593:	
 14913  0606                     i1l5197:	
 14914                           
 14915                           ;led.c: 652: case 23:
 14916                           ;led.c: 653: case 38:
 14917                           ;led.c: 654: case 53:
 14918                           ;led.c: 655: case 68:
 14919                           ;led.c: 656: gDynPara.fDyn = 0x00;
 14920  0606  30F0               	movlw	-16
 14921  0607  05A0               	andwf	_gDynPara^(0+384),f	;volatile
 14922                           
 14923                           ;led.c: 657: gLedRunPara.nCurrentBrt[2] = 0;
 14924  0608  0020               	movlb	0	; select bank0
 14925  0609  01DA               	clrf	_gLedRunPara+17	;volatile
 14926  060A  2DF9               	goto	L38
 14927  060B                     i1l598:	
 14928  060B                     i1l5205:	
 14929                           
 14930                           ;led.c: 662: case 24:
 14931                           ;led.c: 663: case 39:
 14932                           ;led.c: 664: case 54:
 14933                           ;led.c: 665: case 69:
 14934                           ;led.c: 666: gDynPara.fDyn = 0x0C;
 14935                           
 14936                           ;led.c: 667: gDynPara.fBrt = 0x00;
 14937                           
 14938                           ;led.c: 668: gDynPara.min[2] = 100;
 14939  060B  278A  3184         	fcall	PL86	;call to abstracted procedure
 14940                           
 14941                           ;led.c: 669: gDynPara.max[2] = 300;
 14942  060D  3001               	movlw	1
 14943  060E  00AE               	movwf	((_gDynPara+1)^(0+384)+13)	;volatile
 14944  060F  302C               	movlw	44
 14945  0610  00AD               	movwf	(_gDynPara^(0+384)+13)	;volatile
 14946                           
 14947                           ;led.c: 670: gDynPara.min[3] = 0;
 14948  0611  01A7               	clrf	(_gDynPara^(0+384)+7)	;volatile
 14949  0612  01A8               	clrf	((_gDynPara+1)^(0+384)+7)	;volatile
 14950                           
 14951                           ;led.c: 671: gDynPara.max[3] = 100;
 14952  0613  3064               	movlw	100
 14953  0614  00AF               	movwf	(_gDynPara^(0+384)+15)	;volatile
 14954  0615  01B0               	clrf	((_gDynPara+1)^(0+384)+15)	;volatile
 14955                           
 14956                           ;led.c: 672: gDynPara.delta[2] = 2.5;
 14957  0616  01B7               	clrf	(_gDynPara^(0+384)+23)	;volatile
 14958  0617  3020               	movlw	32
 14959  0618  00B8               	movwf	((_gDynPara+1)^(0+384)+23)	;volatile
 14960  0619  3040               	movlw	64
 14961  061A  00B9               	movwf	((_gDynPara+2)^(0+384)+23)	;volatile
 14962                           
 14963                           ;led.c: 673: gDynPara.delta[3] = 1.25;
 14964  061B  01BA               	clrf	(_gDynPara^(0+384)+26)	;volatile
 14965  061C  30A0               	movlw	160
 14966  061D  2DAA               	goto	L39
 14967  061E                     i1l5221:	
 14968                           
 14969                           ;led.c: 677: case 25:
 14970                           ;led.c: 678: gDynPara.fDyn = 0x00;
 14971  061E  30F0               	movlw	-16
 14972  061F  05A0               	andwf	_gDynPara^(0+384),f	;volatile
 14973                           
 14974                           ;led.c: 679: gDynPara.cnt = 500;
 14975  0620  3001               	movlw	1
 14976  0621  00BE               	movwf	((_gDynPara+1)^(0+384)+29)	;volatile
 14977  0622  30F4               	movlw	244
 14978  0623  2E61               	goto	L44
 14979  0624                     i1l5225:	
 14980                           ;led.c: 680: break;
 14981                           
 14982                           
 14983                           ;led.c: 682: case 70:
 14984                           ;led.c: 683: gDynPara.fDyn = 0x00;
 14985  0624  30F0               	movlw	-16
 14986  0625  05A0               	andwf	_gDynPara^(0+384),f	;volatile
 14987                           
 14988                           ;led.c: 684: gDynPara.cnt = 1500;
 14989  0626  3005               	movlw	5
 14990  0627  00BE               	movwf	((_gDynPara+1)^(0+384)+29)	;volatile
 14991  0628  30DC               	movlw	220
 14992  0629  2E61               	goto	L44
 14993  062A                     i1l5229:	
 14994                           ;led.c: 685: break;
 14995                           
 14996                           
 14997                           ;led.c: 687: gDynPara.fDyn = 0x00;
 14998  062A  30F0               	movlw	-16
 14999  062B  05A0               	andwf	_gDynPara^(0+384),f	;volatile
 15000                           
 15001                           ;led.c: 688: gDynPara.cnt = 2750;
 15002  062C  300A               	movlw	10
 15003  062D  00BE               	movwf	((_gDynPara+1)^(0+384)+29)	;volatile
 15004  062E  30BE               	movlw	190
 15005  062F  2E61               	goto	L44
 15006  0630                     i1l608:	
 15007                           ;led.c: 689: break;
 15008                           
 15009  0630                     i1l5233:	
 15010                           
 15011                           ;led.c: 691: case 26:
 15012                           ;led.c: 692: case 41:
 15013                           ;led.c: 693: case 56:
 15014                           ;led.c: 694: case 71:
 15015                           ;led.c: 695: gDynPara.fDyn = 0x00;
 15016  0630  30F0               	movlw	-16
 15017  0631  05A0               	andwf	_gDynPara^(0+384),f	;volatile
 15018                           
 15019                           ;led.c: 696: gLedRunPara.nCurrentBrt[2] = 180;
 15020  0632  30B4               	movlw	180
 15021  0633  0020               	movlb	0	; select bank0
 15022  0634  00DA               	movwf	_gLedRunPara+17	;volatile
 15023  0635  01DB               	clrf	_gLedRunPara+18	;volatile
 15024                           
 15025                           ;led.c: 697: gLedRunPara.nCurrentBrt[3] = 150;
 15026  0636  3096               	movlw	150
 15027  0637  00DC               	movwf	_gLedRunPara+19	;volatile
 15028  0638  01DD               	clrf	_gLedRunPara+20	;volatile
 15029                           
 15030                           ;led.c: 698: gDynPara.cnt = 30;
 15031  0639  301E               	movlw	30
 15032  063A                     L46:	
 15033  063A  0023               	movlb	3	; select bank3
 15034  063B  2E53               	goto	L43
 15035  063C                     i1l613:	
 15036                           ;led.c: 699: break;
 15037                           
 15038  063C                     i1l5241:	
 15039  063C  2E06               	goto	i1l5197
 15040  063D                     i1l618:	
 15041                           ;led.c: 701: case 27:
 15042                           ;led.c: 702: case 42:
 15043                           ;led.c: 703: case 57:
 15044                           ;led.c: 704: case 72:
 15045                           ;led.c: 705: gDynPara.fDyn = 0x00;
 15046                           
 15047  063D                     i1l5249:	
 15048                           
 15049                           ;led.c: 711: case 28:
 15050                           ;led.c: 712: case 43:
 15051                           ;led.c: 713: case 58:
 15052                           ;led.c: 714: case 73:
 15053                           ;led.c: 715: gDynPara.fDyn = 0x0C;
 15054                           
 15055                           ;led.c: 716: gDynPara.fBrt = 0x00;
 15056                           
 15057                           ;led.c: 717: gDynPara.min[2] = 100;
 15058  063D  278A  3184         	fcall	PL86	;call to abstracted procedure
 15059                           
 15060                           ;led.c: 718: gDynPara.max[2] = 180;
 15061  063F  30B4               	movlw	180
 15062  0640  00AD               	movwf	(_gDynPara^(0+384)+13)	;volatile
 15063  0641  01AE               	clrf	((_gDynPara+1)^(0+384)+13)	;volatile
 15064                           
 15065                           ;led.c: 719: gDynPara.min[3] = 0;
 15066  0642  01A7               	clrf	(_gDynPara^(0+384)+7)	;volatile
 15067  0643  01A8               	clrf	((_gDynPara+1)^(0+384)+7)	;volatile
 15068                           
 15069                           ;led.c: 720: gDynPara.max[3] = 150;
 15070  0644  3096               	movlw	150
 15071  0645  00AF               	movwf	(_gDynPara^(0+384)+15)	;volatile
 15072  0646  01B0               	clrf	((_gDynPara+1)^(0+384)+15)	;volatile
 15073                           
 15074                           ;led.c: 721: gDynPara.delta[2] = 0.8;
 15075  0647  30CD               	movlw	205
 15076  0648  00B7               	movwf	(_gDynPara^(0+384)+23)	;volatile
 15077  0649  304C               	movlw	76
 15078  064A  00B8               	movwf	((_gDynPara+1)^(0+384)+23)	;volatile
 15079  064B  303F               	movlw	63
 15080  064C  00B9               	movwf	((_gDynPara+2)^(0+384)+23)	;volatile
 15081                           
 15082                           ;led.c: 722: gDynPara.delta[3] = 1.5;
 15083  064D  01BA               	clrf	(_gDynPara^(0+384)+26)	;volatile
 15084  064E  30C0               	movlw	192
 15085  064F  00BB               	movwf	((_gDynPara+1)^(0+384)+26)	;volatile
 15086  0650  303F               	movlw	63
 15087  0651  00BC               	movwf	((_gDynPara+2)^(0+384)+26)	;volatile
 15088                           
 15089                           ;led.c: 723: gDynPara.cnt = 100;
 15090  0652  3064               	movlw	100
 15091  0653                     L43:	
 15092  0653  00BD               	movwf	(_gDynPara^(0+384)+29)	;volatile
 15093  0654  01BE               	clrf	((_gDynPara+1)^(0+384)+29)	;volatile
 15094                           
 15095                           ;led.c: 724: break;
 15096  0655  2E6F               	goto	i1l5281
 15097  0656                     i1l5265:	
 15098                           
 15099                           ;led.c: 726: case 44:
 15100                           ;led.c: 727: case 59:
 15101                           ;led.c: 728: gDynPara.fDyn = 0x00;
 15102  0656  30F0               	movlw	-16
 15103  0657  05A0               	andwf	_gDynPara^(0+384),f	;volatile
 15104                           
 15105                           ;led.c: 729: gDynPara.cnt = 600;
 15106  0658  3002               	movlw	2
 15107  0659  00BE               	movwf	((_gDynPara+1)^(0+384)+29)	;volatile
 15108  065A  3058               	movlw	88
 15109  065B  2E61               	goto	L44
 15110  065C                     i1l5269:	
 15111                           ;led.c: 730: break;
 15112                           
 15113                           
 15114                           ;led.c: 732: gDynPara.fDyn = 0x00;
 15115  065C  30F0               	movlw	-16
 15116  065D  05A0               	andwf	_gDynPara^(0+384),f	;volatile
 15117                           
 15118                           ;led.c: 733: gDynPara.cnt = 1000;
 15119  065E  3003               	movlw	3
 15120  065F  00BE               	movwf	((_gDynPara+1)^(0+384)+29)	;volatile
 15121  0660  30E8               	movlw	232
 15122  0661                     L44:	
 15123  0661  00BD               	movwf	(_gDynPara^(0+384)+29)	;volatile
 15124                           
 15125                           ;led.c: 734: break;
 15126  0662  2E6F               	goto	i1l5281
 15127  0663                     i1l5273:	
 15128  0663  2E1E               	goto	i1l5221
 15129  0664                     i1l5279:	
 15130                           ;led.c: 736: gDynPara.fDyn = 0x00;
 15131                           
 15132  0664  0023               	movlb	3	; select bank3
 15133  0665  083F               	movf	(_gDynPara^(0+384)+31),w	;volatile
 15134                           
 15135                           ; Switch size 1, requested type "space"
 15136                           ; Number of cases is 75, Range of values is 0 to 74
 15137                           ; switch strategies available:
 15138                           ; Name         Instructions Cycles
 15139                           ; direct_byte          156     6 (fixed)
 15140                           ; simple_byte          226   114 (average)
 15141                           ; jumptable            260     6 (fixed)
 15142                           ;	Chosen strategy is direct_byte
 15143  0666  0084               	movwf	4
 15144  0667  304B               	movlw	75
 15145  0668  0204               	subwf	4,w
 15146  0669  1803               	skipnc
 15147  066A  2E6F               	goto	i1l5281
 15148  066B  3190               	movlp	high i1S8581
 15149  066C  3504               	lslf	4,w
 15150  066D  3E00               	addlw	low i1S8581
 15151  066E  0082               	movwf	2
 15152  066F                     i1l5281:	
 15153                           
 15154                           ;led.c: 742: updateDynamic();
 15155  066F  3192  2258         	fcall	i1_updateDynamic
 15156  0671  0008               	return
 15157  0672                     __end_of_ledThunder_2:	
 15158  0672                     __ptext72:	
 15159 ;; *************** function _ledAllCOlor *****************
 15160 ;; Defined at:
 15161 ;;		line 948 in file "src/led.c"
 15162 ;; Parameters:    Size  Location     Type
 15163 ;;		None
 15164 ;; Auto vars:     Size  Location     Type
 15165 ;;		None
 15166 ;; Return value:  Size  Location     Type
 15167 ;;                  1    wreg      void 
 15168 ;; Registers used:
 15169 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15170 ;; Tracked objects:
 15171 ;;		On entry : 1F/3
 15172 ;;		On exit  : 1F/3
 15173 ;;		Unchanged: 0/0
 15174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15178 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15179 ;;Total ram usage:        0 bytes
 15180 ;; Hardware stack levels used:    1
 15181 ;; Hardware stack levels required when called:    1
 15182 ;; This function calls:
 15183 ;;		i1_updateDynamic
 15184 ;; This function is called by:
 15185 ;;		_ledDynamic
 15186 ;; This function uses a non-reentrant model
 15187 ;;
 15188                           
 15189                           
 15190                           ;psect for function _ledAllCOlor
 15191  0672                     _ledAllCOlor:	
 15192                           
 15193                           ;led.c: 950: switch ( gDynPara.state )
 15194                           
 15195                           ;incstack = 0
 15196                           ; Regs used in _ledAllCOlor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15197  0672  2ED0               	goto	i1l5695
 15198  0673                     i1l5603:	
 15199                           
 15200                           ;led.c: 953: gDynPara.fDyn = 0x01;
 15201                           
 15202                           ;led.c: 954: gDynPara.fBrt = 0x00;
 15203                           
 15204                           ;led.c: 955: gDynPara.min[0] = 300;
 15205                           
 15206                           ;led.c: 956: gDynPara.max[0] = 700;
 15207                           
 15208                           ;led.c: 957: gLedRunPara.nCurrentBrt[1] = 0;
 15209                           
 15210                           ;led.c: 958: gLedRunPara.nCurrentBrt[2] = 1000;
 15211                           
 15212                           ;led.c: 959: gLedRunPara.nCurrentBrt[3] = 100;
 15213                           
 15214                           ;led.c: 960: gDynPara.delta[0] = 0.2;
 15215  0673  26F8  3184         	fcall	PL16	;call to abstracted procedure
 15216  0675  2ECC               	goto	L49
 15217  0676                     i1l5617:	
 15218                           ;led.c: 961: break;
 15219                           
 15220                           
 15221                           ;led.c: 963: gDynPara.fDyn = 0x03;
 15222  0676  0820               	movf	_gDynPara^(0+384),w	;volatile
 15223  0677  39F0               	andlw	-16
 15224  0678  3803               	iorlw	3
 15225  0679  00A0               	movwf	_gDynPara^(0+384)	;volatile
 15226                           
 15227                           ;led.c: 964: gDynPara.fBrt = 0x03;
 15228  067A  0820               	movf	_gDynPara^(0+384),w	;volatile
 15229  067B  390F               	andlw	-241
 15230  067C  3830               	iorlw	48
 15231                           
 15232                           ;led.c: 965: gDynPara.min[0] = 300;
 15233  067D  27C7  3184         	fcall	PL158	;call to abstracted procedure
 15234                           
 15235                           ;led.c: 966: gDynPara.max[0] = 700;
 15236                           
 15237                           ;led.c: 967: gDynPara.min[1] = 0;
 15238                           
 15239                           ;led.c: 968: gDynPara.max[1] = 700;
 15240  067F  2761  3184         	fcall	PL78	;call to abstracted procedure
 15241                           
 15242                           ;led.c: 969: gLedRunPara.nCurrentBrt[2] = 1000;
 15243  0681  3003               	movlw	3
 15244  0682  0020               	movlb	0	; select bank0
 15245                           
 15246                           ;led.c: 970: gLedRunPara.nCurrentBrt[3] = 100;
 15247  0683  2728  3184         	fcall	PL40	;call to abstracted procedure
 15248                           
 15249                           ;led.c: 971: gDynPara.delta[0] = 0.2;
 15250  0685  30CD               	movlw	205
 15251  0686  0023               	movlb	3	; select bank3
 15252  0687  00B1               	movwf	(_gDynPara^(0+384)+17)	;volatile
 15253  0688  304C               	movlw	76
 15254                           
 15255                           ;led.c: 972: gDynPara.delta[1] = 0.35;
 15256  0689  2776  3184         	fcall	PL82	;call to abstracted procedure
 15257                           
 15258                           ;led.c: 973: break;
 15259  068B  2EDA               	goto	i1l654
 15260  068C                     i1l5635:	
 15261                           
 15262                           ;led.c: 975: gDynPara.fDyn = 0x0F;
 15263  068C  300F               	movlw	15
 15264  068D  04A0               	iorwf	_gDynPara^(0+384),f	;volatile
 15265                           
 15266                           ;led.c: 976: gDynPara.fBrt = 0x08;
 15267  068E  0820               	movf	_gDynPara^(0+384),w	;volatile
 15268  068F  390F               	andlw	-241
 15269  0690  3880               	iorlw	128
 15270  0691  00A0               	movwf	_gDynPara^(0+384)	;volatile
 15271                           
 15272                           ;led.c: 977: gDynPara.min[0] = 0;
 15273  0692  01A1               	clrf	(_gDynPara^(0+384)+1)	;volatile
 15274  0693  01A2               	clrf	((_gDynPara+1)^(0+384)+1)	;volatile
 15275                           
 15276                           ;led.c: 978: gDynPara.max[0] = 700;
 15277                           
 15278                           ;led.c: 979: gDynPara.min[1] = 0;
 15279                           
 15280                           ;led.c: 980: gDynPara.max[1] = 700;
 15281  0694  2761  3184         	fcall	PL78	;call to abstracted procedure
 15282                           
 15283                           ;led.c: 981: gDynPara.min[2] = 0;
 15284                           
 15285                           ;led.c: 982: gDynPara.max[2] = 1000;
 15286  0696  2714  3184         	fcall	PL28	;call to abstracted procedure
 15287                           
 15288                           ;led.c: 983: gDynPara.min[3] = 100;
 15289                           
 15290                           ;led.c: 984: gDynPara.max[3] = 225;
 15291  0698  27BA  3184         	fcall	PL144	;call to abstracted procedure
 15292                           
 15293                           ;led.c: 985: gDynPara.delta[0] = 0.35;
 15294  069A  3033               	movlw	51
 15295  069B  00B1               	movwf	(_gDynPara^(0+384)+17)	;volatile
 15296  069C  30B3               	movlw	179
 15297                           
 15298                           ;led.c: 986: gDynPara.delta[1] = 0.35;
 15299  069D  2776  3184         	fcall	PL82	;call to abstracted procedure
 15300  069F  2EAD               	goto	L50
 15301  06A0                     i1l5661:	
 15302                           ;led.c: 989: break;
 15303                           
 15304                           ;led.c: 988: gDynPara.delta[3] = 0.0625;
 15305                           
 15306                           ;led.c: 987: gDynPara.delta[2] = 0.5;
 15307                           
 15308                           
 15309                           ;led.c: 991: gDynPara.fDyn = 0x0C;
 15310  06A0  2751  3184         	fcall	PL60	;call to abstracted procedure
 15311                           
 15312                           ;led.c: 992: gDynPara.fBrt = 0x04;
 15313  06A2  0820               	movf	_gDynPara^(0+384),w	;volatile
 15314  06A3  390F               	andlw	-241
 15315  06A4  3840               	iorlw	64
 15316  06A5  00A0               	movwf	_gDynPara^(0+384)	;volatile
 15317                           
 15318                           ;led.c: 993: gDynPara.min[2] = 0;
 15319                           
 15320                           ;led.c: 994: gDynPara.max[2] = 1000;
 15321  06A6  2714  3184         	fcall	PL28	;call to abstracted procedure
 15322                           
 15323                           ;led.c: 995: gDynPara.min[3] = 100;
 15324                           
 15325                           ;led.c: 996: gDynPara.max[3] = 225;
 15326  06A8  27BA  3184         	fcall	PL144	;call to abstracted procedure
 15327                           
 15328                           ;led.c: 997: gLedRunPara.nCurrentBrt[0] = 0;
 15329                           
 15330                           ;led.c: 998: gLedRunPara.nCurrentBrt[1] = 0;
 15331  06AA  26F2  3184         	fcall	PL12	;call to abstracted procedure
 15332                           
 15333                           ;led.c: 999: gDynPara.delta[2] = 0.5;
 15334  06AC  0023               	movlb	3	; select bank3
 15335  06AD                     L50:	
 15336                           
 15337                           ;led.c: 1000: gDynPara.delta[3] = 0.0625;
 15338  06AD  27C1  3184         	fcall	PL148	;call to abstracted procedure
 15339  06AF  3080               	movlw	128
 15340  06B0  00BB               	movwf	((_gDynPara+1)^(0+384)+26)	;volatile
 15341  06B1  303D               	movlw	61
 15342  06B2  00BC               	movwf	((_gDynPara+2)^(0+384)+26)	;volatile
 15343                           
 15344                           ;led.c: 1001: break;
 15345  06B3  2EDA               	goto	i1l654
 15346  06B4                     i1l5679:	
 15347                           
 15348                           ;led.c: 1003: gDynPara.fDyn = 0x01;
 15349  06B4  0820               	movf	_gDynPara^(0+384),w	;volatile
 15350  06B5  39F0               	andlw	-16
 15351  06B6  3801               	iorlw	1
 15352  06B7  00A0               	movwf	_gDynPara^(0+384)	;volatile
 15353                           
 15354                           ;led.c: 1004: gDynPara.fBrt = 0x01;
 15355  06B8  0820               	movf	_gDynPara^(0+384),w	;volatile
 15356  06B9  390F               	andlw	-241
 15357  06BA  3810               	iorlw	16
 15358  06BB  00A0               	movwf	_gDynPara^(0+384)	;volatile
 15359                           
 15360                           ;led.c: 1005: gDynPara.min[0] = 0;
 15361  06BC  01A1               	clrf	(_gDynPara^(0+384)+1)	;volatile
 15362  06BD  01A2               	clrf	((_gDynPara+1)^(0+384)+1)	;volatile
 15363                           
 15364                           ;led.c: 1006: gDynPara.max[0] = 700;
 15365  06BE  3002               	movlw	2
 15366  06BF  00AA               	movwf	((_gDynPara+1)^(0+384)+9)	;volatile
 15367  06C0  30BC               	movlw	188
 15368  06C1  00A9               	movwf	(_gDynPara^(0+384)+9)	;volatile
 15369                           
 15370                           ;led.c: 1007: gLedRunPara.nCurrentBrt[1] = 0;
 15371  06C2  0020               	movlb	0	; select bank0
 15372  06C3  01D8               	clrf	_gLedRunPara+15	;volatile
 15373  06C4  01D9               	clrf	_gLedRunPara+16	;volatile
 15374                           
 15375                           ;led.c: 1008: gLedRunPara.nCurrentBrt[2] = 1000;
 15376  06C5  3003               	movlw	3
 15377                           
 15378                           ;led.c: 1009: gLedRunPara.nCurrentBrt[3] = 100;
 15379  06C6  2728  3184         	fcall	PL40	;call to abstracted procedure
 15380                           
 15381                           ;led.c: 1010: gDynPara.delta[0] = 0.35;
 15382  06C8  3033               	movlw	51
 15383  06C9  0023               	movlb	3	; select bank3
 15384  06CA  00B1               	movwf	(_gDynPara^(0+384)+17)	;volatile
 15385  06CB  30B3               	movlw	179
 15386  06CC                     L49:	
 15387  06CC  00B2               	movwf	((_gDynPara+1)^(0+384)+17)	;volatile
 15388  06CD  303E               	movlw	62
 15389  06CE  00B3               	movwf	((_gDynPara+2)^(0+384)+17)	;volatile
 15390                           
 15391                           ;led.c: 1011: break;
 15392  06CF  2EDA               	goto	i1l654
 15393  06D0                     i1l5695:	
 15394  06D0  083F               	movf	(_gDynPara^(0+384)+31),w	;volatile
 15395                           
 15396                           ; Switch size 1, requested type "space"
 15397                           ; Number of cases is 5, Range of values is 0 to 4
 15398                           ; switch strategies available:
 15399                           ; Name         Instructions Cycles
 15400                           ; direct_byte           16     6 (fixed)
 15401                           ; simple_byte           16     9 (average)
 15402                           ; jumptable            260     6 (fixed)
 15403                           ;	Chosen strategy is direct_byte
 15404  06D1  0084               	movwf	4
 15405  06D2  3005               	movlw	5
 15406  06D3  0204               	subwf	4,w
 15407  06D4  1803               	skipnc
 15408  06D5  2EDA               	goto	i1l654
 15409  06D6  3198               	movlp	high i1S8585
 15410  06D7  3504               	lslf	4,w
 15411  06D8  3E7B               	addlw	low i1S8585
 15412  06D9  0082               	movwf	2
 15413  06DA                     i1l654:	
 15414                           
 15415                           ;led.c: 1015: gDynPara.cnt = 2000;
 15416  06DA  3007               	movlw	7
 15417  06DB  00BE               	movwf	((_gDynPara+1)^(0+384)+29)	;volatile
 15418  06DC  30D0               	movlw	208
 15419  06DD  00BD               	movwf	(_gDynPara^(0+384)+29)	;volatile
 15420                           
 15421                           ;led.c: 1016: updateDynamic();
 15422  06DE  3192  2258         	fcall	i1_updateDynamic
 15423  06E0  0008               	return
 15424  06E1                     __end_of_ledAllCOlor:	
 15425  06E1                     __ptext66:	
 15426 ;; *************** function i1___lwtoft *****************
 15427 ;; Defined at:
 15428 ;;		line 28 in file "D:\Program Files\Microchip\xc8\v1.41\sources\common\lwtoft.c"
 15429 ;; Parameters:    Size  Location     Type
 15430 ;;  c               2    8[COMMON] unsigned int 
 15431 ;; Auto vars:     Size  Location     Type
 15432 ;;		None
 15433 ;; Return value:  Size  Location     Type
 15434 ;;                  3    8[COMMON] float 
 15435 ;; Registers used:
 15436 ;;		wreg, status,2, status,0, pclath, cstack
 15437 ;; Tracked objects:
 15438 ;;		On entry : 1F/3
 15439 ;;		On exit  : 1C/0
 15440 ;;		Unchanged: 1C/0
 15441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15442 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15445 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15446 ;;Total ram usage:        3 bytes
 15447 ;; Hardware stack levels used:    1
 15448 ;; Hardware stack levels required when called:    1
 15449 ;; This function calls:
 15450 ;;		i1___ftpack
 15451 ;; This function is called by:
 15452 ;;		_ledSunrs
 15453 ;;		_ledDynamic
 15454 ;; This function uses a non-reentrant model
 15455 ;;
 15456                           
 15457                           
 15458                           ;psect for function i1___lwtoft
 15459  06E1                     i1___lwtoft:	
 15460                           
 15461                           ;incstack = 0
 15462                           ; Regs used in i1___lwtoft: [wreg+status,2+status,0+pclath+cstack]
 15463  06E1  0878               	movf	i1___lwtoft@c,w
 15464  06E2  00F0               	movwf	i1___ftpack@arg
 15465  06E3  0879               	movf	i1___lwtoft@c+1,w
 15466  06E4  00F1               	movwf	i1___ftpack@arg+1
 15467  06E5  308E               	movlw	142
 15468  06E6  01F2               	clrf	i1___ftpack@arg+2
 15469  06E7  00F3               	movwf	i1___ftpack@exp
 15470  06E8  01F4               	clrf	i1___ftpack@sign
 15471  06E9  3193  23AE         	fcall	i1___ftpack
 15472  06EB  0870               	movf	?i1___ftpack,w
 15473  06EC  00F8               	movwf	?i1___lwtoft
 15474  06ED  0871               	movf	?i1___ftpack+1,w
 15475  06EE  00F9               	movwf	?i1___lwtoft+1
 15476  06EF  0872               	movf	?i1___ftpack+2,w
 15477  06F0  00FA               	movwf	?i1___lwtoft+2
 15478  06F1  0008               	return
 15479  06F2                     __end_ofi1___lwtoft:	
 15480  06F2                     PL12:	
 15481  06F2  0020               	movlb	0	; select bank0
 15482  06F3  01D6               	clrf	_gLedRunPara+13	;volatile
 15483  06F4  01D7               	clrf	_gLedRunPara+14	;volatile
 15484  06F5  01D8               	clrf	_gLedRunPara+15	;volatile
 15485  06F6  01D9               	clrf	_gLedRunPara+16	;volatile
 15486  06F7  0008               	return
 15487  06F8                     __end_ofPL12:	
 15488  06F8                     PL16:	
 15489  06F8  0820               	movf	_gDynPara^(0+384),w	;volatile
 15490  06F9  39F0               	andlw	-16
 15491  06FA  3801               	iorlw	1
 15492  06FB  00A0               	movwf	_gDynPara^(0+384)	;volatile
 15493  06FC  300F               	movlw	-241
 15494  06FD  05A0               	andwf	_gDynPara^(0+384),f	;volatile
 15495  06FE  3001               	movlw	1
 15496  06FF  00A2               	movwf	((_gDynPara+1)^(0+384)+1)	;volatile
 15497  0700  302C               	movlw	44
 15498  0701  00A1               	movwf	(_gDynPara^(0+384)+1)	;volatile
 15499  0702  3002               	movlw	2
 15500  0703  00AA               	movwf	((_gDynPara+1)^(0+384)+9)	;volatile
 15501  0704  30BC               	movlw	188
 15502  0705  00A9               	movwf	(_gDynPara^(0+384)+9)	;volatile
 15503  0706  0020               	movlb	0	; select bank0
 15504  0707  01D8               	clrf	_gLedRunPara+15	;volatile
 15505  0708  01D9               	clrf	_gLedRunPara+16	;volatile
 15506  0709  3003               	movlw	3
 15507  070A  00DB               	movwf	_gLedRunPara+18	;volatile
 15508  070B  30E8               	movlw	232
 15509  070C  00DA               	movwf	_gLedRunPara+17	;volatile
 15510  070D  3064               	movlw	100
 15511  070E  00DC               	movwf	_gLedRunPara+19	;volatile
 15512  070F  01DD               	clrf	_gLedRunPara+20	;volatile
 15513  0710  30CD               	movlw	205
 15514  0711  0023               	movlb	3	; select bank3
 15515  0712  00B1               	movwf	(_gDynPara^(0+384)+17)	;volatile
 15516  0713  344C               	retlw	76
 15517  0714                     __end_ofPL16:	
 15518  0714                     PL28:	
 15519  0714  01A5               	clrf	(_gDynPara^(0+384)+5)	;volatile
 15520  0715  01A6               	clrf	((_gDynPara+1)^(0+384)+5)	;volatile
 15521  0716  3003               	movlw	3
 15522  0717  00AE               	movwf	((_gDynPara+1)^(0+384)+13)	;volatile
 15523  0718  30E8               	movlw	232
 15524  0719  00AD               	movwf	(_gDynPara^(0+384)+13)	;volatile
 15525  071A  0008               	return
 15526  071B                     __end_ofPL28:	
 15527  071B                     PL30:	
 15528  071B  390F               	andlw	15
 15529  071C  0020               	movlb	0	; select bank0
 15530  071D  00B9               	movwf	??_ledDynamic
 15531  071E  3001               	movlw	1
 15532  071F  00BA               	movwf	??_ledDynamic+1
 15533  0720  0A3F               	incf	ledDynamic@i,w
 15534  0721  2F23               	goto	u546_24
 15535  0722                     u546_25:	
 15536  0722  35BA               	lslf	??_ledDynamic+1,f
 15537  0723                     u546_24:	
 15538  0723  0B89               	decfsz	9,f
 15539  0724  2F22               	goto	u546_25
 15540  0725  083A               	movf	??_ledDynamic+1,w
 15541  0726  0539               	andwf	??_ledDynamic,w
 15542  0727  0008               	return
 15543  0728                     __end_ofPL30:	
 15544  0728                     PL40:	
 15545  0728  00DB               	movwf	_gLedRunPara+18	;volatile
 15546  0729  30E8               	movlw	232
 15547  072A  00DA               	movwf	_gLedRunPara+17	;volatile
 15548  072B  3064               	movlw	100
 15549  072C  00DC               	movwf	_gLedRunPara+19	;volatile
 15550  072D  01DD               	clrf	_gLedRunPara+20	;volatile
 15551  072E  0008               	return
 15552  072F                     __end_ofPL40:	
 15553  072F                     PL44:	
 15554  072F  0820               	movf	_gDynPara^(0+384),w	;volatile
 15555  0730  390F               	andlw	-241
 15556  0731  3840               	iorlw	64
 15557  0732  00A0               	movwf	_gDynPara^(0+384)	;volatile
 15558  0733  3064               	movlw	100
 15559  0734  00A5               	movwf	(_gDynPara^(0+384)+5)	;volatile
 15560  0735  01A6               	clrf	((_gDynPara+1)^(0+384)+5)	;volatile
 15561  0736  30D4               	movlw	212
 15562  0737  00AD               	movwf	(_gDynPara^(0+384)+13)	;volatile
 15563  0738  01AE               	clrf	((_gDynPara+1)^(0+384)+13)	;volatile
 15564  0739  300A               	movlw	10
 15565  073A  00A7               	movwf	(_gDynPara^(0+384)+7)	;volatile
 15566  073B  01A8               	clrf	((_gDynPara+1)^(0+384)+7)	;volatile
 15567  073C  3064               	movlw	100
 15568  073D  00AF               	movwf	(_gDynPara^(0+384)+15)	;volatile
 15569  073E  01B0               	clrf	((_gDynPara+1)^(0+384)+15)	;volatile
 15570  073F  0008               	return
 15571  0740                     __end_ofPL44:	
 15572  0740                     PL52:	
 15573  0740  3033               	movlw	51
 15574  0741  0023               	movlb	3	; select bank3
 15575  0742  00B7               	movwf	(_gDynPara^(0+384)+23)	;volatile
 15576  0743  30B3               	movlw	179
 15577  0744  00B8               	movwf	((_gDynPara+1)^(0+384)+23)	;volatile
 15578  0745  303F               	movlw	63
 15579  0746  00B9               	movwf	((_gDynPara+2)^(0+384)+23)	;volatile
 15580  0747  0008               	return
 15581  0748                     __end_ofPL52:	
 15582  0748                     PL56:	
 15583  0748  0820               	movf	_gDynPara^(0+384),w	;volatile
 15584  0749  39F0               	andlw	-16
 15585  074A  3804               	iorlw	4
 15586  074B  00A0               	movwf	_gDynPara^(0+384)	;volatile
 15587  074C  0820               	movf	_gDynPara^(0+384),w	;volatile
 15588  074D  390F               	andlw	-241
 15589  074E  3840               	iorlw	64
 15590  074F  00A0               	movwf	_gDynPara^(0+384)	;volatile
 15591  0750  0008               	return
 15592  0751                     __end_ofPL56:	
 15593  0751                     PL60:	
 15594  0751  0820               	movf	_gDynPara^(0+384),w	;volatile
 15595  0752  39F0               	andlw	-16
 15596  0753  380C               	iorlw	12
 15597  0754  00A0               	movwf	_gDynPara^(0+384)	;volatile
 15598  0755  0008               	return
 15599  0756                     __end_ofPL60:	
 15600  0756                     PL76:	
 15601  0756  3EB1               	addlw	(low ((_gDynPara| (0+256)+17)))& (0+255)
 15602  0757  0086               	movwf	6
 15603  0758  3001               	movlw	1	; select bank3/4
 15604  0759  0087               	movwf	7
 15605  075A  3F40               	moviw [0]fsr1
 15606  075B  00A0               	movwf	i1___ftmul@f1
 15607  075C  3F41               	moviw [1]fsr1
 15608  075D  00A1               	movwf	i1___ftmul@f1+1
 15609  075E  3F42               	moviw [2]fsr1
 15610  075F  00A2               	movwf	i1___ftmul@f1+2
 15611  0760  0008               	return
 15612  0761                     __end_ofPL76:	
 15613  0761                     PL78:	
 15614  0761  3002               	movlw	2
 15615  0762  00AA               	movwf	((_gDynPara+1)^(0+384)+9)	;volatile
 15616  0763  30BC               	movlw	188
 15617  0764  00A9               	movwf	(_gDynPara^(0+384)+9)	;volatile
 15618  0765  01A3               	clrf	(_gDynPara^(0+384)+3)	;volatile
 15619  0766  01A4               	clrf	((_gDynPara+1)^(0+384)+3)	;volatile
 15620  0767  3002               	movlw	2
 15621  0768  00AC               	movwf	((_gDynPara+1)^(0+384)+11)	;volatile
 15622  0769  30BC               	movlw	188
 15623  076A  00AB               	movwf	(_gDynPara^(0+384)+11)	;volatile
 15624  076B  0008               	return
 15625  076C                     __end_ofPL78:	
 15626  076C                     PL80:	
 15627  076C  00D7               	movwf	_gLedRunPara+14	;volatile
 15628  076D  30C2               	movlw	194
 15629  076E  00D6               	movwf	_gLedRunPara+13	;volatile
 15630  076F  3001               	movlw	1
 15631  0770  00D9               	movwf	_gLedRunPara+16	;volatile
 15632  0771  30C2               	movlw	194
 15633  0772  00D8               	movwf	_gLedRunPara+15	;volatile
 15634  0773  3001               	movlw	1
 15635  0774  00DD               	movwf	_gLedRunPara+20	;volatile
 15636  0775  0008               	return
 15637  0776                     __end_ofPL80:	
 15638  0776                     PL82:	
 15639  0776  00B2               	movwf	((_gDynPara+1)^(0+384)+17)	;volatile
 15640  0777  303E               	movlw	62
 15641  0778  00B3               	movwf	((_gDynPara+2)^(0+384)+17)	;volatile
 15642  0779  3033               	movlw	51
 15643  077A  00B4               	movwf	(_gDynPara^(0+384)+20)	;volatile
 15644  077B  30B3               	movlw	179
 15645  077C  00B5               	movwf	((_gDynPara+1)^(0+384)+20)	;volatile
 15646  077D  303E               	movlw	62
 15647  077E  00B6               	movwf	((_gDynPara+2)^(0+384)+20)	;volatile
 15648  077F  0008               	return
 15649  0780                     __end_ofPL82:	
 15650  0780                     PL84:	
 15651  0780  00BC               	movwf	??_ledDynamic+3
 15652  0781  353F               	lslf	ledDynamic@i,w
 15653  0782  3E56               	addlw	(low ((_gLedRunPara| 0+13)))& (0+255)
 15654  0783  0086               	movwf	6
 15655  0784  0187               	clrf	7
 15656  0785  083B               	movf	??_ledDynamic+2,w
 15657  0786  3FC0               	movwi [0]fsr1
 15658  0787  083C               	movf	??_ledDynamic+3,w
 15659  0788  3FC1               	movwi [1]fsr1
 15660  0789  0008               	return
 15661  078A                     __end_ofPL84:	
 15662  078A                     PL86:	
 15663  078A  0820               	movf	_gDynPara^(0+384),w	;volatile
 15664  078B  39F0               	andlw	-16
 15665  078C  380C               	iorlw	12
 15666  078D  00A0               	movwf	_gDynPara^(0+384)	;volatile
 15667  078E  300F               	movlw	-241
 15668  078F  05A0               	andwf	_gDynPara^(0+384),f	;volatile
 15669  0790  3064               	movlw	100
 15670  0791  00A5               	movwf	(_gDynPara^(0+384)+5)	;volatile
 15671  0792  01A6               	clrf	((_gDynPara+1)^(0+384)+5)	;volatile
 15672  0793  0008               	return
 15673  0794                     __end_ofPL86:	
 15674  0794                     PL106:	
 15675  0794  0086               	movwf	6
 15676  0795  3001               	movlw	1	; select bank3/4
 15677  0796  0087               	movwf	7
 15678  0797  3F40               	moviw [0]fsr1
 15679  0798  00B9               	movwf	??_ledDynamic
 15680  0799  3F41               	moviw [1]fsr1
 15681  079A  00BA               	movwf	??_ledDynamic+1
 15682  079B  083D               	movf	ledDynamic@temp,w
 15683  079C  0008               	return
 15684  079D                     __end_ofPL106:	
 15685  079D                     PL114:	
 15686  079D  30C8               	movlw	200
 15687  079E  00DC               	movwf	_gLedRunPara+19	;volatile
 15688  079F  01DD               	clrf	_gLedRunPara+20	;volatile
 15689  07A0  3001               	movlw	1
 15690  07A1  0023               	movlb	3	; select bank3
 15691  07A2  00BE               	movwf	((_gDynPara+1)^(0+384)+29)	;volatile
 15692  07A3  34F4               	retlw	244
 15693  07A4                     __end_ofPL114:	
 15694  07A4                     PL118:	
 15695  07A4  0878               	movf	?i1___lwtoft,w
 15696  07A5  0020               	movlb	0	; select bank0
 15697  07A6  00A3               	movwf	i1___ftmul@f2
 15698  07A7  0879               	movf	?i1___lwtoft+1,w
 15699  07A8  00A4               	movwf	i1___ftmul@f2+1
 15700  07A9  087A               	movf	?i1___lwtoft+2,w
 15701  07AA  00A5               	movwf	i1___ftmul@f2+2
 15702  07AB  0008               	return
 15703  07AC                     __end_ofPL118:	
 15704  07AC                     PL132:	
 15705  07AC  082C               	movf	___fttol@f1,w
 15706  07AD  00B0               	movwf	??___fttol
 15707  07AE  082D               	movf	___fttol@f1+1,w
 15708  07AF  00B1               	movwf	??___fttol+1
 15709  07B0  082E               	movf	___fttol@f1+2,w
 15710  07B1  00B2               	movwf	??___fttol+2
 15711  07B2  0008               	return
 15712  07B3                     __end_ofPL132:	
 15713  07B3                     PL138:	
 15714  07B3  0820               	movf	?i1___ftmul,w
 15715  07B4  00AC               	movwf	___fttol@f1
 15716  07B5  0821               	movf	?i1___ftmul+1,w
 15717  07B6  00AD               	movwf	___fttol@f1+1
 15718  07B7  0822               	movf	?i1___ftmul+2,w
 15719  07B8  00AE               	movwf	___fttol@f1+2
 15720  07B9  0008               	return
 15721  07BA                     __end_ofPL138:	
 15722  07BA                     PL144:	
 15723  07BA  3064               	movlw	100
 15724  07BB  00A7               	movwf	(_gDynPara^(0+384)+7)	;volatile
 15725  07BC  01A8               	clrf	((_gDynPara+1)^(0+384)+7)	;volatile
 15726  07BD  30E1               	movlw	225
 15727  07BE  00AF               	movwf	(_gDynPara^(0+384)+15)	;volatile
 15728  07BF  01B0               	clrf	((_gDynPara+1)^(0+384)+15)	;volatile
 15729  07C0  0008               	return
 15730  07C1                     __end_ofPL144:	
 15731  07C1                     PL148:	
 15732  07C1  01B7               	clrf	(_gDynPara^(0+384)+23)	;volatile
 15733  07C2  01B8               	clrf	((_gDynPara+1)^(0+384)+23)	;volatile
 15734  07C3  303F               	movlw	63
 15735  07C4  00B9               	movwf	((_gDynPara+2)^(0+384)+23)	;volatile
 15736  07C5  01BA               	clrf	(_gDynPara^(0+384)+26)	;volatile
 15737  07C6  0008               	return
 15738  07C7                     __end_ofPL148:	
 15739  07C7                     PL158:	
 15740  07C7  00A0               	movwf	_gDynPara^(0+384)	;volatile
 15741  07C8  3001               	movlw	1
 15742  07C9  00A2               	movwf	((_gDynPara+1)^(0+384)+1)	;volatile
 15743  07CA  302C               	movlw	44
 15744  07CB  00A1               	movwf	(_gDynPara^(0+384)+1)	;volatile
 15745  07CC  0008               	return
 15746  07CD                     __end_ofPL158:	
 15747  07CD                     PL162:	
 15748  07CD  0023               	movlb	3	; select bank3
 15749  07CE  0841               	movf	((_gDynPara+1)^(0+384)+32),w	;volatile
 15750  07CF  00F9               	movwf	i1___lwtoft@c+1
 15751  07D0  0840               	movf	(_gDynPara^(0+384)+32),w	;volatile
 15752  07D1  00F8               	movwf	i1___lwtoft@c
 15753  07D2  0008               	return
 15754  07D3                     __end_ofPL162:	
 15755  07D3                     PL166:	
 15756  07D3  0023               	movlb	3	; select bank3
 15757  07D4  00BD               	movwf	(_gDynPara^(0+384)+29)	;volatile
 15758  07D5  01BE               	clrf	((_gDynPara+1)^(0+384)+29)	;volatile
 15759  07D6  0008               	return
 15760  07D7                     __end_ofPL166:	
 15761  07D7                     PL186:	
 15762  07D7  3001               	movlw	1
 15763  07D8  00DD               	movwf	_gLedRunPara+20	;volatile
 15764  07D9  302C               	movlw	44
 15765  07DA  00DC               	movwf	_gLedRunPara+19	;volatile
 15766  07DB  0008               	return
 15767  07DC                     __end_ofPL186:	
 15768                           
 15769                           	psect	swtext3
 15770  184F                     __pswtext3:	
 15771  184F                     i1S8577:	
 15772  184F  3184  2C55         	ljmp	i1l6605
 15773  1851  3184  2C60         	ljmp	i1l6613
 15774  1853  3184  2C69         	ljmp	i1l6621
 15775  1855  3184  2C73         	ljmp	i1l6629
 15776  1857  3184  2C7C         	ljmp	i1l690
 15777  1859  3184  2C7C         	ljmp	i1l6637
 15778  185B  3184  2C7C         	ljmp	i1l6637
 15779  185D  3184  2C7C         	ljmp	i1l6637
 15780  185F  3184  2C7C         	ljmp	i1l6637
 15781  1861  3184  2C7C         	ljmp	i1l6637
 15782  1863  3184  2C7C         	ljmp	i1l6637
 15783                           
 15784                           	psect	text69
 15785  10AF                     __ptext69:	
 15786 ;; *************** function _ledThunder_3 *****************
 15787 ;; Defined at:
 15788 ;;		line 745 in file "src/led.c"
 15789 ;; Parameters:    Size  Location     Type
 15790 ;;		None
 15791 ;; Auto vars:     Size  Location     Type
 15792 ;;		None
 15793 ;; Return value:  Size  Location     Type
 15794 ;;                  1    wreg      void 
 15795 ;; Registers used:
 15796 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15797 ;; Tracked objects:
 15798 ;;		On entry : 1F/3
 15799 ;;		On exit  : 1F/3
 15800 ;;		Unchanged: 0/0
 15801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15805 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15806 ;;Total ram usage:        0 bytes
 15807 ;; Hardware stack levels used:    1
 15808 ;; Hardware stack levels required when called:    1
 15809 ;; This function calls:
 15810 ;;		i1_updateDynamic
 15811 ;; This function is called by:
 15812 ;;		_ledDynamic
 15813 ;; This function uses a non-reentrant model
 15814 ;;
 15815                           
 15816                           
 15817                           ;psect for function _ledThunder_3
 15818  10AF                     _ledThunder_3:	
 15819                           
 15820                           ;led.c: 747: switch ( gDynPara.state )
 15821                           
 15822                           ;incstack = 0
 15823                           ; Regs used in _ledThunder_3: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15824  10AF  29EC               	goto	i1l5593
 15825  10B0                     i1l5291:	
 15826                           
 15827                           ;led.c: 750: case 2:
 15828                           ;led.c: 751: gDynPara.fDyn = 0x0F;
 15829  10B0  300F               	movlw	15
 15830  10B1  04A0               	iorwf	_gDynPara^(0+384),f	;volatile
 15831                           
 15832                           ;led.c: 752: gDynPara.fBrt = 0x06;
 15833  10B2  0820               	movf	_gDynPara^(0+384),w	;volatile
 15834  10B3  390F               	andlw	-241
 15835  10B4  3860               	iorlw	96
 15836  10B5                     L22:	
 15837                           
 15838                           ;led.c: 753: gDynPara.min[0] = 0;
 15839                           
 15840                           ;led.c: 754: gDynPara.max[0] = 1000;
 15841                           
 15842                           ;led.c: 755: gDynPara.min[1] = 0;
 15843                           
 15844                           ;led.c: 756: gDynPara.max[1] = 500;
 15845                           
 15846                           ;led.c: 757: gDynPara.min[2] = 0;
 15847                           
 15848                           ;led.c: 758: gDynPara.max[2] = 1000;
 15849  10B5  21F8  3190         	fcall	PL2	;call to abstracted procedure
 15850                           
 15851                           ;led.c: 759: gDynPara.min[3] = 700;
 15852  10B7  222C  3190         	fcall	PL20	;call to abstracted procedure
 15853                           
 15854                           ;led.c: 760: gDynPara.max[3] = 1000;
 15855                           
 15856                           ;led.c: 761: gDynPara.delta[0] = 1;
 15857                           
 15858                           ;led.c: 762: gDynPara.delta[1] = 0.5;
 15859                           
 15860                           ;led.c: 763: gDynPara.delta[2] = 1;
 15861  10B9  221A  3190         	fcall	PL14	;call to abstracted procedure
 15862                           
 15863                           ;led.c: 764: gDynPara.delta[3] = 0.3;
 15864  10BB  309A               	movlw	154
 15865  10BC  00BA               	movwf	(_gDynPara^(0+384)+26)	;volatile
 15866  10BD  3099               	movlw	153
 15867  10BE                     L30:	
 15868  10BE  00BB               	movwf	((_gDynPara+1)^(0+384)+26)	;volatile
 15869  10BF  303E               	movlw	62
 15870  10C0                     L23:	
 15871  10C0  00BC               	movwf	((_gDynPara+2)^(0+384)+26)	;volatile
 15872  10C1                     i1l5317:	
 15873                           
 15874                           ;led.c: 765: gDynPara.cnt = 1000;
 15875  10C1  3003               	movlw	3
 15876  10C2  00BE               	movwf	((_gDynPara+1)^(0+384)+29)	;volatile
 15877  10C3  30E8               	movlw	232
 15878  10C4  29AB               	goto	L21
 15879  10C5                     i1l5319:	
 15880                           ;led.c: 766: break;
 15881                           
 15882                           
 15883                           ;led.c: 768: case 3:
 15884                           ;led.c: 769: gDynPara.fDyn = 0x0F;
 15885  10C5  300F               	movlw	15
 15886  10C6  04A0               	iorwf	_gDynPara^(0+384),f	;volatile
 15887                           
 15888                           ;led.c: 770: gDynPara.fBrt = 0x09;
 15889  10C7  0820               	movf	_gDynPara^(0+384),w	;volatile
 15890  10C8  390F               	andlw	-241
 15891  10C9  3890               	iorlw	144
 15892  10CA  28B5               	goto	L22
 15893  10CB                     i1l5347:	
 15894                           ;led.c: 782: gDynPara.delta[3] = 0.3;
 15895                           
 15896                           ;led.c: 781: gDynPara.delta[2] = 1;
 15897                           
 15898                           ;led.c: 780: gDynPara.delta[1] = 0.5;
 15899                           
 15900                           ;led.c: 779: gDynPara.delta[0] = 1;
 15901                           
 15902                           ;led.c: 778: gDynPara.max[3] = 1000;
 15903                           
 15904                           ;led.c: 777: gDynPara.min[3] = 700;
 15905                           
 15906                           ;led.c: 776: gDynPara.max[2] = 1000;
 15907                           
 15908                           ;led.c: 775: gDynPara.min[2] = 0;
 15909                           
 15910                           ;led.c: 774: gDynPara.max[1] = 500;
 15911                           
 15912                           ;led.c: 773: gDynPara.min[1] = 0;
 15913                           
 15914                           ;led.c: 772: gDynPara.max[0] = 1000;
 15915                           
 15916                           ;led.c: 771: gDynPara.min[0] = 0;
 15917                           
 15918                           
 15919                           ;led.c: 786: gDynPara.fDyn = 0x0F;
 15920  10CB  300F               	movlw	15
 15921                           
 15922                           ;led.c: 787: gDynPara.fBrt = 0x06;
 15923  10CC  2231  3190         	fcall	PL24	;call to abstracted procedure
 15924                           
 15925                           ;led.c: 788: gDynPara.min[0] = 0;
 15926                           
 15927                           ;led.c: 789: gDynPara.max[0] = 1000;
 15928                           
 15929                           ;led.c: 790: gDynPara.min[1] = 0;
 15930                           
 15931                           ;led.c: 791: gDynPara.max[1] = 500;
 15932                           
 15933                           ;led.c: 792: gDynPara.min[2] = 0;
 15934                           
 15935                           ;led.c: 793: gDynPara.max[2] = 1000;
 15936  10CE  21F8  3190         	fcall	PL2	;call to abstracted procedure
 15937                           
 15938                           ;led.c: 794: gDynPara.min[3] = 500;
 15939  10D0  3001               	movlw	1
 15940  10D1  00A8               	movwf	((_gDynPara+1)^(0+384)+7)	;volatile
 15941  10D2  30F4               	movlw	244
 15942  10D3  00A7               	movwf	(_gDynPara^(0+384)+7)	;volatile
 15943                           
 15944                           ;led.c: 795: gDynPara.max[3] = 1000;
 15945                           
 15946                           ;led.c: 796: gDynPara.delta[0] = 1;
 15947                           
 15948                           ;led.c: 797: gDynPara.delta[1] = 0.5;
 15949                           
 15950                           ;led.c: 798: gDynPara.delta[2] = 1;
 15951  10D4  221A  3190         	fcall	PL14	;call to abstracted procedure
 15952  10D6  28F1               	goto	L27
 15953  10D7                     i1l5375:	
 15954                           ;led.c: 799: gDynPara.delta[3] = 0.5;
 15955                           
 15956                           
 15957                           ;led.c: 803: gDynPara.fDyn = 0x0A;
 15958  10D7  0820               	movf	_gDynPara^(0+384),w	;volatile
 15959  10D8  39F0               	andlw	-16
 15960  10D9  380A               	iorlw	10
 15961  10DA  00A0               	movwf	_gDynPara^(0+384)	;volatile
 15962                           
 15963                           ;led.c: 804: gDynPara.fBrt = 0x00;
 15964  10DB  300F               	movlw	-241
 15965  10DC  05A0               	andwf	_gDynPara^(0+384),f	;volatile
 15966                           
 15967                           ;led.c: 805: gDynPara.min[1] = 0;
 15968                           
 15969                           ;led.c: 806: gDynPara.max[1] = 500;
 15970  10DD  2213  3190         	fcall	PL8	;call to abstracted procedure
 15971                           
 15972                           ;led.c: 807: gDynPara.min[3] = 0;
 15973  10DF  01A7               	clrf	(_gDynPara^(0+384)+7)	;volatile
 15974  10E0  01A8               	clrf	((_gDynPara+1)^(0+384)+7)	;volatile
 15975                           
 15976                           ;led.c: 808: gDynPara.max[3] = 500;
 15977  10E1  3001               	movlw	1
 15978  10E2  00B0               	movwf	((_gDynPara+1)^(0+384)+15)	;volatile
 15979  10E3  30F4               	movlw	244
 15980  10E4  00AF               	movwf	(_gDynPara^(0+384)+15)	;volatile
 15981                           
 15982                           ;led.c: 809: gLedRunPara.nCurrentBrt[0] = 0;
 15983  10E5  0020               	movlb	0	; select bank0
 15984  10E6  01D6               	clrf	_gLedRunPara+13	;volatile
 15985  10E7  01D7               	clrf	_gLedRunPara+14	;volatile
 15986                           
 15987                           ;led.c: 810: gLedRunPara.nCurrentBrt[2] = 1000;
 15988  10E8  3003               	movlw	3
 15989  10E9  00DB               	movwf	_gLedRunPara+18	;volatile
 15990  10EA  30E8               	movlw	232
 15991  10EB  00DA               	movwf	_gLedRunPara+17	;volatile
 15992                           
 15993                           ;led.c: 811: gDynPara.delta[1] = 0.5;
 15994  10EC  0023               	movlb	3	; select bank3
 15995  10ED  01B4               	clrf	(_gDynPara^(0+384)+20)	;volatile
 15996  10EE  01B5               	clrf	((_gDynPara+1)^(0+384)+20)	;volatile
 15997  10EF  303F               	movlw	63
 15998  10F0  00B6               	movwf	((_gDynPara+2)^(0+384)+20)	;volatile
 15999  10F1                     L27:	
 16000                           
 16001                           ;led.c: 812: gDynPara.delta[3] = 0.5;
 16002  10F1  01BA               	clrf	(_gDynPara^(0+384)+26)	;volatile
 16003  10F2  01BB               	clrf	((_gDynPara+1)^(0+384)+26)	;volatile
 16004  10F3  29EA               	goto	L28
 16005  10F4                     i1l5395:	
 16006                           
 16007                           ;led.c: 816: gDynPara.fDyn = 0x04;
 16008                           
 16009                           ;led.c: 817: gDynPara.fBrt = 0x00;
 16010  10F4  318B  23DB  3190   	fcall	PL72	;call to abstracted procedure
 16011                           
 16012                           ;led.c: 818: gDynPara.min[2] = 250;
 16013  10F7  30FA               	movlw	250
 16014  10F8  00A5               	movwf	(_gDynPara^(0+384)+5)	;volatile
 16015  10F9  01A6               	clrf	((_gDynPara+1)^(0+384)+5)	;volatile
 16016                           
 16017                           ;led.c: 819: gDynPara.max[2] = 1000;
 16018  10FA  318B  23C3  3190   	fcall	PL50	;call to abstracted procedure
 16019                           
 16020                           ;led.c: 820: gLedRunPara.nCurrentBrt[0] = 0;
 16021                           
 16022                           ;led.c: 821: gLedRunPara.nCurrentBrt[1] = 0;
 16023  10FD  3186  26F2  3190   	fcall	PL12	;call to abstracted procedure
 16024                           
 16025                           ;led.c: 822: gLedRunPara.nCurrentBrt[3] = 0;
 16026  1100  01DC               	clrf	_gLedRunPara+19	;volatile
 16027  1101  01DD               	clrf	_gLedRunPara+20	;volatile
 16028                           
 16029                           ;led.c: 823: gDynPara.delta[2] = 0.75;
 16030  1102  0023               	movlb	3	; select bank3
 16031  1103  01B7               	clrf	(_gDynPara^(0+384)+23)	;volatile
 16032  1104  3040               	movlw	64
 16033  1105  00B8               	movwf	((_gDynPara+1)^(0+384)+23)	;volatile
 16034  1106  303F               	movlw	63
 16035  1107  00B9               	movwf	((_gDynPara+2)^(0+384)+23)	;volatile
 16036  1108  28C1               	goto	i1l5317
 16037  1109                     i1l5411:	
 16038                           
 16039                           ;led.c: 827: gDynPara.fDyn = 0x08;
 16040  1109  0820               	movf	_gDynPara^(0+384),w	;volatile
 16041  110A  39F0               	andlw	-16
 16042  110B  3808               	iorlw	8
 16043                           
 16044                           ;led.c: 828: gDynPara.fBrt = 0x08;
 16045  110C  2245               	fcall	PL120	;call to abstracted procedure
 16046                           
 16047                           ;led.c: 829: gDynPara.min[3] = 0;
 16048  110D  01A7               	clrf	(_gDynPara^(0+384)+7)	;volatile
 16049  110E  01A8               	clrf	((_gDynPara+1)^(0+384)+7)	;volatile
 16050                           
 16051                           ;led.c: 830: gDynPara.max[3] = 450;
 16052  110F  3001               	movlw	1
 16053  1110  00B0               	movwf	((_gDynPara+1)^(0+384)+15)	;volatile
 16054  1111  30C2               	movlw	194
 16055  1112  00AF               	movwf	(_gDynPara^(0+384)+15)	;volatile
 16056                           
 16057                           ;led.c: 831: gLedRunPara.nCurrentBrt[0] = 0;
 16058                           
 16059                           ;led.c: 832: gLedRunPara.nCurrentBrt[1] = 0;
 16060  1113  3186  26F2  3190   	fcall	PL12	;call to abstracted procedure
 16061                           
 16062                           ;led.c: 833: gLedRunPara.nCurrentBrt[2] = 250;
 16063  1116  30FA               	movlw	250
 16064  1117  00DA               	movwf	_gLedRunPara+17	;volatile
 16065  1118  01DB               	clrf	_gLedRunPara+18	;volatile
 16066                           
 16067                           ;led.c: 834: gDynPara.delta[3] = 3;
 16068  1119  0023               	movlb	3	; select bank3
 16069  111A  01BA               	clrf	(_gDynPara^(0+384)+26)	;volatile
 16070  111B  3040               	movlw	64
 16071  111C  00BB               	movwf	((_gDynPara+1)^(0+384)+26)	;volatile
 16072  111D  00BC               	movwf	((_gDynPara+2)^(0+384)+26)	;volatile
 16073                           
 16074                           ;led.c: 835: gDynPara.cnt = 150;
 16075  111E  3096               	movlw	150
 16076  111F  295F               	goto	L25
 16077  1120                     i1l5427:	
 16078                           ;led.c: 836: break;
 16079                           
 16080                           
 16081                           ;led.c: 838: gDynPara.fDyn = 0x07;
 16082                           
 16083                           ;led.c: 839: gDynPara.fBrt = 0x07;
 16084  1120  2236  3190         	fcall	PL94	;call to abstracted procedure
 16085  1122  3870               	iorlw	112
 16086  1123  00A0               	movwf	_gDynPara^(0+384)	;volatile
 16087  1124                     L26:	
 16088                           
 16089                           ;led.c: 840: gDynPara.min[0] = 440;
 16090  1124  3001               	movlw	1
 16091  1125  00A2               	movwf	((_gDynPara+1)^(0+384)+1)	;volatile
 16092  1126  30B8               	movlw	184
 16093  1127  00A1               	movwf	(_gDynPara^(0+384)+1)	;volatile
 16094                           
 16095                           ;led.c: 841: gDynPara.max[0] = 500;
 16096  1128  3001               	movlw	1
 16097  1129  00AA               	movwf	((_gDynPara+1)^(0+384)+9)	;volatile
 16098  112A  30F4               	movlw	244
 16099  112B  00A9               	movwf	(_gDynPara^(0+384)+9)	;volatile
 16100                           
 16101                           ;led.c: 842: gDynPara.min[1] = 440;
 16102  112C  3001               	movlw	1
 16103  112D  00A4               	movwf	((_gDynPara+1)^(0+384)+3)	;volatile
 16104  112E  30B8               	movlw	184
 16105  112F  00A3               	movwf	(_gDynPara^(0+384)+3)	;volatile
 16106                           
 16107                           ;led.c: 843: gDynPara.max[1] = 500;
 16108  1130  3001               	movlw	1
 16109  1131  00AC               	movwf	((_gDynPara+1)^(0+384)+11)	;volatile
 16110  1132  30F4               	movlw	244
 16111  1133  00AB               	movwf	(_gDynPara^(0+384)+11)	;volatile
 16112                           
 16113                           ;led.c: 844: gDynPara.min[2] = 440;
 16114  1134  3001               	movlw	1
 16115  1135  00A6               	movwf	((_gDynPara+1)^(0+384)+5)	;volatile
 16116  1136  30B8               	movlw	184
 16117  1137  00A5               	movwf	(_gDynPara^(0+384)+5)	;volatile
 16118                           
 16119                           ;led.c: 845: gDynPara.max[2] = 500;
 16120  1138  3001               	movlw	1
 16121  1139  00AE               	movwf	((_gDynPara+1)^(0+384)+13)	;volatile
 16122  113A  30F4               	movlw	244
 16123                           
 16124                           ;led.c: 846: gLedRunPara.nCurrentBrt[3] = 250;
 16125                           
 16126                           ;led.c: 847: gDynPara.delta[0] = 4;
 16127  113B  223D  3190         	fcall	PL116	;call to abstracted procedure
 16128  113D  3080               	movlw	128
 16129  113E  00B2               	movwf	((_gDynPara+1)^(0+384)+17)	;volatile
 16130  113F  3040               	movlw	64
 16131  1140  00B3               	movwf	((_gDynPara+2)^(0+384)+17)	;volatile
 16132                           
 16133                           ;led.c: 848: gDynPara.delta[1] = 4;
 16134  1141  01B4               	clrf	(_gDynPara^(0+384)+20)	;volatile
 16135  1142  3080               	movlw	128
 16136  1143  00B5               	movwf	((_gDynPara+1)^(0+384)+20)	;volatile
 16137  1144  3040               	movlw	64
 16138  1145  00B6               	movwf	((_gDynPara+2)^(0+384)+20)	;volatile
 16139                           
 16140                           ;led.c: 849: gDynPara.delta[2] = 4;
 16141  1146  01B7               	clrf	(_gDynPara^(0+384)+23)	;volatile
 16142  1147  3080               	movlw	128
 16143  1148  00B8               	movwf	((_gDynPara+1)^(0+384)+23)	;volatile
 16144  1149  3040               	movlw	64
 16145  114A  00B9               	movwf	((_gDynPara+2)^(0+384)+23)	;volatile
 16146  114B                     i1l5449:	
 16147                           
 16148                           ;led.c: 850: gDynPara.cnt = 15;
 16149  114B  300F               	movlw	15
 16150  114C  295E               	goto	L29
 16151  114D                     i1l5451:	
 16152                           ;led.c: 851: break;
 16153                           
 16154                           
 16155                           ;led.c: 853: gDynPara.fDyn = 0x07;
 16156  114D  0820               	movf	_gDynPara^(0+384),w	;volatile
 16157  114E  39F0               	andlw	-16
 16158  114F  3807               	iorlw	7
 16159  1150  00A0               	movwf	_gDynPara^(0+384)	;volatile
 16160                           
 16161                           ;led.c: 854: gDynPara.fBrt = 0x00;
 16162  1151  300F               	movlw	-241
 16163  1152  05A0               	andwf	_gDynPara^(0+384),f	;volatile
 16164  1153  2924               	goto	L26
 16165  1154                     i1l5475:	
 16166                           ;led.c: 864: gDynPara.delta[2] = 4;
 16167                           
 16168                           ;led.c: 863: gDynPara.delta[1] = 4;
 16169                           
 16170                           ;led.c: 862: gDynPara.delta[0] = 4;
 16171                           
 16172                           ;led.c: 861: gLedRunPara.nCurrentBrt[3] = 250;
 16173                           
 16174                           ;led.c: 860: gDynPara.max[2] = 500;
 16175                           
 16176                           ;led.c: 859: gDynPara.min[2] = 440;
 16177                           
 16178                           ;led.c: 858: gDynPara.max[1] = 500;
 16179                           
 16180                           ;led.c: 857: gDynPara.min[1] = 440;
 16181                           
 16182                           ;led.c: 856: gDynPara.max[0] = 500;
 16183                           
 16184                           ;led.c: 855: gDynPara.min[0] = 440;
 16185                           
 16186                           
 16187                           ;led.c: 868: gDynPara.fDyn = 0x00;
 16188  1154  30F0               	movlw	-16
 16189  1155  05A0               	andwf	_gDynPara^(0+384),f	;volatile
 16190                           
 16191                           ;led.c: 869: gLedRunPara.nCurrentBrt[0] = 0;
 16192                           
 16193                           ;led.c: 870: gLedRunPara.nCurrentBrt[1] = 0;
 16194  1156  3186  26F2  3190   	fcall	PL12	;call to abstracted procedure
 16195                           
 16196                           ;led.c: 871: gLedRunPara.nCurrentBrt[2] = 0;
 16197  1159  01DA               	clrf	_gLedRunPara+17	;volatile
 16198  115A  01DB               	clrf	_gLedRunPara+18	;volatile
 16199                           
 16200                           ;led.c: 872: gLedRunPara.nCurrentBrt[3] = 0;
 16201  115B  01DC               	clrf	_gLedRunPara+19	;volatile
 16202  115C  01DD               	clrf	_gLedRunPara+20	;volatile
 16203  115D                     i1l5485:	
 16204                           
 16205                           ;led.c: 873: gDynPara.cnt = 30;
 16206  115D  301E               	movlw	30
 16207  115E                     L29:	
 16208  115E  0023               	movlb	3	; select bank3
 16209  115F                     L25:	
 16210  115F  00BD               	movwf	(_gDynPara^(0+384)+29)	;volatile
 16211  1160  01BE               	clrf	((_gDynPara+1)^(0+384)+29)	;volatile
 16212                           
 16213                           ;led.c: 874: break;
 16214  1161  29F6               	goto	i1l5595
 16215  1162                     i1l5487:	
 16216                           
 16217                           ;led.c: 876: gDynPara.fDyn = 0x00;
 16218  1162  30F0               	movlw	-16
 16219  1163  05A0               	andwf	_gDynPara^(0+384),f	;volatile
 16220                           
 16221                           ;led.c: 877: gLedRunPara.nCurrentBrt[0] = 0;
 16222                           
 16223                           ;led.c: 878: gLedRunPara.nCurrentBrt[1] = 0;
 16224  1164  3186  26F2  3190   	fcall	PL12	;call to abstracted procedure
 16225                           
 16226                           ;led.c: 879: gLedRunPara.nCurrentBrt[2] = 0;
 16227  1167  01DA               	clrf	_gLedRunPara+17	;volatile
 16228  1168  01DB               	clrf	_gLedRunPara+18	;volatile
 16229                           
 16230                           ;led.c: 880: gLedRunPara.nCurrentBrt[3] = 300;
 16231  1169  3187  27D7  3190   	fcall	PL186	;call to abstracted procedure
 16232  116C  295D               	goto	i1l5485
 16233  116D                     i1l5499:	
 16234                           
 16235                           ;led.c: 884: gDynPara.fDyn = 0x07;
 16236                           
 16237                           ;led.c: 885: gDynPara.fBrt = 0x07;
 16238  116D  2236               	fcall	PL94	;call to abstracted procedure
 16239  116E  3870               	iorlw	112
 16240                           
 16241                           ;led.c: 886: gDynPara.min[0] = 300;
 16242  116F  3187  27C7  3190   	fcall	PL158	;call to abstracted procedure
 16243                           
 16244                           ;led.c: 887: gDynPara.max[0] = 360;
 16245  1172  3001               	movlw	1
 16246  1173  00AA               	movwf	((_gDynPara+1)^(0+384)+9)	;volatile
 16247  1174  3068               	movlw	104
 16248  1175  00A9               	movwf	(_gDynPara^(0+384)+9)	;volatile
 16249                           
 16250                           ;led.c: 888: gDynPara.min[1] = 300;
 16251  1176  3001               	movlw	1
 16252  1177  00A4               	movwf	((_gDynPara+1)^(0+384)+3)	;volatile
 16253  1178  302C               	movlw	44
 16254  1179  00A3               	movwf	(_gDynPara^(0+384)+3)	;volatile
 16255                           
 16256                           ;led.c: 889: gDynPara.max[1] = 360;
 16257  117A  3001               	movlw	1
 16258  117B  00AC               	movwf	((_gDynPara+1)^(0+384)+11)	;volatile
 16259  117C  3068               	movlw	104
 16260  117D  00AB               	movwf	(_gDynPara^(0+384)+11)	;volatile
 16261                           
 16262                           ;led.c: 890: gDynPara.min[2] = 300;
 16263  117E  3001               	movlw	1
 16264  117F  00A6               	movwf	((_gDynPara+1)^(0+384)+5)	;volatile
 16265  1180  302C               	movlw	44
 16266  1181  00A5               	movwf	(_gDynPara^(0+384)+5)	;volatile
 16267                           
 16268                           ;led.c: 891: gDynPara.max[2] = 360;
 16269  1182  3001               	movlw	1
 16270  1183  00AE               	movwf	((_gDynPara+1)^(0+384)+13)	;volatile
 16271  1184  3068               	movlw	104
 16272                           
 16273                           ;led.c: 892: gLedRunPara.nCurrentBrt[3] = 250;
 16274                           
 16275                           ;led.c: 893: gDynPara.delta[0] = 2;
 16276  1185  223D  3190         	fcall	PL116	;call to abstracted procedure
 16277  1187  01B2               	clrf	((_gDynPara+1)^(0+384)+17)	;volatile
 16278  1188  3040               	movlw	64
 16279  1189  00B3               	movwf	((_gDynPara+2)^(0+384)+17)	;volatile
 16280                           
 16281                           ;led.c: 894: gDynPara.delta[1] = 2;
 16282  118A  01B4               	clrf	(_gDynPara^(0+384)+20)	;volatile
 16283  118B  01B5               	clrf	((_gDynPara+1)^(0+384)+20)	;volatile
 16284  118C  00B6               	movwf	((_gDynPara+2)^(0+384)+20)	;volatile
 16285                           
 16286                           ;led.c: 895: gDynPara.delta[2] = 2;
 16287  118D  01B7               	clrf	(_gDynPara^(0+384)+23)	;volatile
 16288  118E  01B8               	clrf	((_gDynPara+1)^(0+384)+23)	;volatile
 16289  118F  00B9               	movwf	((_gDynPara+2)^(0+384)+23)	;volatile
 16290  1190  295D               	goto	i1l5485
 16291  1191                     i1l5523:	
 16292                           
 16293                           ;led.c: 899: gDynPara.fDyn = 0x00;
 16294  1191  30F0               	movlw	-16
 16295  1192  05A0               	andwf	_gDynPara^(0+384),f	;volatile
 16296                           
 16297                           ;led.c: 900: gLedRunPara.nCurrentBrt[0] = 0;
 16298                           
 16299                           ;led.c: 901: gLedRunPara.nCurrentBrt[1] = 0;
 16300  1193  3186  26F2  3190   	fcall	PL12	;call to abstracted procedure
 16301                           
 16302                           ;led.c: 902: gLedRunPara.nCurrentBrt[2] = 250;
 16303  1196  30FA               	movlw	250
 16304  1197  00DA               	movwf	_gLedRunPara+17	;volatile
 16305  1198  01DB               	clrf	_gLedRunPara+18	;volatile
 16306                           
 16307                           ;led.c: 903: gLedRunPara.nCurrentBrt[3] = 100;
 16308  1199  3064               	movlw	100
 16309  119A  00DC               	movwf	_gLedRunPara+19	;volatile
 16310  119B  01DD               	clrf	_gLedRunPara+20	;volatile
 16311  119C  294B               	goto	i1l5449
 16312  119D                     i1l5535:	
 16313                           
 16314                           ;led.c: 907: gDynPara.fDyn = 0x00;
 16315  119D  30F0               	movlw	-16
 16316  119E  05A0               	andwf	_gDynPara^(0+384),f	;volatile
 16317                           
 16318                           ;led.c: 908: gLedRunPara.nCurrentBrt[0] = 0;
 16319                           
 16320                           ;led.c: 909: gLedRunPara.nCurrentBrt[1] = 0;
 16321  119F  3186  26F2  3190   	fcall	PL12	;call to abstracted procedure
 16322                           
 16323                           ;led.c: 910: gLedRunPara.nCurrentBrt[2] = 250;
 16324  11A2  30FA               	movlw	250
 16325  11A3  00DA               	movwf	_gLedRunPara+17	;volatile
 16326  11A4  01DB               	clrf	_gLedRunPara+18	;volatile
 16327                           
 16328                           ;led.c: 911: gLedRunPara.nCurrentBrt[3] = 0;
 16329  11A5  01DC               	clrf	_gLedRunPara+19	;volatile
 16330  11A6  01DD               	clrf	_gLedRunPara+20	;volatile
 16331                           
 16332                           ;led.c: 912: gDynPara.cnt = 3000;
 16333  11A7  300B               	movlw	11
 16334  11A8  0023               	movlb	3	; select bank3
 16335  11A9  00BE               	movwf	((_gDynPara+1)^(0+384)+29)	;volatile
 16336  11AA  30B8               	movlw	184
 16337  11AB                     L21:	
 16338  11AB  00BD               	movwf	(_gDynPara^(0+384)+29)	;volatile
 16339                           
 16340                           ;led.c: 913: break;
 16341  11AC  29F6               	goto	i1l5595
 16342  11AD                     i1l5547:	
 16343                           
 16344                           ;led.c: 915: gDynPara.fDyn = 0x0D;
 16345                           
 16346                           ;led.c: 916: gDynPara.fBrt = 0x0D;
 16347  11AD  224B  3190         	fcall	PL130	;call to abstracted procedure
 16348  11AF  38D0               	iorlw	208
 16349  11B0  00A0               	movwf	_gDynPara^(0+384)	;volatile
 16350                           
 16351                           ;led.c: 917: gDynPara.min[0] = 0;
 16352                           
 16353                           ;led.c: 918: gDynPara.max[0] = 1000;
 16354  11B1  220C  3190         	fcall	PL4	;call to abstracted procedure
 16355                           
 16356                           ;led.c: 919: gDynPara.min[2] = 250;
 16357  11B3  30FA               	movlw	250
 16358  11B4  00A5               	movwf	(_gDynPara^(0+384)+5)	;volatile
 16359                           
 16360                           ;led.c: 920: gDynPara.max[2] = 500;
 16361  11B5  2252  3190         	fcall	PL150	;call to abstracted procedure
 16362                           
 16363                           ;led.c: 921: gDynPara.min[3] = 0;
 16364  11B7  01A7               	clrf	(_gDynPara^(0+384)+7)	;volatile
 16365  11B8  01A8               	clrf	((_gDynPara+1)^(0+384)+7)	;volatile
 16366                           
 16367                           ;led.c: 922: gDynPara.max[3] = 250;
 16368  11B9  30FA               	movlw	250
 16369  11BA  00AF               	movwf	(_gDynPara^(0+384)+15)	;volatile
 16370  11BB  01B0               	clrf	((_gDynPara+1)^(0+384)+15)	;volatile
 16371                           
 16372                           ;led.c: 923: gLedRunPara.nCurrentBrt[1] = 0;
 16373  11BC  0020               	movlb	0	; select bank0
 16374  11BD  01D8               	clrf	_gLedRunPara+15	;volatile
 16375  11BE  01D9               	clrf	_gLedRunPara+16	;volatile
 16376                           
 16377                           ;led.c: 924: gDynPara.delta[0] = 1;
 16378  11BF  0023               	movlb	3	; select bank3
 16379  11C0  01B1               	clrf	(_gDynPara^(0+384)+17)	;volatile
 16380  11C1  3080               	movlw	128
 16381  11C2  00B2               	movwf	((_gDynPara+1)^(0+384)+17)	;volatile
 16382  11C3  303F               	movlw	63
 16383  11C4  00B3               	movwf	((_gDynPara+2)^(0+384)+17)	;volatile
 16384                           
 16385                           ;led.c: 925: gDynPara.delta[2] = 0.25;
 16386  11C5  01B7               	clrf	(_gDynPara^(0+384)+23)	;volatile
 16387  11C6  3080               	movlw	128
 16388  11C7  00B8               	movwf	((_gDynPara+1)^(0+384)+23)	;volatile
 16389  11C8  303E               	movlw	62
 16390  11C9  00B9               	movwf	((_gDynPara+2)^(0+384)+23)	;volatile
 16391                           
 16392                           ;led.c: 926: gDynPara.delta[3] = 0.25;
 16393  11CA  01BA               	clrf	(_gDynPara^(0+384)+26)	;volatile
 16394  11CB  3080               	movlw	128
 16395  11CC  28BE               	goto	L30
 16396  11CD                     i1l5571:	
 16397                           
 16398                           ;led.c: 930: gDynPara.fDyn = 0x0C;
 16399  11CD  3187  2751  3190   	fcall	PL60	;call to abstracted procedure
 16400                           
 16401                           ;led.c: 931: gDynPara.fBrt = 0x08;
 16402  11D0  0820               	movf	_gDynPara^(0+384),w	;volatile
 16403  11D1  390F               	andlw	-241
 16404  11D2  3880               	iorlw	128
 16405  11D3  00A0               	movwf	_gDynPara^(0+384)	;volatile
 16406                           
 16407                           ;led.c: 932: gDynPara.min[2] = 0;
 16408  11D4  01A5               	clrf	(_gDynPara^(0+384)+5)	;volatile
 16409                           
 16410                           ;led.c: 933: gDynPara.max[2] = 500;
 16411  11D5  2252               	fcall	PL150	;call to abstracted procedure
 16412                           
 16413                           ;led.c: 934: gDynPara.min[3] = 250;
 16414  11D6  30FA               	movlw	250
 16415  11D7  00A7               	movwf	(_gDynPara^(0+384)+7)	;volatile
 16416  11D8  01A8               	clrf	((_gDynPara+1)^(0+384)+7)	;volatile
 16417                           
 16418                           ;led.c: 935: gDynPara.max[3] = 1000;
 16419  11D9  3003               	movlw	3
 16420  11DA  00B0               	movwf	((_gDynPara+1)^(0+384)+15)	;volatile
 16421  11DB  30E8               	movlw	232
 16422  11DC  00AF               	movwf	(_gDynPara^(0+384)+15)	;volatile
 16423                           
 16424                           ;led.c: 936: gLedRunPara.nCurrentBrt[0] = 1000;
 16425  11DD  3003               	movlw	3
 16426  11DE  0020               	movlb	0	; select bank0
 16427  11DF  00D7               	movwf	_gLedRunPara+14	;volatile
 16428  11E0  30E8               	movlw	232
 16429  11E1  00D6               	movwf	_gLedRunPara+13	;volatile
 16430                           
 16431                           ;led.c: 937: gLedRunPara.nCurrentBrt[1] = 0;
 16432  11E2  01D8               	clrf	_gLedRunPara+15	;volatile
 16433  11E3  01D9               	clrf	_gLedRunPara+16	;volatile
 16434                           
 16435                           ;led.c: 938: gDynPara.delta[2] = 0.5;
 16436  11E4  0023               	movlb	3	; select bank3
 16437                           
 16438                           ;led.c: 939: gDynPara.delta[3] = 0.75;
 16439  11E5  3187  27C1  3190   	fcall	PL148	;call to abstracted procedure
 16440  11E8  3040               	movlw	64
 16441  11E9  00BB               	movwf	((_gDynPara+1)^(0+384)+26)	;volatile
 16442  11EA                     L28:	
 16443  11EA  303F               	movlw	63
 16444  11EB  28C0               	goto	L23
 16445  11EC                     i1l5593:	
 16446  11EC  083F               	movf	(_gDynPara^(0+384)+31),w	;volatile
 16447                           
 16448                           ; Switch size 1, requested type "space"
 16449                           ; Number of cases is 17, Range of values is 0 to 16
 16450                           ; switch strategies available:
 16451                           ; Name         Instructions Cycles
 16452                           ; direct_byte           40     6 (fixed)
 16453                           ; simple_byte           52    27 (average)
 16454                           ; jumptable            260     6 (fixed)
 16455                           ;	Chosen strategy is direct_byte
 16456  11ED  0084               	movwf	4
 16457  11EE  3011               	movlw	17
 16458  11EF  0204               	subwf	4,w
 16459  11F0  1803               	skipnc
 16460  11F1  29F6               	goto	i1l5595
 16461  11F2  3187               	movlp	high i1S8579
 16462  11F3  3504               	lslf	4,w
 16463  11F4  3EDC               	addlw	low i1S8579
 16464  11F5  0082               	movwf	2
 16465  11F6                     i1l5595:	
 16466                           
 16467                           ;led.c: 945: updateDynamic();
 16468  11F6  2258               	fcall	i1_updateDynamic
 16469  11F7  0008               	return
 16470  11F8                     __end_of_ledThunder_3:	
 16471  11F8                     PL2:	
 16472  11F8  00A0               	movwf	_gDynPara^(0+384)	;volatile
 16473  11F9  01A1               	clrf	(_gDynPara^(0+384)+1)	;volatile
 16474  11FA  01A2               	clrf	((_gDynPara+1)^(0+384)+1)	;volatile
 16475  11FB  3003               	movlw	3
 16476  11FC  00AA               	movwf	((_gDynPara+1)^(0+384)+9)	;volatile
 16477  11FD  30E8               	movlw	232
 16478  11FE  00A9               	movwf	(_gDynPara^(0+384)+9)	;volatile
 16479  11FF  01A3               	clrf	(_gDynPara^(0+384)+3)	;volatile
 16480  1200  01A4               	clrf	((_gDynPara+1)^(0+384)+3)	;volatile
 16481  1201  3001               	movlw	1
 16482  1202  00AC               	movwf	((_gDynPara+1)^(0+384)+11)	;volatile
 16483  1203  30F4               	movlw	244
 16484  1204  00AB               	movwf	(_gDynPara^(0+384)+11)	;volatile
 16485  1205  01A5               	clrf	(_gDynPara^(0+384)+5)	;volatile
 16486  1206  01A6               	clrf	((_gDynPara+1)^(0+384)+5)	;volatile
 16487  1207  3003               	movlw	3
 16488  1208  00AE               	movwf	((_gDynPara+1)^(0+384)+13)	;volatile
 16489  1209  30E8               	movlw	232
 16490  120A  00AD               	movwf	(_gDynPara^(0+384)+13)	;volatile
 16491  120B  0008               	return
 16492  120C                     __end_ofPL2:	
 16493  120C                     PL4:	
 16494  120C  01A1               	clrf	(_gDynPara^(0+384)+1)	;volatile
 16495  120D  01A2               	clrf	((_gDynPara+1)^(0+384)+1)	;volatile
 16496  120E  3003               	movlw	3
 16497  120F  00AA               	movwf	((_gDynPara+1)^(0+384)+9)	;volatile
 16498  1210  30E8               	movlw	232
 16499  1211  00A9               	movwf	(_gDynPara^(0+384)+9)	;volatile
 16500  1212  0008               	return
 16501  1213                     __end_ofPL4:	
 16502  1213                     PL8:	
 16503  1213  01A3               	clrf	(_gDynPara^(0+384)+3)	;volatile
 16504  1214  01A4               	clrf	((_gDynPara+1)^(0+384)+3)	;volatile
 16505  1215  3001               	movlw	1
 16506  1216  00AC               	movwf	((_gDynPara+1)^(0+384)+11)	;volatile
 16507  1217  30F4               	movlw	244
 16508  1218  00AB               	movwf	(_gDynPara^(0+384)+11)	;volatile
 16509  1219  0008               	return
 16510  121A                     __end_ofPL8:	
 16511  121A                     PL14:	
 16512  121A  3003               	movlw	3
 16513  121B  00B0               	movwf	((_gDynPara+1)^(0+384)+15)	;volatile
 16514  121C  30E8               	movlw	232
 16515  121D  00AF               	movwf	(_gDynPara^(0+384)+15)	;volatile
 16516  121E  01B1               	clrf	(_gDynPara^(0+384)+17)	;volatile
 16517  121F  3080               	movlw	128
 16518  1220  00B2               	movwf	((_gDynPara+1)^(0+384)+17)	;volatile
 16519  1221  303F               	movlw	63
 16520  1222  00B3               	movwf	((_gDynPara+2)^(0+384)+17)	;volatile
 16521  1223  01B4               	clrf	(_gDynPara^(0+384)+20)	;volatile
 16522  1224  01B5               	clrf	((_gDynPara+1)^(0+384)+20)	;volatile
 16523  1225  00B6               	movwf	((_gDynPara+2)^(0+384)+20)	;volatile
 16524  1226  01B7               	clrf	(_gDynPara^(0+384)+23)	;volatile
 16525  1227  3080               	movlw	128
 16526  1228  00B8               	movwf	((_gDynPara+1)^(0+384)+23)	;volatile
 16527  1229  303F               	movlw	63
 16528  122A  00B9               	movwf	((_gDynPara+2)^(0+384)+23)	;volatile
 16529  122B  0008               	return
 16530  122C                     __end_ofPL14:	
 16531  122C                     PL20:	
 16532  122C  3002               	movlw	2
 16533  122D  00A8               	movwf	((_gDynPara+1)^(0+384)+7)	;volatile
 16534  122E  30BC               	movlw	188
 16535  122F  00A7               	movwf	(_gDynPara^(0+384)+7)	;volatile
 16536  1230  0008               	return
 16537  1231                     __end_ofPL20:	
 16538  1231                     PL24:	
 16539  1231  04A0               	iorwf	_gDynPara^(0+384),f	;volatile
 16540  1232  0820               	movf	_gDynPara^(0+384),w	;volatile
 16541  1233  390F               	andlw	-241
 16542  1234  3860               	iorlw	96
 16543  1235  0008               	return
 16544  1236                     __end_ofPL24:	
 16545  1236                     PL94:	
 16546  1236  0820               	movf	_gDynPara^(0+384),w	;volatile
 16547  1237  39F0               	andlw	-16
 16548  1238  3807               	iorlw	7
 16549  1239  00A0               	movwf	_gDynPara^(0+384)	;volatile
 16550  123A  0820               	movf	_gDynPara^(0+384),w	;volatile
 16551  123B  390F               	andlw	-241
 16552  123C  0008               	return
 16553  123D                     __end_ofPL94:	
 16554  123D                     PL116:	
 16555  123D  00AD               	movwf	(_gDynPara^(0+384)+13)	;volatile
 16556  123E  30FA               	movlw	250
 16557  123F  0020               	movlb	0	; select bank0
 16558  1240  00DC               	movwf	_gLedRunPara+19	;volatile
 16559  1241  01DD               	clrf	_gLedRunPara+20	;volatile
 16560  1242  0023               	movlb	3	; select bank3
 16561  1243  01B1               	clrf	(_gDynPara^(0+384)+17)	;volatile
 16562  1244  0008               	return
 16563  1245                     __end_ofPL116:	
 16564  1245                     PL120:	
 16565  1245  00A0               	movwf	_gDynPara^(0+384)	;volatile
 16566  1246  0820               	movf	_gDynPara^(0+384),w	;volatile
 16567  1247  390F               	andlw	-241
 16568  1248  3880               	iorlw	128
 16569  1249  00A0               	movwf	_gDynPara^(0+384)	;volatile
 16570  124A  0008               	return
 16571  124B                     __end_ofPL120:	
 16572  124B                     PL130:	
 16573  124B  0820               	movf	_gDynPara^(0+384),w	;volatile
 16574  124C  39F0               	andlw	-16
 16575  124D  380D               	iorlw	13
 16576  124E  00A0               	movwf	_gDynPara^(0+384)	;volatile
 16577  124F  0820               	movf	_gDynPara^(0+384),w	;volatile
 16578  1250  390F               	andlw	-241
 16579  1251  0008               	return
 16580  1252                     __end_ofPL130:	
 16581  1252                     PL150:	
 16582  1252  01A6               	clrf	((_gDynPara+1)^(0+384)+5)	;volatile
 16583  1253  3001               	movlw	1
 16584  1254  00AE               	movwf	((_gDynPara+1)^(0+384)+13)	;volatile
 16585  1255  30F4               	movlw	244
 16586  1256  00AD               	movwf	(_gDynPara^(0+384)+13)	;volatile
 16587  1257  0008               	return
 16588  1258                     __end_ofPL150:	
 16589  1258                     __ptext73:	
 16590 ;; *************** function i1_updateDynamic *****************
 16591 ;; Defined at:
 16592 ;;		line 251 in file "src/led.c"
 16593 ;; Parameters:    Size  Location     Type
 16594 ;;		None
 16595 ;; Auto vars:     Size  Location     Type
 16596 ;;  updateDynami    1    2[COMMON] unsigned char 
 16597 ;; Return value:  Size  Location     Type
 16598 ;;                  1    wreg      void 
 16599 ;; Registers used:
 16600 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 16601 ;; Tracked objects:
 16602 ;;		On entry : 1F/3
 16603 ;;		On exit  : 1F/3
 16604 ;;		Unchanged: 0/0
 16605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16607 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16608 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16609 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16610 ;;Total ram usage:        3 bytes
 16611 ;; Hardware stack levels used:    1
 16612 ;; This function calls:
 16613 ;;		Nothing
 16614 ;; This function is called by:
 16615 ;;		_ledThunder_2
 16616 ;;		_ledThunder_3
 16617 ;;		_ledAllCOlor
 16618 ;; This function uses a non-reentrant model
 16619 ;;
 16620                           
 16621                           
 16622                           ;psect for function i1_updateDynamic
 16623  1258                     i1_updateDynamic:	
 16624                           
 16625                           ;led.c: 253: for ( unsigned char i = 0; i < 4; i++ )
 16626                           
 16627                           ;incstack = 0
 16628                           ; Regs used in i1_updateDynamic: [wreg-fsr1h+status,2+status,0]
 16629  1258  01F2               	clrf	i1updateDynamic@i
 16630  1259                     i1l4461:	
 16631                           
 16632                           ;led.c: 254: {
 16633                           ;led.c: 255: if ( gDynPara.fDyn & ( 1 << i ) )
 16634  1259  0820               	movf	_gDynPara^(0+384),w	;volatile
 16635  125A  2272  3190         	fcall	PL62	;call to abstracted procedure
 16636  125C  1903               	btfsc	3,2
 16637  125D  2A6C               	goto	i1l4469
 16638                           
 16639                           ;led.c: 256: {
 16640                           ;led.c: 257: if ( gDynPara.fBrt & ( 1 << i ) )
 16641  125E  0E20               	swapf	_gDynPara^(0+384),w	;volatile
 16642  125F  2272  3190         	fcall	PL62	;call to abstracted procedure
 16643  1261  1903               	btfsc	3,2
 16644  1262  2A66               	goto	i1l4467
 16645                           
 16646                           ;led.c: 258: {
 16647                           ;led.c: 259: gLedRunPara.nCurrentBrt[i] = gDynPara.min[i];
 16648  1263  3572               	lslf	i1updateDynamic@i,w
 16649  1264  3EA1               	addlw	(low ((_gDynPara| (0+256)+1)))& (0+255)
 16650  1265  2A68               	goto	L55
 16651  1266                     i1l4467:	
 16652                           ;led.c: 260: }
 16653                           
 16654                           
 16655                           ;led.c: 261: else
 16656                           ;led.c: 262: {
 16657                           ;led.c: 263: gLedRunPara.nCurrentBrt[i] = gDynPara.max[i];
 16658  1266  3572               	lslf	i1updateDynamic@i,w
 16659  1267  3EA9               	addlw	(low ((_gDynPara| (0+256)+9)))& (0+255)
 16660  1268                     L55:	
 16661  1268  227E               	fcall	PL70	;call to abstracted procedure
 16662  1269  318B  23B3  3190   	fcall	PL22	;call to abstracted procedure
 16663  126C                     i1l4469:	
 16664  126C  3004               	movlw	4
 16665  126D  0AF2               	incf	i1updateDynamic@i,f
 16666  126E  0272               	subwf	i1updateDynamic@i,w
 16667  126F  1803               	btfsc	3,0
 16668  1270  0008               	return
 16669  1271  2A59               	goto	i1l4461
 16670  1272                     __end_ofi1_updateDynamic:	
 16671  1272                     PL62:	
 16672  1272  390F               	andlw	15
 16673  1273  00F0               	movwf	??i1_updateDynamic
 16674  1274  3001               	movlw	1
 16675  1275  00F1               	movwf	??i1_updateDynamic+1
 16676  1276  0A72               	incf	i1updateDynamic@i,w
 16677  1277  2A79               	goto	u336_24
 16678  1278                     u336_25:	
 16679  1278  35F1               	lslf	??i1_updateDynamic+1,f
 16680  1279                     u336_24:	
 16681  1279  0B89               	decfsz	9,f
 16682  127A  2A78               	goto	u336_25
 16683  127B  0871               	movf	??i1_updateDynamic+1,w
 16684  127C  0570               	andwf	??i1_updateDynamic,w
 16685  127D  0008               	return
 16686  127E                     __end_ofPL62:	
 16687  127E                     PL70:	
 16688  127E  0086               	movwf	6
 16689  127F  3001               	movlw	1	; select bank3/4
 16690  1280  0087               	movwf	7
 16691  1281  3572               	lslf	i1updateDynamic@i,w
 16692  1282  3E56               	addlw	(low ((_gLedRunPara| 0+13)))& (0+255)
 16693  1283  0008               	return
 16694  1284                     __end_ofPL70:	
 16695                           
 16696                           	psect	swtext4
 16697  07DC                     __pswtext4:	
 16698  07DC                     i1S8579:	
 16699  07DC  3190  28B0         	ljmp	i1l5291
 16700  07DE  3190  28C5         	ljmp	i1l5319
 16701  07E0  3190  28B0         	ljmp	i1l5291
 16702  07E2  3190  28C5         	ljmp	i1l5319
 16703  07E4  3190  28CB         	ljmp	i1l5347
 16704  07E6  3190  28D7         	ljmp	i1l5375
 16705  07E8  3190  28F4         	ljmp	i1l5395
 16706  07EA  3191  2909         	ljmp	i1l5411
 16707  07EC  3191  2920         	ljmp	i1l5427
 16708  07EE  3191  294D         	ljmp	i1l5451
 16709  07F0  3191  2954         	ljmp	i1l5475
 16710  07F2  3191  2962         	ljmp	i1l5487
 16711  07F4  3191  296D         	ljmp	i1l5499
 16712  07F6  3191  2991         	ljmp	i1l5523
 16713  07F8  3191  299D         	ljmp	i1l5535
 16714  07FA  3191  29AD         	ljmp	i1l5547
 16715  07FC  3191  29CD         	ljmp	i1l5571
 16716                           
 16717                           	psect	swtext5
 16718  1000                     __pswtext5:	
 16719  1000                     i1S8581:	
 16720  1000  3185  2D9E         	ljmp	i1l552
 16721  1002  3185  2DAF         	ljmp	i1l558
 16722  1004  3185  2DBE         	ljmp	i1l563
 16723  1006  3185  2DCF         	ljmp	i1l568
 16724  1008  3185  2DE0         	ljmp	i1l573
 16725  100A  3185  2DEC         	ljmp	i1l578
 16726  100C  3185  2DF4         	ljmp	i1l583
 16727  100E  3185  2DFC         	ljmp	i1l588
 16728  1010  3186  2E06         	ljmp	i1l593
 16729  1012  3186  2E0B         	ljmp	i1l598
 16730  1014  3186  2E1E         	ljmp	i1l5221
 16731  1016  3186  2E30         	ljmp	i1l608
 16732  1018  3186  2E3C         	ljmp	i1l613
 16733  101A  3186  2E3D         	ljmp	i1l618
 16734  101C  3186  2E56         	ljmp	i1l5265
 16735  101E  3185  2D9E         	ljmp	i1l5113
 16736  1020  3185  2DAF         	ljmp	i1l5129
 16737  1022  3185  2DBE         	ljmp	i1l5141
 16738  1024  3185  2DCF         	ljmp	i1l5153
 16739  1026  3185  2DE0         	ljmp	i1l5165
 16740  1028  3185  2DEC         	ljmp	i1l5173
 16741  102A  3185  2DF4         	ljmp	i1l5181
 16742  102C  3185  2DFC         	ljmp	i1l5189
 16743  102E  3186  2E06         	ljmp	i1l5197
 16744  1030  3186  2E0B         	ljmp	i1l5205
 16745  1032  3186  2E1E         	ljmp	i1l5221
 16746  1034  3186  2E30         	ljmp	i1l5233
 16747  1036  3186  2E3C         	ljmp	i1l5241
 16748  1038  3186  2E3D         	ljmp	i1l5249
 16749  103A  3186  2E5C         	ljmp	i1l5269
 16750  103C  3185  2D9E         	ljmp	i1l5113
 16751  103E  3185  2DAF         	ljmp	i1l5129
 16752  1040  3185  2DBE         	ljmp	i1l5141
 16753  1042  3185  2DCF         	ljmp	i1l5153
 16754  1044  3185  2DE0         	ljmp	i1l5165
 16755  1046  3185  2DEC         	ljmp	i1l5173
 16756  1048  3185  2DF4         	ljmp	i1l5181
 16757  104A  3185  2DFC         	ljmp	i1l5189
 16758  104C  3186  2E06         	ljmp	i1l5197
 16759  104E  3186  2E0B         	ljmp	i1l5205
 16760  1050  3186  2E2A         	ljmp	i1l5229
 16761  1052  3186  2E30         	ljmp	i1l5233
 16762  1054  3186  2E3C         	ljmp	i1l5241
 16763  1056  3186  2E3D         	ljmp	i1l5249
 16764  1058  3186  2E56         	ljmp	i1l5265
 16765  105A  3185  2D9E         	ljmp	i1l5113
 16766  105C  3185  2DAF         	ljmp	i1l5129
 16767  105E  3185  2DBE         	ljmp	i1l5141
 16768  1060  3185  2DCF         	ljmp	i1l5153
 16769  1062  3185  2DE0         	ljmp	i1l5165
 16770  1064  3185  2DEC         	ljmp	i1l5173
 16771  1066  3185  2DF4         	ljmp	i1l5181
 16772  1068  3185  2DFC         	ljmp	i1l5189
 16773  106A  3186  2E06         	ljmp	i1l5197
 16774  106C  3186  2E0B         	ljmp	i1l5205
 16775  106E  3186  2E24         	ljmp	i1l5225
 16776  1070  3186  2E30         	ljmp	i1l5233
 16777  1072  3186  2E3C         	ljmp	i1l5241
 16778  1074  3186  2E3D         	ljmp	i1l5249
 16779  1076  3186  2E56         	ljmp	i1l5265
 16780  1078  3185  2D9E         	ljmp	i1l5113
 16781  107A  3185  2DAF         	ljmp	i1l5129
 16782  107C  3185  2DBE         	ljmp	i1l5141
 16783  107E  3185  2DCF         	ljmp	i1l5153
 16784  1080  3185  2DE0         	ljmp	i1l5165
 16785  1082  3185  2DEC         	ljmp	i1l5173
 16786  1084  3185  2DF4         	ljmp	i1l5181
 16787  1086  3185  2DFC         	ljmp	i1l5189
 16788  1088  3186  2E06         	ljmp	i1l5197
 16789  108A  3186  2E0B         	ljmp	i1l5205
 16790  108C  3186  2E24         	ljmp	i1l5225
 16791  108E  3186  2E30         	ljmp	i1l5233
 16792  1090  3186  2E3C         	ljmp	i1l5241
 16793  1092  3186  2E3D         	ljmp	i1l5249
 16794  1094  3186  2E63         	ljmp	i1l5273
 16795                           
 16796                           	psect	swtext6
 16797  1865                     __pswtext6:	
 16798  1865                     i1S8583:	
 16799  1865  3185  2D49         	ljmp	i1l5049
 16800  1867  3185  2D4E         	ljmp	i1l5055
 16801  1869  3185  2D55         	ljmp	i1l5061
 16802  186B  3185  2D5D         	ljmp	i1l536
 16803  186D  3185  2D63         	ljmp	i1l5069
 16804  186F  3185  2D69         	ljmp	i1l5075
 16805  1871  3185  2D6F         	ljmp	i1l5079
 16806  1873  3185  2D74         	ljmp	i1l540
 16807  1875  3185  2D7C         	ljmp	i1l5087
 16808  1877  3185  2D80         	ljmp	i1l5093
 16809  1879  3185  2D86         	ljmp	i1l5099
 16810                           
 16811                           	psect	swtext7
 16812  187B                     __pswtext7:	
 16813  187B                     i1S8585:	
 16814  187B  3186  2E73         	ljmp	i1l5603
 16815  187D  3186  2E76         	ljmp	i1l5617
 16816  187F  3186  2E8C         	ljmp	i1l5635
 16817  1881  3186  2EA0         	ljmp	i1l5661
 16818  1883  3186  2EB4         	ljmp	i1l5679
 16819                           
 16820                           	psect	text75
 16821  1C94                     __ptext75:	
 16822 ;; *************** function _EUSART_RCV_ISR *****************
 16823 ;; Defined at:
 16824 ;;		line 35 in file "src/eusart.c"
 16825 ;; Parameters:    Size  Location     Type
 16826 ;;		None
 16827 ;; Auto vars:     Size  Location     Type
 16828 ;;		None
 16829 ;; Return value:  Size  Location     Type
 16830 ;;                  1    wreg      void 
 16831 ;; Registers used:
 16832 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16833 ;; Tracked objects:
 16834 ;;		On entry : 1F/0
 16835 ;;		On exit  : 1F/1
 16836 ;;		Unchanged: 0/0
 16837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16841 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16842 ;;Total ram usage:        0 bytes
 16843 ;; Hardware stack levels used:    1
 16844 ;; This function calls:
 16845 ;;		Nothing
 16846 ;; This function is called by:
 16847 ;;		_INTERRUPT_interruptManager
 16848 ;; This function uses a non-reentrant model
 16849 ;;
 16850                           
 16851                           
 16852                           ;psect for function _EUSART_RCV_ISR
 16853  1C94                     _EUSART_RCV_ISR:	
 16854                           
 16855                           ;eusart.c: 37: if (RC1STAbits.FERR || RC1STAbits.OERR)
 16856                           
 16857                           ;incstack = 0
 16858                           ; Regs used in _EUSART_RCV_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 16859  1C94  0023               	movlb	3	; select bank3
 16860  1C95  191D               	btfsc	29,2	;volatile
 16861  1C96  2C99               	goto	i1l87
 16862  1C97  1C9D               	btfss	29,1	;volatile
 16863  1C98  2C9B               	goto	i1l6491
 16864  1C99                     i1l87:	
 16865                           
 16866                           ;eusart.c: 38: {
 16867                           ;eusart.c: 39: RC1STAbits.SPEN = 0;
 16868  1C99  139D               	bcf	29,7	;volatile
 16869                           
 16870                           ;eusart.c: 40: RC1STAbits.SPEN = 1;
 16871  1C9A  179D               	bsf	29,7	;volatile
 16872  1C9B                     i1l6491:	
 16873                           
 16874                           ;eusart.c: 41: }
 16875                           ;eusart.c: 43: rxBuf[nRcvIdx++] = RCREG;
 16876  1C9B  0021               	movlb	1	; select bank1
 16877  1C9C  0868               	movf	_nRcvIdx^(0+128),w
 16878  1C9D  3EA0               	addlw	(low (_rxBuf| (0+512)))& (0+255)
 16879  1C9E  0086               	movwf	6
 16880  1C9F  3002               	movlw	2	; select bank5/6
 16881  1CA0  0087               	movwf	7
 16882  1CA1  0023               	movlb	3	; select bank3
 16883  1CA2  0819               	movf	25,w	;volatile
 16884  1CA3  0081               	movwf	1
 16885  1CA4  0021               	movlb	1	; select bank1
 16886  1CA5  0AE8               	incf	_nRcvIdx^(0+128),f	;volatile
 16887                           
 16888                           ;eusart.c: 44: if (nRcvIdx >= sizeof(rxBuf))
 16889  1CA6  3030               	movlw	48
 16890  1CA7  0268               	subwf	_nRcvIdx^(0+128),w
 16891  1CA8  1803               	btfsc	3,0
 16892                           
 16893                           ;eusart.c: 45: {
 16894                           ;eusart.c: 46: nRcvIdx = 0;
 16895  1CA9  01E8               	clrf	_nRcvIdx^(0+128)	;volatile
 16896  1CAA  0008               	return
 16897  1CAB                     __end_of_EUSART_RCV_ISR:	
 16898  007E                     btemp	set	126	;btemp
 16899  007E                     int$flags	set	126
 16900  007E                     wtemp0	set	126


Data Sizes:
    Strings     79
    Constant    0
    Data        36
    BSS         210
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     32      62
    BANK1            80     65      73
    BANK2            80     50      79
    BANK3            80      0      34
    BANK4            80      0      49
    BANK5            80      0      48
    BANK6            80      0      48
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    readBuffer@buf	PTR unsigned char  size(1) Largest target is 49
		 -> readLedPara@para(BANK2[49]), 

    writeBuffer@buf	PTR unsigned char  size(1) Largest target is 49
		 -> writeLedPara@para(BANK1[49]), 

    bleSendData@frame	PTR const unsigned char  size(2) Largest target is 48
		 -> txBuf(BANK6[48]), rxBuf(BANK5[48]), 

    BLE_SendCMD@pBuf	PTR const unsigned char  size(2) Largest target is 34
		 -> STR_4(CODE[15]), STR_3(CODE[11]), STR_2(CODE[34]), STR_1(CODE[19]), 

    getCRC@pbuf	PTR unsigned char  size(2) Largest target is 48
		 -> txBuf(BANK6[48]), rxBuf(BANK5[48]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_interruptManager in COMMON

    _runRTC->_checkIsYearLeap
    _checkIsYearLeap->___lwmod
    _ledSunrs->i1___ftmul
    _ledDynamic->i1___ftmul
    i1_updatePWM->i1_PWM1_LoadDutyValue
    i1_updatePWM->i1_PWM2_LoadDutyValue
    i1_updatePWM->i1_PWM3_LoadDutyValue
    i1_updatePWM->i1_PWM4_LoadDutyValue
    i1___lwtoft->i1___ftpack
    i1___ftmul->i1___lwtoft
    _ledThunder_3->i1_updateDynamic
    _ledThunder_2->i1_updateDynamic
    _ledAllCOlor->i1_updateDynamic
    ___fttol->i1___ftmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_interruptManager in BANK0

    _INTERRUPT_interruptManager->_ledDynamic
    _INTERRUPT_interruptManager->_ledSunrs
    _ledSunrs->___fttol
    _ledDynamic->___fttol
    ___fttol->i1___ftmul

Critical Paths under _main in BANK1

    _main->_initLed
    _saveLedPara->_writeLedPara
    _writeLedPara->_writeBuffer
    _writeBuffer->_writeByte
    _writeByte->_DATAEE_WriteByte
    _initLed->_readLedPara
    _readLedPara->_readBuffer
    _readBuffer->_readByte
    _readByte->_DATAEE_ReadByte
    _initBLE->_checkDevID
    _checkDevID->_BLE_SendCMD
    _BLE_SendCMD->_eusartSendByte
    _turnOffLed->_PWM1_LoadDutyValue
    _turnOffLed->_PWM2_LoadDutyValue
    _turnOffLed->_PWM3_LoadDutyValue
    _turnOffLed->_PWM4_LoadDutyValue
    _turnMaxLed->_PWM1_LoadDutyValue
    _turnMaxLed->_PWM2_LoadDutyValue
    _turnMaxLed->_PWM3_LoadDutyValue
    _turnMaxLed->_PWM4_LoadDutyValue
    _autoRun->_initDynamic
    ___lldiv->___lmul
    _SYSTEM_Initialize->_PIN_MANAGER_Initialize
    _DecodeDATA->_initDynamic
    _updatePWM->_PWM1_LoadDutyValue
    _updatePWM->_PWM2_LoadDutyValue
    _updatePWM->_PWM3_LoadDutyValue
    _updatePWM->_PWM4_LoadDutyValue
    _initDynamic->___ftmul
    ___lwtoft->___ftpack
    ___ftmul->___lwtoft
    _bleSendDeviceTime->_getCRC
    _bleSendDeviceData->_getCRC
    _bleSendData->_eusartSendByte

Critical Paths under _INTERRUPT_interruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _initLed->_readLedPara

Critical Paths under _INTERRUPT_interruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_interruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_interruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_interruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_interruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_interruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_interruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_interruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_interruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_interruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_interruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   67678
                                             64 BANK1      1     1      0
                         _DecodeDATA
                  _SYSTEM_Initialize
                    _TMR0_StartTimer
                    _TMR2_StartTimer
                            _autoRun
                    _findDeviceFlash
                            _initBLE
                            _initLed
                            _initRTC
                            _preview
                        _saveLedPara
 ---------------------------------------------------------------------------------
 (1) _saveLedPara                                          1     1      0    1290
                                             61 BANK1      1     1      0
                       _writeLedPara
 ---------------------------------------------------------------------------------
 (2) _writeLedPara                                        50     1     49    1290
                                             11 BANK1     50     1     49
                        _writeBuffer
 ---------------------------------------------------------------------------------
 (3) _writeBuffer                                          5     3      2    1090
                                              6 BANK1      5     3      2
                          _writeByte
 ---------------------------------------------------------------------------------
 (4) _writeByte                                            2     1      1     628
                                              4 BANK1      2     1      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_WriteByte                                     4     1      3     431
                                              0 BANK1      4     1      3
 ---------------------------------------------------------------------------------
 (1) _preview                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRTC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLed                                              5     5      0   12408
                                             59 BANK1      5     5      0
                        _initDynamic
                        _readLedPara
                     _turnOffLedRamp
                      _turnOnLedRamp
 ---------------------------------------------------------------------------------
 (2) _readLedPara                                        100    51     49     857
                                              9 BANK1     50     1     49
                                              0 BANK2     50    50      0
                         _readBuffer
 ---------------------------------------------------------------------------------
 (3) _readBuffer                                           5     3      2     758
                                              4 BANK1      5     3      2
                           _readByte
 ---------------------------------------------------------------------------------
 (4) _readByte                                             2     2      0     296
                                              2 BANK1      2     2      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_ReadByte                                      2     0      2     231
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initBLE                                              2     2      0    1846
                                             37 BANK1      2     2      0
                        _BLE_SendCMD
                         _checkDevID
 ---------------------------------------------------------------------------------
 (2) _checkDevID                                          22    22      0    1028
                                             15 BANK1     22    22      0
                        _BLE_SendCMD
 ---------------------------------------------------------------------------------
 (3) _BLE_SendCMD                                         14    12      2     818
                                              1 BANK1     14    12      2
                     _eusartSendByte
 ---------------------------------------------------------------------------------
 (1) _findDeviceFlash                                      0     0      0    4376
                         _turnMaxLed
                         _turnOffLed
 ---------------------------------------------------------------------------------
 (2) _turnOffLed                                           0     0      0    2188
                 _PWM1_LoadDutyValue
                 _PWM2_LoadDutyValue
                 _PWM3_LoadDutyValue
                 _PWM4_LoadDutyValue
 ---------------------------------------------------------------------------------
 (2) _turnMaxLed                                           0     0      0    2188
                 _PWM1_LoadDutyValue
                 _PWM2_LoadDutyValue
                 _PWM3_LoadDutyValue
                 _PWM4_LoadDutyValue
 ---------------------------------------------------------------------------------
 (1) _autoRun                                             56    56      0   22488
                                             30 BANK1     11    11      0
                                              0 BANK2     45    45      0
                            ___lldiv
                             ___lmul
                             ___wmul
                        _initDynamic
                          _updatePWM
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    4106
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8    1486
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     781
                                             12 BANK1     13     5      8
                             ___lmul (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      34
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM1_Initialize
                    _PWM2_Initialize
                    _PWM3_Initialize
                    _PWM4_Initialize
                    _TMR0_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      34
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DecodeDATA                                          18    18      0   25236
                                             30 BANK1     18    18      0
                            ___lwdiv
                        _bleSendData
                  _bleSendDeviceData
                  _bleSendDeviceTime
                             _getCRC
                        _initDynamic
                     _turnOffLedRamp
                      _turnOnLedRamp
                          _updatePWM
 ---------------------------------------------------------------------------------
 (2) _updatePWM                                            0     0      0    2188
                 _PWM1_LoadDutyValue
                 _PWM2_LoadDutyValue
                 _PWM3_LoadDutyValue
                 _PWM4_LoadDutyValue
 ---------------------------------------------------------------------------------
 (3) _PWM4_LoadDutyValue                                   2     0      2     547
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _PWM3_LoadDutyValue                                   2     0      2     547
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _PWM2_LoadDutyValue                                   2     0      2     547
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (3) _PWM1_LoadDutyValue                                   2     0      2     547
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _turnOnLedRamp                                        1     1      0     130
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _turnOffLedRamp                                       1     1      0      99
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _initDynamic                                          4     4      0   10876
                                             26 BANK1      4     4      0
                            ___ftmul
                           ___lwtoft
                      _updateDynamic
 ---------------------------------------------------------------------------------
 (3) _updateDynamic                                        3     3      0     254
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             3     0      3    4624
                                              8 BANK1      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5428
                                             11 BANK1     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    4258
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (2) _bleSendDeviceTime                                    2     2      0    3402
                                              7 BANK1      2     2      0
                        _bleSendData
                             _getCRC
 ---------------------------------------------------------------------------------
 (2) _bleSendDeviceData                                    3     3      0    3566
                                              7 BANK1      3     3      0
                        _bleSendData
                             _getCRC
 ---------------------------------------------------------------------------------
 (2) _getCRC                                               7     4      3    2559
                                              0 BANK1      7     4      3
 ---------------------------------------------------------------------------------
 (3) _bleSendData                                          4     1      3     648
                                              1 BANK1      4     1      3
                     _eusartSendByte
 ---------------------------------------------------------------------------------
 (4) _eusartSendByte                                       1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     511
                                              0 BANK1      7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_interruptManager                           0     0      0    7277
                     _EUSART_RCV_ISR
                         _ledDynamic
                           _ledSunrs
                             _runRTC
                          _updateLed
 ---------------------------------------------------------------------------------
 (7) _updateLed                                            8     8      0     820
                                              2 COMMON     8     8      0
                        i1_updatePWM
 ---------------------------------------------------------------------------------
 (7) _runRTC                                               0     0      0     837
                    _checkIsYearLeap
 ---------------------------------------------------------------------------------
 (8) _checkIsYearLeap                                      2     0      2     837
                                              5 COMMON     2     0      2
                            ___lwmod
 ---------------------------------------------------------------------------------
 (9) ___lwmod                                              5     1      4     631
                                              0 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (7) _ledSunrs                                             7     7      0    2521
                                             25 BANK0      7     7      0
                            ___fttol
                          i1___ftmul
                         i1___lwtoft
                        i1_updatePWM
 ---------------------------------------------------------------------------------
 (7) _ledDynamic                                           7     7      0    3099
                                             25 BANK0      7     7      0
                            ___fttol
                        _ledAllCOlor
                       _ledThunder_1
                       _ledThunder_2
                       _ledThunder_3
                          i1___ftmul
                         i1___lwtoft
                        i1_updatePWM
 ---------------------------------------------------------------------------------
 (8) i1_updatePWM                                          0     0      0     464
               i1_PWM1_LoadDutyValue
               i1_PWM2_LoadDutyValue
               i1_PWM3_LoadDutyValue
               i1_PWM4_LoadDutyValue
 ---------------------------------------------------------------------------------
 (9) i1_PWM4_LoadDutyValue                                 2     0      2     116
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (9) i1_PWM3_LoadDutyValue                                 2     0      2     116
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (9) i1_PWM2_LoadDutyValue                                 2     0      2     116
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (9) i1_PWM1_LoadDutyValue                                 2     0      2     116
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (8) i1___lwtoft                                           3     0      3     461
                                              8 COMMON     3     0      3
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (8) i1___ftmul                                           15     9      6     817
                                             11 COMMON     3     3      0
                                              0 BANK0     12     6      6
                         i1___ftpack
                         i1___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (9) i1___ftpack                                           8     3      5     387
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (8) _ledThunder_3                                         0     0      0     178
                    i1_updateDynamic
 ---------------------------------------------------------------------------------
 (8) _ledThunder_2                                         0     0      0     178
                    i1_updateDynamic
 ---------------------------------------------------------------------------------
 (8) _ledThunder_1                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _ledAllCOlor                                          0     0      0     178
                    i1_updateDynamic
 ---------------------------------------------------------------------------------
 (9) i1_updateDynamic                                      3     3      0     178
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (8) ___fttol                                             13     9      4     488
                                             12 BANK0     13     9      4
                          i1___ftmul (ARG)
                         i1___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) _EUSART_RCV_ISR                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DecodeDATA
     ___lwdiv
     _bleSendData
       _eusartSendByte
     _bleSendDeviceData
       _bleSendData
         _eusartSendByte
       _getCRC
     _bleSendDeviceTime
       _bleSendData
         _eusartSendByte
       _getCRC
     _getCRC
     _initDynamic
       ___ftmul
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
       _updateDynamic
     _turnOffLedRamp
     _turnOnLedRamp
     _updatePWM
       _PWM1_LoadDutyValue
       _PWM2_LoadDutyValue
       _PWM3_LoadDutyValue
       _PWM4_LoadDutyValue
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM1_Initialize
     _PWM2_Initialize
     _PWM3_Initialize
     _PWM4_Initialize
     _TMR0_Initialize
     _TMR2_Initialize
   _TMR0_StartTimer
   _TMR2_StartTimer
   _autoRun
     ___lldiv
       ___lmul (ARG)
       ___wmul (ARG)
     ___lmul
     ___wmul
     _initDynamic
       ___ftmul
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
       _updateDynamic
     _updatePWM
       _PWM1_LoadDutyValue
       _PWM2_LoadDutyValue
       _PWM3_LoadDutyValue
       _PWM4_LoadDutyValue
   _findDeviceFlash
     _turnMaxLed
       _PWM1_LoadDutyValue
       _PWM2_LoadDutyValue
       _PWM3_LoadDutyValue
       _PWM4_LoadDutyValue
     _turnOffLed
       _PWM1_LoadDutyValue
       _PWM2_LoadDutyValue
       _PWM3_LoadDutyValue
       _PWM4_LoadDutyValue
   _initBLE
     _BLE_SendCMD
       _eusartSendByte
     _checkDevID
       _BLE_SendCMD
         _eusartSendByte
   _initLed
     _initDynamic
       ___ftmul
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
       _updateDynamic
     _readLedPara
       _readBuffer
         _readByte
           _DATAEE_ReadByte
     _turnOffLedRamp
     _turnOnLedRamp
   _initRTC
   _preview
   _saveLedPara
     _writeLedPara
       _writeBuffer
         _writeByte
           _DATAEE_WriteByte

 _INTERRUPT_interruptManager (ROOT)
   _EUSART_RCV_ISR
   _ledDynamic
     ___fttol
       i1___ftmul (ARG)
         i1___ftpack
         i1___lwtoft (ARG)
           i1___ftpack
       i1___lwtoft (ARG)
         i1___ftpack
     _ledAllCOlor
       i1_updateDynamic
     _ledThunder_1
     _ledThunder_2
       i1_updateDynamic
     _ledThunder_3
       i1_updateDynamic
     i1___ftmul
       i1___ftpack
       i1___lwtoft (ARG)
         i1___ftpack
     i1___lwtoft
       i1___ftpack
     i1_updatePWM
       i1_PWM1_LoadDutyValue
       i1_PWM2_LoadDutyValue
       i1_PWM3_LoadDutyValue
       i1_PWM4_LoadDutyValue
   _ledSunrs
     ___fttol
       i1___ftmul (ARG)
         i1___ftpack
         i1___lwtoft (ARG)
           i1___ftpack
       i1___lwtoft (ARG)
         i1___ftpack
     i1___ftmul
       i1___ftpack
       i1___lwtoft (ARG)
         i1___ftpack
     i1___lwtoft
       i1___ftpack
     i1_updatePWM
       i1_PWM1_LoadDutyValue
       i1_PWM2_LoadDutyValue
       i1_PWM3_LoadDutyValue
       i1_PWM4_LoadDutyValue
   _runRTC
     _checkIsYearLeap
       ___lwmod
   _updateLed
     i1_updatePWM
       i1_PWM1_LoadDutyValue
       i1_PWM2_LoadDutyValue
       i1_PWM3_LoadDutyValue
       i1_PWM4_LoadDutyValue

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     20      3E       5       77.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     41      49       7       91.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     32      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      22      11       42.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      31      13       61.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      30      15       60.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0      30      17       60.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     197      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     197      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sat Sep 16 15:12:03 2017

                                  pc 0002                           i1___ftpack 13AE  
                                 PL2 11F8                                   PL4 120C  
                                 PL6 16B6                                   PL8 1213  
                                 l43 0C90                                   l39 0C63  
                                 l99 1F8F                 i1_PWM1_LoadDutyValue 1408  
                         i1___lwtoft 06E1                  ___wmul@multiplicand 00A2  
                __end_ofi1_updatePWM 1408               ??i1_PWM4_LoadDutyValue 0072  
       ??_INTERRUPT_interruptManager 007E           __size_of_bleSendDeviceData 004E  
                                PL10 16C4                                  PL20 122C  
                                PL12 06F2                                  PL30 071B  
                                PL22 0BB3                                  PL14 121A  
                                PL40 0728                                  PL32 16FE  
                                PL24 1231                                  PL16 06F8  
                                PL50 0BC3                                  PL42 0F95  
                                PL34 12CB                                  PL26 16F0  
                                PL18 16EA                                  PL60 0751  
                                PL52 0740                                  PL44 072F  
                                PL36 0BBA                                  PL28 0714  
                                PL70 127E                                  PL62 1272  
                                PL54 1715                                  PL46 1705  
                                PL38 0F8F                                  PL80 076C  
                                PL72 0BDB                                  PL64 0BD5  
                                PL56 0748                                  PL48 12DD  
                                PL90 0BE2                                  PL82 0776  
                                PL74 0FA0                                  PL66 092B  
                                PL58 0BC8                                  PL92 0BE9  
                                PL84 0780                                  PL76 0756  
                                PL68 171E                                  PL94 1236  
                                PL86 078A                                  PL78 0761  
                                PL96 17E0                                  PL88 143C  
                                PL98 17E8           __size_of_bleSendDeviceTime 002F  
                                l320 0D98                                  l234 1F64  
                                l260 1EDB                                  l340 0E77  
                                l308 0D12                                  l325 0DB6  
                                l520 0A4A                                  l329 0E04  
                                l514 0A33                                  l356 0F1F  
                                l525 0A9D                                  l286 0F46  
                                l296 0CDB                                  l288 0CAC  
                                l481 0F8B                                  l299 0CDE  
                                l753 1CFE                                  _GIE 005F  
                                _RA2 0062                                  _PR2 001E  
                    _TMR2_Initialize 1E17                      _PWM4_Initialize 1E0C  
                                wreg 0009                         i1___ftmul@f1 0020  
                       i1___ftmul@f2 0023                           _DecodeDATA 0CA3  
                               S8573 0800                                 S8575 1096  
                               PL100 172A                                 PL110 1446  
                               PL102 1733                                 PL120 1245  
                               PL112 173C                                 PL104 17F0  
                               PL130 124B                                 PL122 0FAB  
                               PL114 079D                                 PL106 0794  
                               PL140 144F                                 PL132 07AC  
                               PL124 1FD4                                 PL116 123D  
                               PL108 17F8                                 PL150 1252  
                               PL142 1744                                 PL134 0FB7  
                               PL126 0FB1                                 PL118 07A4  
                               PL160 1456                                 PL152 0BF7  
                               PL144 07BA                                 PL136 0BF0  
                               PL128 0937                                 PL170 1460  
                               PL162 07CD                                 PL154 0FBE  
                               PL146 12E9                                 PL138 07B3  
                               PL180 0C09                                 PL172 1465  
                               PL164 1FDA                                 PL156 1E3C  
                               PL148 07C1                                 PL182 1D8A  
                               PL174 0BFD                                 PL166 07D3  
                               PL158 07C7                                 PL184 146A  
                               PL176 0C03                                 PL168 145B  
                               PL186 07D7                                 PL178 0FC4  
                               l1036 1656                                 l1181 0B60  
                               l1193 0B85                                 l7001 0B6D  
                               l7003 0B76                                 l7023 0F49  
                               l7007 0B83                                 l7025 0F59  
                               l7009 0B7B                                 l7121 0BAD  
                               l7113 0B98                                 l7105 17DE  
                               l7041 1F50                                 l7107 0B96  
                               l7131 1CCE                                 l8013 0D42  
                               l7053 1F79                                 l7119 0BA7  
                               l8103 0E34                                 l8031 0D64  
                               l8007 0D21                                 l7047 1F6C  
                               l7055 1F7A                                 l7063 1F89  
                               l7073 1ECA                                 l7065 1EBF  
                               l7145 0AFA                                 l7401 093D  
                               l7081 17AE                                 l8121 0E5A  
                               l8113 0E44                                 l8105 0E40  
                               l7171 0B20                                 l8043 0D76  
                               l8027 0D4F                                 l7323 1FBB  
                               l7139 0903                                 l7149 0B08  
                               l7405 0944                                 l8133 0E60  
                               l8301 1532                                 l7333 1FC4  
                               l7183 0B2E                                 l7167 0B1C  
                               l8063 0DA7                                 l8215 0F3C  
                               l7343 1FAF                                 l7505 09A0  
                               l7417 0951                                 l7089 17BE  
                               l7097 17CE                                 l8161 0EA9  
                               l8081 0DF0                                 l8313 1551  
                               l7363 1E83                                 l7179 0B2A  
                               l7099 17D0                                 l8171 0EB2  
                               l8147 0E89                                 l7373 1E96  
                               l7365 1E92                                 l7349 1E71  
                               l7605 0A1D                                 l7437 0967  
                               l8181 0ED0                                 l8157 0EA7  
                               l7197 1E21                                 l8405 0C77  
                               l7375 1EA5                                 l8191 0EF8  
                               l8351 15D9                                 l8263 14D1  
                               l7385 1E4B                                 l7377 1E42  
                               l7641 0A8B                                 l7625 0A3F  
                               l7553 09D5                                 l7529 09BD  
                               l7481 098B                                 l7465 097F  
                               l8177 0EC3                                 l7705 163F  
                               l8417 0C87                                 l7387 1E5C  
                               l7643 0A95                                 l7395 0F69  
                               l7723 1660                                 l8283 14E4  
                               l8427 0C99                                 l7629 0A48  
                               l7573 09F8                                 l7389 0F67  
                               l8197 0F08                                 l7741 168A  
                               l7709 1645                                 l8357 160A  
                               l8365 1637                                 l7821 0870  
                               l8429 0C9C                                 l7647 0A9B  
                               l7479 0986                                 l7671 0AEB  
                               l7831 087D                                 l7569 09F2  
                               l7753 16AD                                 l7913 08E5  
                               l7841 0898                                 l7817 0855  
                               l7659 0AD2                                 l7683 0F5D  
                               l7691 175E                                 l7827 0871  
                               l6947 1CE7                                 l7589 0A0A  
                               l7669 0ADE                                 l7677 0F5B  
                               l7749 16A7                                 l7909 08E1  
                               l7775 0FE6                                 l7767 0FD7  
                               l7943 0CCD                                 l7689 1779  
                               l7779 0FEA                                 l7971 0CFD  
                               l7963 0CF2                                 l7955 0CDC  
                               l7947 0CD4                                 l6997 0B64  
                               l7981 0D09                                 l7949 0CD7  
                               l7797 1F11                                 l6999 0B68  
                               l7985 0D0F                                 l7897 08D4  
                               STR_1 1822                                 STR_2 1800  
                               STR_3 1844                                 STR_4 1835  
            __end_of_PWM1_Initialize 1DF8                                 _LATA 010C  
                               _LATB 010D                                 _LATC 010E  
                               u6025 17A9                                 u7020 0D55  
                               u6220 1DEC                                 u6045 17B9  
                               u7030 0D56                                 u6240 1FA2  
                               u6065 17C9                                 u6085 17D9  
                               u6094 0BD0                                 u6095 0BCF  
                               u7400 0EFF                                 u7320 0EB8  
                               u6440 08FB                                 u7330 0EB9  
                               u6515 169C                                 u7260 0E74  
                               u7350 0EC9                                 i1l87 1C99  
                               u7360 0ECA                                 u7504 148D  
                               u5920 1F47                                 u7185 0E24  
                               u7505 148C                                 u6555 0FDF  
                               u6580 084A                                 u7605 156C  
                               u7525 14BF                                 u7390 0EFE  
                               u7710 1CBC                                 u7615 1574  
                               u7535 14C7                                 u7625 157C  
                               u7545 14CF                                 u7635 158F  
                               u7645 1597                                 u7565 14E1  
                               u7655 15A6                                 u7817 0C70  
                               u7907 1F7B                                 u7827 0C7E  
                               u7917 0F33                                 u7837 1EE8  
                               u7927 1EC5                                 u7847 1EF5  
                               u7857 1F05                                 u7867 1F15  
                               u7877 1F25                                 u7887 1F35  
                               u7897 1FC5                                 _TMR2 001D  
                               _TRMT 0CF1                                 _TXIF 008C  
                               _WPUA 020C                                 _WPUB 020D  
                               _WPUC 020E                       ??_ledThunder_1 0070  
                     ??_ledThunder_2 0073                       ??_ledThunder_3 0073  
                     ?_updateDynamic 0070                                 _main 0C52  
                       ___ftpack@arg 00A0                         ___ftpack@exp 00A3  
                    _TMR0_StartTimer 0F79                         i1___lwtoft@c 0078  
                               fsr0h 0005                                 fsr1h 0007  
                               indf0 0000                                 fsr0l 0004  
                               indf1 0001                                 fsr1l 0006  
                               btemp 007E                                 start 0441  
__size_of_INTERRUPT_interruptManager 003D                         ___ftmul@cntr 00B8  
                       ___ftmul@sign 00B9                      _findDeviceFlash 0F7D  
                      i1___ftmul@exp 0026                         ?_initDynamic 0070  
                       ?_readLedPara 00A9                         ___fttol@exp1 0038  
              ?i1_PWM1_LoadDutyValue 0070            __size_of_DATAEE_WriteByte 0021  
                       ___fttol@lval 0034              __end_of_PWM2_Initialize 1E01  
            __end_of_TMR0_Initialize 1E3C              i1___ftmul@f3_as_product 0027  
               __size_of_bleSendData 0022       __size_of_OSCILLATOR_Initialize 000A  
                       ledSunrs@temp 003D        __end_of_OSCILLATOR_Initialize 1DAA  
                        _writeBuffer 1CCC                                ?_main 0070  
      __size_ofi1_PWM3_LoadDutyValue 000D                      __end_of___lldiv 16B6  
                    __end_of___ftmul 0B48                      __end_of___fttol 0542  
                              _T2CON 001F                                _LATC1 0871  
                              _LATB5 086D                     ??_eusartSendByte 00A0  
                    __end_of___lwdiv 0FEF                                i1l161 0414  
                              i1l159 040D                                i1l168 043F  
                    __end_of___lwmod 1D8A                                i1l540 0574  
                              i1l613 063C                                i1l536 055D  
                              i1l608 0630                                i1l552 059E  
                              i1l618 063D                                i1l563 05BE  
                              i1l573 05E0                                i1l654 06DA  
                              i1l558 05AF                                i1l583 05F4  
                              i1l568 05CF                                i1l593 0606  
                              i1l578 05EC                                i1l690 047C  
                              i1l588 05FC                                i1l598 060B  
                              _RCREG 0199                                _OSCEN 091D  
                 _PWM4_LoadDutyValue 17D0                                _TMR0H 0016  
                              _TMR0L 0015                                _TRISA 008C  
                              _TRISB 008D                                _TRISC 008E  
                              _TXREG 019A                  ___lmul@multiplicand 00A4  
                    __end_of_initBLE 1F3D                      _DATAEE_ReadByte 091D  
                    __end_of_autoRun 163D                      __end_of_initRTC 0FF9  
                    __end_of_initLed 08E7                                _rxBuf 02A0  
                ?_PWM4_LoadDutyValue 00A0                                _txBuf 0320  
                      ___ftpack@sign 00A4         __end_ofi1_PWM2_LoadDutyValue 1422  
            __end_of_PWM3_Initialize 1E0C                     ?_checkIsYearLeap 0075  
                        autoRun@dbrt 0138                      __end_of_preview 1000  
              autoRun@auto_dyn_start 013C                __size_of_writeLedPara 0007  
                              status 0003                                wtemp0 007E  
                    _TMR2_StartTimer 0F7B                         __end_ofPL100 1733  
                 __size_ofi1___ftmul 005D                         __end_ofPL110 144F  
                       __end_ofPL102 173C                         __end_ofPL120 124B  
                       __end_ofPL112 1744                         __end_ofPL104 17F8  
                       __end_ofPL130 1252                         __end_ofPL122 0FB1  
                       __end_ofPL114 07A4                         __end_ofPL106 079D  
                       __end_ofPL140 1456                         __end_ofPL132 07B3  
                       __end_ofPL124 1FDA                         __end_ofPL116 1245  
                       __end_ofPL108 1800                         __end_ofPL150 1258  
                       __end_ofPL142 174B                         __end_ofPL134 0FBE  
                       __end_ofPL126 0FB7                         __end_ofPL118 07AC  
                       __end_ofPL160 145B                         __end_ofPL152 0BFD  
                       __end_ofPL144 07C1                         __end_ofPL136 0BF7  
                       __end_ofPL128 093D                         __end_ofPL170 1465  
                       __end_ofPL162 07D3                         __end_ofPL154 0FC4  
                       __end_ofPL146 12EF                         __end_ofPL138 07BA  
                       __end_ofPL180 0C0D                         __end_ofPL172 146A  
                       __end_ofPL164 1FE0                         __end_ofPL156 1E42  
                       __end_ofPL148 07C7                         __end_ofPL182 1D8F  
                       __end_ofPL174 0C03                         __end_ofPL166 07D7  
                       __end_ofPL158 07CD                         __end_ofPL184 146E  
                       __end_ofPL176 0C09                         __end_ofPL168 1460  
                       __end_ofPL186 07DC                         __end_ofPL178 0FCA  
                     i1___ftpack@arg 0070                       i1___ftpack@exp 0073  
                        i1_updatePWM 13EC                      __initialization 0C0D  
                    i1_updateDynamic 1258                         __end_of_main 0CA3  
               __size_of_BLE_SendCMD 0051                 ??_PWM4_LoadDutyValue 00A2  
                        ?i1___ftpack 0070                       i1___ftmul@cntr 002A  
                     i1___ftmul@sign 002B                       BLE_SendCMD@ack 00A4  
                     BLE_SendCMD@cnt 00AB                       BLE_SendCMD@rev 00AD  
            __end_of_PWM4_Initialize 1E17              __end_of_TMR2_Initialize 1E21  
      INTERRUPT_interruptManager@cnt 0048                          ?i1___lwtoft 0078  
                       ?_saveLedPara 0070                 __size_of_ledAllCOlor 006F  
                             ??_main 00E0                        ___fttol@sign1 0033  
                      checkDevID@dev 00B0                        checkDevID@cnt 00C2  
                      checkDevID@rev 00C1                       _EUSART_RCV_ISR 1C94  
                       _writeLedPara 1CC5                          ?_DecodeDATA 0070  
            __end_of_TMR0_StartTimer 0F7B                               _CCPR1H 0292  
                             _CCPR2H 0296                               i1S8581 1000  
                             _CCPR3H 0312                               _CCPR1L 0291  
                             i1S8583 1865                               _CCPR4H 0316  
                             _CCPR2L 0295                               i1S8585 187B  
                             i1S8577 184F                               _CCPR3L 0311  
                             i1S8579 07DC                               _CCPR4L 0315  
                             _ANSELA 018C                               _ANSELB 018D  
                             _ANSELC 018E                     __end_of___ftpack 0B96  
                             _T0CON0 0017                               _T0CON1 0018  
                    ??_updateDynamic 00A0                               _RC1STA 019D  
                   ?_PWM1_Initialize 0070                               i1l1181 13B6  
                             i1l1193 13DB                               _ODCONA 028C  
                             _ODCONB 028D                               _ODCONC 028E  
                             i1l5105 058F                               i1l5113 059E  
                             i1l5061 0555                               i1l5221 061E  
                             i1l5205 060B                               i1l5141 05BE  
                             i1l5055 054E                               i1l4511 13BE  
                             i1l4503 143B                               i1l5065 055B  
                             i1l5049 0549                               i1l5241 063C  
                             i1l5233 0630                               i1l5225 0624  
                             i1l5153 05CF                               i1l5129 05AF  
                             i1l4521 13D1                               i1l4513 13C3  
                             i1l5075 0569                               i1l5059 0553  
                             i1l5139 05BC                               i1l5411 1109  
                             i1l4515 13CC                               i1l4443 1D81  
                             i1l4461 1259                               i1l5093 0580  
                             i1l5085 057A                               i1l5069 0563  
                             i1l5229 062A                               i1l5181 05F4  
                             i1l5173 05EC                               i1l5165 05E0  
                             i1l5317 10C1                               i1l4509 13BA  
                             i1l5087 057C                               i1l5079 056F  
                             i1l5319 10C5                               i1l4519 13D9  
                             i1l4439 1D75                               i1l4447 1D85  
                             i1l5273 0663                               i1l5265 0656  
                             i1l5249 063D                               i1l5281 066F  
                             i1l4467 1266                               i1l5603 0673  
                             i1l5099 0586                               i1l5523 1191  
                             i1l5451 114D                               i1l5427 1120  
                             i1l5347 10CB                               i1l5291 10B0  
                             i1l4469 126C                               i1l5269 065C  
                             i1l5197 0606                               i1l5189 05FC  
                             i1l5279 0664                               i1l5535 119D  
                             i1l5375 10D7                               i1l4479 1414  
                             i1l4487 1421                               i1l4495 142E  
                             i1l5617 0676                               i1l5449 114B  
                             i1l5635 068C                               i1l5571 11CD  
                             i1l5547 11AD                               i1l5475 1154  
                             i1l5395 10F4                               i1l6611 045D  
                             i1l6603 0452                               i1l5741 04F6  
                             i1l5661 06A0                               i1l5485 115D  
                             i1l6621 0469                               i1l6613 0460  
                             i1l6605 0455                               i1l6701 12A7  
                             i1l5743 04FB                               i1l5487 1162  
                             i1l5593 11EC                               i1l5841 136D  
                             i1l6561 131C                               i1l6529 1D2E  
                             i1l6545 1D4C                               i1l6705 12BB  
                             i1l6491 1C9B                               i1l5771 052B  
                             i1l5763 051E                               i1l5499 116D  
                             i1l5595 11F6                               i1l6643 047D  
                             i1l6651 04A1                               i1l6555 12F5  
                             i1l6707 12C4                               i1l6803 043D  
                             i1l5837 135F                               i1l6637 047C  
                             i1l6629 0473                               i1l6653 04AF  
                             i1l5775 0539                               i1l5759 0517  
                             i1l5679 06B4                               i1l5695 06D0  
                             i1l5871 138F                               i1l5863 1385  
                             i1l6647 049A                               i1l5769 0522  
                             i1l6593 134F                               i1l5875 1393  
                             i1l5859 1381                               i1l6667 04DB  
                             i1l6659 04B1                               i1l6587 1341  
                             i1l6691 128D                               i1l6683 128A  
                             i1l6669 04E5                               i1l6685 128C  
                             i1l6793 042F                               i1l6787 0426  
                             i1l6799 0437                               u342_25 1410  
                             u334_25 1D7B                               u336_24 1279  
                             u336_25 1278                               u344_25 141D  
                   __end_of___lwtoft 0B58                               u346_25 142A  
                             u348_25 1437                               u541_25 044C  
                             u546_24 0723                               u546_25 0722  
                             u538_25 1333                               u548_24 0488  
                             u388_25 04FE                               u548_25 0487  
                             u556_25 1298                               _OSCFRQ 091F  
                        readBuffer@i 00A8                               _NVMADR 0891  
                             _TX1STA 019E              __end_of_findDeviceFlash 0F8F  
             __size_of_turnOnLedRamp 0012                     __end_of_ledSunrs 1351  
             ??i1_PWM1_LoadDutyValue 0072                               ___lmul 1652  
        __size_of_PWM3_LoadDutyValue 0010                               ___wmul 163D  
                             _getCRC 0F47                            ??___lldiv 00B4  
                          ??___ftmul 00B1                            ??___fttol 0030  
                          ??___lwdiv 00A4                            ??___lwmod 0074  
                   __end_of_readByte 091D   __end_of_INTERRUPT_interruptManager 0441  
         _INTERRUPT_interruptManager 0404                     ?_TMR0_Initialize 0070  
                   ?_PWM2_Initialize 0070               __end_of_EUSART_RCV_ISR 1CAB  
                             _runRTC 1D08                 __end_of_ledThunder_1 059B  
               __end_of_ledThunder_2 0672                 __end_of_ledThunder_3 11F8  
            __end_of_DATAEE_ReadByte 092B                ___ftmul@f3_as_product 00B5  
                          ??_initBLE 00C5                            ??_autoRun 00BE  
                          ??_initRTC 00A0                            ??_initLed 00DB  
                  __end_ofi1___ftmul 13AE                        updateLed@step 0078  
                          ??_preview 00A0                       bleSendData@len 00A3  
            __end_of_TMR2_StartTimer 0F7D                  __size_ofi1___ftpack 003E  
                   ?_PWM3_Initialize 0070                    _SYSTEM_Initialize 1D8F  
            __end_of__initialization 0C4F                  __size_ofi1___lwtoft 0011  
            __end_ofi1_updateDynamic 1272                      i1___ftpack@sign 0074  
                 ?_SYSTEM_Initialize 0070           __end_of_PWM2_LoadDutyValue 17C0  
        PWM1_LoadDutyValue@dutyValue 00A0                           ___ftmul@f1 00AB  
                         ___ftmul@f2 00AE                           ___fttol@f1 002C  
                     __pcstackCOMMON 0070                         __pidataBANK1 1C8D  
                       __pidataBANK2 0820                  ??_SYSTEM_Initialize 00A1  
                __size_of_DecodeDATA 02A4                     _DATAEE_WriteByte 1CE7  
                 _PWM1_LoadDutyValue 17A0                     ?_TMR2_Initialize 0070  
                   ?_PWM4_Initialize 0070                           __end_ofPL2 120C  
                         __end_ofPL4 1213                           __end_ofPL6 16C4  
               __size_of_initDynamic 01AF                           __end_ofPL8 121A  
               __size_of_readLedPara 0019                 i1_PWM2_LoadDutyValue 1415  
                    ?_EUSART_RCV_ISR 0070                           ___lwtoft@c 00A8  
        PWM4_LoadDutyValue@dutyValue 00A0                      BLE_SendCMD@pBuf 00A1  
                      _turnOnLedRamp 0F67                  ?_PWM1_LoadDutyValue 00A0  
                         _checkDevID 1F97                     ?_TMR0_StartTimer 0070  
          __end_of_SYSTEM_Initialize 1DA0                           __pbssBANK0 0040  
                         __pbssBANK1 00E8                           __pbssBANK3 01A0  
                         __pbssBANK4 0220                           __pbssBANK5 02A0  
                         __pbssBANK6 0320                     ?_findDeviceFlash 0070  
               ??_PWM1_LoadDutyValue 00A2                           __pmaintext 0C52  
      i1PWM3_LoadDutyValue@dutyValue 0070                              ?___lmul 00A0  
                            ?___wmul 00A0                              ?_getCRC 00A0  
                         __pintentry 0404                              _CCP1CON 0293  
                            _CCP2CON 0297                              _CCP3CON 0313  
                            _CCP4CON 0317                ?i1_PWM2_LoadDutyValue 0070  
                     ___lmul@product 00A8                            ?___ftpack 00A0  
                            ?_runRTC 0070                         ?_writeBuffer 00A6  
                         _ledDynamic 0443                            ?___lwtoft 00A8  
                   ?_DATAEE_ReadByte 00A0                       ?_turnOnLedRamp 0070  
               __size_of_saveLedPara 001A        __size_ofi1_PWM4_LoadDutyValue 000D  
                       initDynamic@i 00BD                              _SP1BRGH 019C  
                            _SP1BRGL 019B                              _OSCCON1 0919  
                            _OSCCON3 091B                   __size_of_updatePWM 0027  
                 __size_of_updateLed 0047                              _NVMADRH 0892  
                            _NVMADRL 0891                              _OSCTUNE 091E  
                            _NVMDATL 0893                              _NVMCON1 0895  
                            _NVMCON2 0896                              _PPSLOCK 0E0F  
                   ?_TMR2_StartTimer 0070                            ?_ledSunrs 0070  
                       readByte@addr 00A2         __end_ofi1_PWM3_LoadDutyValue 142F  
               DATAEE_WriteByte@bAdd 00A0                            ?_readByte 0070  
            __size_of_turnOffLedRamp 000C                      DecodeDATA@i_701 00CB  
                    DecodeDATA@i_703 00CA                      DecodeDATA@i_707 00CC  
                   ?i1_updateDynamic 0070                   __size_of_writeByte 0008  
                       ?i1_updatePWM 0070                           getCRC@pbuf 00A0  
                      ??_bleSendData 00A4                           _readBuffer 0900  
              __size_of_ledThunder_1 0059                __size_of_ledThunder_2 00D7  
                 eusartSendByte@byte 00A0                __size_of_ledThunder_3 0149  
                       ??i1___ftpack 0075                      __size_of___lmul 0025  
                            ___lldiv 1677                      __size_of___wmul 0015  
                            ___ftmul 0AEC                              ___fttol 04ED  
                    __size_of_getCRC 0014                              ___lwdiv 0FCA  
                            ___lwmod 1D6A                      turnOffLedRamp@i 00A0  
                       ??i1___lwtoft 007B                              _nRcvIdx 00E8  
                         ??___ftpack 00A5                              __ptext1 1CAB  
                            __ptext2 1CC5                              __ptext3 1CCC  
                            __ptext4 1CDF                              __ptext5 1CE7  
                            __ptext6 0FF9                              __ptext7 0FEF  
                            __ptext8 083D                              __ptext9 08E7  
                    __size_of_runRTC 0046                           ??___lwtoft 00AB  
                            _initBLE 1EE1                              _autoRun 146E  
                            _initRTC 0FEF                              getCRC@i 00A6  
                            _initLed 083D                _OSCILLATOR_Initialize 1DA0  
                          _T2CONbits 001F             ??_PIN_MANAGER_Initialize 00A0  
                       ??_DecodeDATA 00BE                              _preview 0FF9  
                        ?_checkDevID 0070           __size_of_SYSTEM_Initialize 0011  
                            clrloop0 1C82                           ??_ledSunrs 0039  
               end_of_initialization 0C4F                          _gLedRunPara 0049  
                 __end_ofi1___ftpack 13EC                           ??_readByte 00A2  
                            init_ram 1C87                              initloop 1C88  
                 __end_ofi1___lwtoft 06F2                         _ledThunder_1 0542  
                       _ledThunder_2 059B                         _ledThunder_3 10AF  
                  _EUSART_Initialize 1E21                        ??_BLE_SendCMD 00A3  
                    ___lldiv@divisor 00AC                      ___lldiv@counter 00B8  
                          _MONTH_DAY 0163                   ?_EUSART_Initialize 0070  
           __size_of_checkIsYearLeap 001C                    __end_of_updatePWM 17A0  
                  __end_of_updateLed 12CB                        ??_ledAllCOlor 0073  
                     readBuffer@addr 00A7                         writeBuffer@i 00AA  
             ??i1_PWM2_LoadDutyValue 0072          __size_of_PWM4_LoadDutyValue 0010  
                       __pstringtext 1800                   __end_of_DecodeDATA 0F47  
        ?_INTERRUPT_interruptManager 0070                      ??_turnOnLedRamp 00A0  
                ??_EUSART_Initialize 00A0                          ?_ledDynamic 0070  
                __end_of_bleSendData 1EE1                    __end_of_writeByte 1CE7  
                     updateDynamic@i 00A2                            i1___ftmul 1351  
           __end_of_DATAEE_WriteByte 1D08                            _RXPPSbits 0E24  
            __size_of_eusartSendByte 0009            __end_of_EUSART_Initialize 1E31  
              __end_of_updateDynamic 0BB3                          _CCP1CONbits 0293  
                        _CCP2CONbits 0297                          _CCP3CONbits 0313  
                        _CCP4CONbits 0317           __end_of_PWM3_LoadDutyValue 17D0  
           __size_of_PWM1_Initialize 000A                          ___ftmul@exp 00B4  
                   ??_EUSART_RCV_ISR 0070                           _turnOffLed 174B  
                         _turnMaxLed 175E                          ?_readBuffer 00A4  
                     readByte@result 00A3                  __size_of_checkDevID 003D  
                     __end_of___lmul 1677        __size_ofi1_PWM1_LoadDutyValue 000D  
                __end_of_BLE_SendCMD 1F8E                     writeLedPara@addr 00DC  
                     __end_of___wmul 1652                       __end_of_getCRC 0F5B  
                   writeLedPara@para 00AB                   _PWM2_LoadDutyValue 17B0  
             ?_OSCILLATOR_Initialize 0070                 i1_PWM3_LoadDutyValue 1422  
                __end_of_ledAllCOlor 06E1                     BLE_SendCMD@F7932 00E1  
                     __end_of_runRTC 1D4E                           autoRun@sec 013B  
                         autoRun@val 0120                 __size_of_writeBuffer 0013  
                        __end_ofPL10 16EA                          __end_ofPL20 1231  
                        __end_ofPL12 06F8                          __end_ofPL30 0728  
                        __end_ofPL22 0BBA                          __end_ofPL14 122C  
                        __end_ofPL40 072F                          __end_ofPL32 1705  
                        __end_ofPL24 1236                          __end_ofPL16 0714  
                        __end_ofPL50 0BC8                          __end_ofPL42 0FA0  
                        __end_ofPL34 12DD                          __end_ofPL26 16FE  
                        __end_ofPL18 16F0                          __end_ofPL60 0756  
                        __end_ofPL52 0748                          __end_ofPL44 0740  
                        __end_ofPL36 0BC3                          __end_ofPL28 071B  
                        __end_ofPL70 1284                          __end_ofPL62 127E  
                        __end_ofPL54 171E                          __end_ofPL46 1715  
                        __end_ofPL38 0F95                          __end_ofPL80 0776  
                        __end_ofPL72 0BE2                          __end_ofPL64 0BDB  
                        __end_ofPL56 0751                          __end_ofPL48 12E9  
                        __end_ofPL90 0BE9                          __end_ofPL82 0780  
                        __end_ofPL74 0FAB                          __end_ofPL66 0937  
                        __end_ofPL58 0BD5                          __end_ofPL92 0BF0  
                        __end_ofPL84 078A                          __end_ofPL76 0761  
                        __end_ofPL68 172A                          __end_ofPL94 123D  
                        __end_ofPL86 0794                          __end_ofPL78 076C  
                        __end_ofPL96 17E8                          __end_ofPL88 1446  
                        __end_ofPL98 17F0                  start_initialization 0C0D  
           __size_of_PWM2_Initialize 0009             __size_of_TMR0_Initialize 000B  
                ?_PWM2_LoadDutyValue 00A0      __size_of_PIN_MANAGER_Initialize 0044  
                  DecodeDATA@idx_704 00CD                    DecodeDATA@idx_705 00CE  
                  DecodeDATA@len_702 00C4                    DecodeDATA@len_706 00C5  
                         ?i1___ftmul 0020                    DecodeDATA@val_708 00C6  
                   BLE_SendCMD@index 00AE                       _turnOffLedRamp 0F5B  
                __size_of_ledDynamic 00AA                  DATAEE_ReadByte@bAdd 00A0  
                    checkDevID@F7939 0152                         getCRC@result 00A5  
               ??_PWM2_LoadDutyValue 00A2             __size_of_PWM3_Initialize 000B  
        PWM2_LoadDutyValue@dutyValue 00A0                        ??_initDynamic 00BA  
                      ??_readLedPara 00DA                             ??___lmul 00A8  
                           ??___wmul 00A4                          _bleSendData 1EBF  
                           ??_getCRC 00A3                          _CCPTMRSbits 029F  
               __size_ofi1_updatePWM 001C                          __pdataBANK1 00E1  
                        __pdataBANK2 0152                             ??_runRTC 0077  
              ?i1_PWM3_LoadDutyValue 0070                      checkDevID@index 00C4  
                  ??_checkIsYearLeap 0077                    __size_of___ftpack 003E  
                          ___latbits 0002                    __size_of___lwtoft 0010  
                      __pcstackBANK0 0020                        __pcstackBANK1 00A0  
                      __pcstackBANK2 0120             __size_of_PWM4_Initialize 000B  
           __size_of_TMR2_Initialize 000A               __end_of_turnOffLedRamp 0F67  
                __size_of_readBuffer 0014           __size_of_EUSART_Initialize 0010  
      i1PWM1_LoadDutyValue@dutyValue 0070                    __size_of_ledSunrs 0062  
       __end_ofi1_PWM4_LoadDutyValue 143C             __size_of_TMR0_StartTimer 0002  
                  __size_of_readByte 0009                          _BLE_SendCMD 1F3D  
        __size_of_PWM1_LoadDutyValue 0010                     ___lwdiv@dividend 00A2  
             _PIN_MANAGER_Initialize 1DAA                          ?_turnOffLed 0070  
                        ?_turnMaxLed 0070                          _ledAllCOlor 0672  
                           ?___lldiv 00AC                             ?___ftmul 00AB  
                           ?___fttol 002C        i1PWM4_LoadDutyValue@dutyValue 0070  
           __size_of_findDeviceFlash 0012                             ?___lwdiv 00A0  
                           ?___lwmod 0070                        ??_saveLedPara 00DD  
                  ??_PWM1_Initialize 00A0                            __pswtext1 0800  
                          __pswtext2 1096                            __pswtext3 184F  
                          __pswtext4 07DC                            __pswtext5 1000  
                          __pswtext6 1865                            __pswtext7 187B  
                __end_of_initDynamic 0AEC                  __end_of_readLedPara 0900  
                           ?_initBLE 0070                             _BAUD1CON 019F  
                           ?_autoRun 0070                             ?_initRTC 0070  
                           ?_initLed 0070                            getCRC@len 00A2  
                      ?_writeLedPara 00AB                             ?_preview 0070  
                        ??i1___ftmul 007B                         ??_checkDevID 00AF  
                   ___lwdiv@quotient 00A5             __size_of_DATAEE_ReadByte 000E  
                    ?_turnOffLedRamp 0070                       turnOnLedRamp@i 00A0  
                     _eusartSendByte 1F8E                          DecodeDATA@i 00CF  
                  ??_TMR0_Initialize 00A0                    ??_PWM2_Initialize 00A0  
                     ___wmul@product 00A4                            clear_ram0 1C81  
                           _PIE0bits 0090                             _PIE1bits 0091  
           __size_of_TMR2_StartTimer 0002                             _PIR0bits 0010  
                           _PIR1bits 0011                        readBuffer@buf 00A4  
                      readBuffer@len 00A5                     initDynamic@i_943 00BC  
           __size_ofi1_updateDynamic 001A               ??i1_PWM3_LoadDutyValue 0072  
                 __end_of_checkDevID 1FD4                            _updatePWM 1779  
                          _updateLed 1284                    ??_PWM3_Initialize 00A0  
                       ??_ledDynamic 0039                    ___wmul@multiplier 00A0  
                          ledSunrs@i 003F                       ??_writeLedPara 00DC  
                __end_of_saveLedPara 1CC5                   findDeviceFlash@tog 0047  
              DATAEE_WriteByte@bData 00A2               __end_of_eusartSendByte 1F97  
                          _writeByte 1CDF                  __size_of_turnMaxLed 001B  
                __size_of_turnOffLed 0013                    ___lmul@multiplier 00A0  
                autoRun@auto_dyn_end 013E                           updateLed@i 0079  
                          autoRun@ct 0149                            autoRun@dt 0140  
                          autoRun@et 0145                            autoRun@st 0147  
                          autoRun@tr 0130                    ?_DATAEE_WriteByte 00A0  
                  ??_TMR2_Initialize 00A0                    ??_PWM4_Initialize 00A0  
                 ??_DATAEE_WriteByte 00A3                     i1updateDynamic@i 0072  
               bleSendDeviceData@len 00A8                   __end_of_ledDynamic 04ED  
                    writeBuffer@addr 00A9           __end_of_PWM4_LoadDutyValue 17E0  
                       ??_readBuffer 00A6                             _gLedPara 0220  
                        _initDynamic 093D                          _readLedPara 08E7  
            ??_OSCILLATOR_Initialize 00A0                             _gDynPara 01A0  
                  ??_TMR0_StartTimer 00A0                     __size_of___lldiv 003F  
                   __size_of___ftmul 005C                     __size_of___fttol 0055  
                   __size_of___lwdiv 0025                           ?_updatePWM 0070  
                   __size_of___lwmod 0020                           ?_updateLed 0070  
      __size_ofi1_PWM2_LoadDutyValue 000D                             ___ftpack 0B58  
                 _PWM3_LoadDutyValue 17C0                             ___lwtoft 0B48  
              __end_of_turnOnLedRamp 0F79                 i1_PWM4_LoadDutyValue 142F  
                  ??_findDeviceFlash 00A2                    _bleSendDeviceData 1E71  
                   __size_of_initBLE 005C                     __size_of_autoRun 01CF  
                         _T0CON0bits 0017                     __size_of_initRTC 000A  
                  _bleSendDeviceTime 1E42                     __size_of_initLed 00AA  
                     ledDynamic@temp 003D                 bleSendDeviceTime@len 00A7  
                    ___lwdiv@divisor 00A0                   ?_bleSendDeviceData 0070  
                    ___lwdiv@counter 00A4                   ?_bleSendDeviceTime 0070  
                           __ptext10 0900                             __ptext11 0914  
                           __ptext20 163D                             __ptext12 091D  
                           __ptext21 1652                             __ptext13 1EE1  
                           __ptext30 1DF8                             __ptext22 1677  
                           __ptext14 1F97                             __ptext31 1DEE  
                           __ptext23 0F7B                             __ptext15 1F3D  
                           __ptext40 17A0                             __ptext32 1DAA  
                           __ptext24 0F79                             __ptext16 0F7D  
                           __ptext41 0F67                             __ptext33 1DA0  
                           __ptext25 1D8F                             __ptext17 174B  
                           __ptext50 0F47                             __ptext42 0F5B  
                           __ptext34 1E21                             __ptext26 1E17  
                           __ptext18 175E                             __ptext51 1EBF  
                           __ptext43 093D                             __ptext35 0CA3  
                           __ptext27 1E31                             __ptext19 146E  
                           __ptext60 0443                             __ptext52 1F8E  
                           __ptext44 0B96                             __ptext36 1779  
                           __ptext28 1E0C                             __ptext61 13EC  
                           __ptext53 0FCA                             __ptext45 0B48  
                           __ptext37 17D0                             __ptext29 1E01  
                           __ptext70 059B                             __ptext62 142F  
                           __ptext46 0AEC                             __ptext38 17C0  
                           __ptext71 0542                             __ptext63 1422  
                           __ptext55 1284                             __ptext47 0B58  
                           __ptext39 17B0                             __ptext72 0672  
                           __ptext64 1415                             __ptext56 1D08  
                           __ptext48 1E42                             __ptext73 1258  
                           __ptext65 1408                             __ptext57 1D4E  
                           __ptext49 1E71                             __ptext74 04ED  
                           __ptext66 06E1                             __ptext58 1D6A  
                ?_PWM3_LoadDutyValue 00A0                             __ptext75 1C94  
                           __ptext67 1351                             __ptext59 12EF  
                           __ptext68 13AE                             __ptext69 10AF  
                    ?_eusartSendByte 0070                           ?_writeByte 00A4  
                   __size_of_preview 0007         __end_ofi1_PWM1_LoadDutyValue 1415  
                           _ledSunrs 12EF                   __end_of_readBuffer 0914  
        DATAEE_WriteByte@GIEBitValue 00A3                        DecodeDATA@idx 00C3  
                      DecodeDATA@val 00C8                  ??_bleSendDeviceData 00A7  
                           _readByte 0914                  ??_bleSendDeviceTime 00A7  
                      __size_of_main 0051                    ??_DATAEE_ReadByte 00A2  
                    _checkIsYearLeap 1D4E                      autoRun@duration 0139  
                         _RC1STAbits 019D                           _RB4PPSbits 0E9C  
               ??_PWM3_LoadDutyValue 00A2                           _RC3PPSbits 0EA3  
                         _RC4PPSbits 0EA4                         ?_bleSendData 00A1  
                           int$flags 007E                           _RC5PPSbits 0EA5  
                         _RC6PPSbits 0EA6                    ??_TMR2_StartTimer 00A0  
                        _saveLedPara 1CAB                        ??_writeBuffer 00A8  
          __end_of_bleSendDeviceData 1EBF          PIN_MANAGER_Initialize@state 00A0  
          __end_of_bleSendDeviceTime 1E71                ?i1_PWM4_LoadDutyValue 0070  
                           autoRun@i 014C                             autoRun@j 0144  
                           autoRun@k 014B               __size_of_updateDynamic 001D  
                  ??i1_updateDynamic 0070                           _INTCONbits 000B  
                           initLed@i 00DF                             initLed@j 00DE  
                        _NVMCON1bits 0895                       writeBuffer@buf 00A6  
                     writeBuffer@len 00A7                  checkIsYearLeap@year 0075  
                    readLedPara@addr 0120                      readLedPara@para 0121  
                           intlevel1 0000                     ___lwmod@dividend 0072  
                   ___lldiv@dividend 00B0              ?_PIN_MANAGER_Initialize 0070  
                        _PPSLOCKbits 0E0F                      _PWM1_Initialize 1DEE  
                       ?_BLE_SendCMD 00A1                        ??i1_updatePWM 0072  
               __end_of_writeLedPara 1CCC          __size_of_PWM2_LoadDutyValue 0010  
                       ??_turnOffLed 00A2                         ??_turnMaxLed 00A2  
                       ?_ledAllCOlor 0070          PWM3_LoadDutyValue@dutyValue 00A0  
                   bleSendData@frame 00A1                          ??_updatePWM 00A2  
                 bleSendDeviceData@i 00A9                          ??_updateLed 0072  
                 bleSendDeviceTime@i 00A8                     ___lldiv@quotient 00B4  
                    ___lwmod@divisor 0070              __size_of_EUSART_RCV_ISR 0017  
                   ??_turnOffLedRamp 00A0                      _TMR0_Initialize 1E31  
                    _PWM2_Initialize 1DF8                        writeByte@addr 00A5  
                    ___lwmod@counter 0074                        writeByte@byte 00A4  
                __end_of_writeBuffer 1CDF                          ??_writeByte 00A5  
                 __end_of_turnMaxLed 1779                   __end_of_turnOffLed 175E  
                        ledDynamic@i 003F       __end_of_PIN_MANAGER_Initialize 1DEE  
            __end_of_checkIsYearLeap 1D6A                        ?_ledThunder_1 0070  
                      ?_ledThunder_2 0070                        ?_ledThunder_3 0070  
         __end_of_PWM1_LoadDutyValue 17B0                         _gCurrentTime 0040  
                      _updateDynamic 0B96        i1PWM2_LoadDutyValue@dutyValue 0070  
                    _PWM3_Initialize 1E01  
